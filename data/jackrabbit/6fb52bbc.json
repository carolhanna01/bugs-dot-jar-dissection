{
  "project": "jackrabbit",
  "jira_id": "2213",
  "commit": "6fb52bbc",
  "classification": {
    "singleLine": false
  },
  "patch": "diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/SessionImpl.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/SessionImpl.java\nindex 895452db8..be05f3ce1 100644\n--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/SessionImpl.java\n+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/SessionImpl.java\n@@ -113,12 +113,6 @@ import org.xml.sax.InputSource;\n public class SessionImpl extends AbstractSession\n         implements JackrabbitSession, NamespaceResolver, NamePathResolver, IdentifierResolver, Dumpable {\n \n-    @Override\n-    public boolean hasCapability(String methodName, Object target, Object[] arguments) {\n-        // Provide a basic implementation\n-        return true; // or false, or delegate if needed\n-    }\n-\n     /**\n      * Name of the session attribute that controls whether the\n      * {@link #refresh(boolean)} method will cause the repository to\ndiff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/cluster/ChangeLogRecord.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/cluster/ChangeLogRecord.java\nindex 313c6d602..2a8e8b482 100644\n--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/cluster/ChangeLogRecord.java\n+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/cluster/ChangeLogRecord.java\n@@ -114,7 +114,7 @@ public class ChangeLogRecord extends ClusterRecord {\n     /**\n      * Last used session for event sources.\n      */\n-    private Session lastSession;\n+    private ClusterSession lastSession;\n \n     /**\n      * Create a new instance of this class. Used when serializing.\n@@ -358,7 +358,7 @@ public class ChangeLogRecord extends ClusterRecord {\n      * @return session\n      */\n     private Session getOrCreateSession(String userId) {\n-        if (lastSession == null || !lastSession.getUserID().equals(userId)) {\n+        if (lastSession == null || !lastSession.isUserId(userId)) {\n             lastSession = new ClusterSession(userId);\n         }\n         return lastSession;\ndiff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/cluster/ClusterSession.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/cluster/ClusterSession.java\nindex 9adea0bad..071e0f035 100644\n--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/cluster/ClusterSession.java\n+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/cluster/ClusterSession.java\n@@ -41,12 +41,6 @@ import org.xml.sax.ContentHandler;\n  */\n class ClusterSession implements Session {\n \n-    @Override\n-    public boolean hasCapability(String methodName, Object target, Object[] arguments) {\n-        // Provide fallback logic, or return a fixed value\n-        return true; // or false\n-    }\n-\n     /**\n      * User id to represent.\n      */\n@@ -61,6 +55,22 @@ class ClusterSession implements Session {\n         this.userId = userId;\n     }\n \n+    /**\n+     * Returns <code>true</code> if the given <code>userId</code> is the same as\n+     * the {@link #userId} of this session.\n+     *\n+     * @param userId the user id or <code>null</code>.\n+     * @return <code>true</code> if they are the same; <code>false</code>\n+     *         otherwise.\n+     */\n+    boolean isUserId(String userId) {\n+        if (userId == null) {\n+            return this.userId == null;\n+        } else {\n+            return userId.equals(this.userId);\n+        }\n+    }\n+\n     /**\n      * {@inheritDoc}\n      */\n@@ -290,7 +300,7 @@ class ClusterSession implements Session {\n     public boolean equals(Object obj) {\n         if (obj instanceof ClusterSession) {\n             ClusterSession other = (ClusterSession) obj;\n-            return userId.equals(other.userId);\n+            return isUserId(other.userId);\n         }\n         return false;\n     }\ndiff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/JcrVersionManagerImpl.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/JcrVersionManagerImpl.java\nindex 63f86c739..58bc218f7 100644\n--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/JcrVersionManagerImpl.java\n+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/JcrVersionManagerImpl.java\n@@ -46,11 +46,6 @@ import org.slf4j.Logger;\n  */\n public class JcrVersionManagerImpl implements javax.jcr.version.VersionManager {\n \n-    @Override\n-    public VersionHistory createConfiguration(String workspaceName) throws RepositoryException {\n-        throw new UnsupportedOperationException(\"createConfiguration is not supported in this version.\");\n-    }\n-\n     /**\n      * default logger\n      */\ndiff --git a/jackrabbit-jca/src/main/java/org/apache/jackrabbit/jca/JCASessionHandle.java b/jackrabbit-jca/src/main/java/org/apache/jackrabbit/jca/JCASessionHandle.java\nindex 5c44e48af..fd40552ec 100644\n--- a/jackrabbit-jca/src/main/java/org/apache/jackrabbit/jca/JCASessionHandle.java\n+++ b/jackrabbit-jca/src/main/java/org/apache/jackrabbit/jca/JCASessionHandle.java\n@@ -57,12 +57,6 @@ import java.util.Map;\n  */\n public final class JCASessionHandle implements XASession {\n \n-    @Override\n-    public boolean hasCapability(String methodName, Object target, Object[] arguments) {\n-        // You can return false if unsure; it's usually safe in mocks/adapters\n-        return false;\n-    }\n-\n     /**\n      * Managed connection.\n      */\n",
  "files": 5,
  "linesAdd": 19,
  "linesRem": 26,
  "failing_tests": ["org.apache.jackrabbit.core.cluster.ClusterRecordTest.testUpdateOperationWithNullUserId"],
  "nb_test": 895,
  "nb_failure": 0,
  "nb_error": 1,
  "nb_skipped": 0
}