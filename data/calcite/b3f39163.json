{
  "project": "calcite",
  "jira_id": "1282",
  "commit": "b3f39163",
  "classification": {
    "singleLine": false
  },
  "patch": "diff --git a/avatica/server/src/main/java/org/apache/calcite/avatica/server/HttpServer.java b/avatica/server/src/main/java/org/apache/calcite/avatica/server/HttpServer.java\nindex b047137d1..3050f726e 100644\n--- a/avatica/server/src/main/java/org/apache/calcite/avatica/server/HttpServer.java\n+++ b/avatica/server/src/main/java/org/apache/calcite/avatica/server/HttpServer.java\n@@ -242,8 +242,24 @@ protected ConstraintSecurityHandler configureSpnego(Server server, ServerConnect\n     PropertyBasedSpnegoLoginService spnegoLoginService =\n         new PropertyBasedSpnegoLoginService(realm, principal);\n \n+    // Roles are \"realms\" for Kerberos/SPNEGO\n+    final String[] allowedRealms = getAllowedRealms(realm, config);\n+\n     return configureCommonAuthentication(server, connector, config, Constraint.__SPNEGO_AUTH,\n-        new String[] {realm}, new SpnegoAuthenticator(), realm, spnegoLoginService);\n+        allowedRealms, new SpnegoAuthenticator(), realm, spnegoLoginService);\n+  }\n+\n+  protected String[] getAllowedRealms(String serverRealm, AvaticaServerConfiguration config) {\n+    // Roles are \"realms\" for Kerberos/SPNEGO\n+    String[] allowedRealms = new String[] {serverRealm};\n+    // By default, only the server's realm is allowed, but other realms can also be allowed.\n+    if (null != config.getAllowedRoles()) {\n+      allowedRealms = new String[config.getAllowedRoles().length + 1];\n+      allowedRealms[0] = serverRealm;\n+      System.arraycopy(config.getAllowedRoles(), 0, allowedRealms, 1,\n+          config.getAllowedRoles().length);\n+    }\n+    return allowedRealms;\n   }\n \n   protected ConstraintSecurityHandler configureBasicAuthentication(Server server,\n@@ -315,6 +331,10 @@ protected ServerConnector configureConnector(ServerConnector connector, int port\n     return connector;\n   }\n \n+  protected AvaticaServerConfiguration getConfig() {\n+    return this.config;\n+  }\n+\n   public void stop() {\n     if (server == null) {\n       throw new RuntimeException(\"Server is already stopped\");\n@@ -416,13 +436,29 @@ public Builder withMetricsConfiguration(MetricsSystemConfiguration<?> metricsCon\n      * @return <code>this</code>\n      */\n     public Builder withSpnego(String principal) {\n+      return withSpnego(principal, (String[]) null);\n+    }\n+\n+    /**\n+     * Configures the server to use SPNEGO authentication. This method requires that the\n+     * <code>principal</code> contains the Kerberos realm. Invoking this method overrides any\n+     * previous call which configures authentication. Invoking this method overrides any previous\n+     * call which configures authentication. By default, only principals from the server's realm are\n+     * permitted, but additional realms can be allowed using <code>additionalAllowedRealms</code>.\n+     *\n+     * @param principal A kerberos principal with the realm required.\n+     * @param additionalAllowedRealms Any additional realms, other than the server's realm, which\n+     *    should be allowed to authenticate against the server. Can be null.\n+     * @return <code>this</code>\n+     */\n+    public Builder withSpnego(String principal, String[] additionalAllowedRealms) {\n       int index = Objects.requireNonNull(principal).lastIndexOf('@');\n       if (-1 == index) {\n         throw new IllegalArgumentException(\"Could not find '@' symbol in '\" + principal\n             + \"' to parse the Kerberos realm from the principal\");\n       }\n       final String realm = principal.substring(index + 1);\n-      return withSpnego(principal, realm);\n+      return withSpnego(principal, realm, additionalAllowedRealms);\n     }\n \n     /**\n@@ -437,9 +473,28 @@ public Builder withSpnego(String principal) {\n      * @return <code>this</code>\n      */\n     public Builder withSpnego(String principal, String realm) {\n+      return this.withSpnego(principal, realm, null);\n+    }\n+\n+    /**\n+     * Configures the server to use SPNEGO authentication. It is required that callers are logged\n+     * in via Kerberos already or have provided the necessary configuration to automatically log\n+     * in via JAAS (using the <code>java.security.auth.login.config</code> system property) before\n+     * starting the {@link HttpServer}. Invoking this method overrides any previous call which\n+     * configures authentication. By default, only principals from the server's realm are permitted,\n+     * but additional realms can be allowed using <code>additionalAllowedRealms</code>.\n+     *\n+     * @param principal The kerberos principal\n+     * @param realm The kerberos realm\n+     * @param additionalAllowedRealms Any additional realms, other than the server's realm, which\n+     *    should be allowed to authenticate against the server. Can be null.\n+     * @return <code>this</code>\n+     */\n+    public Builder withSpnego(String principal, String realm, String[] additionalAllowedRealms) {\n       this.authenticationType = AuthenticationType.SPNEGO;\n       this.kerberosPrincipal = Objects.requireNonNull(principal);\n       this.kerberosRealm = Objects.requireNonNull(realm);\n+      this.loginServiceAllowedRoles = additionalAllowedRealms;\n       return this;\n     }\n \n@@ -568,6 +623,7 @@ private AvaticaHandler buildHandler(Builder b, AvaticaServerConfiguration config\n     private AvaticaServerConfiguration buildSpnegoConfiguration(Builder b) {\n       final String principal = b.kerberosPrincipal;\n       final String realm = b.kerberosRealm;\n+      final String[] additionalAllowedRealms = b.loginServiceAllowedRoles;\n       final DoAsRemoteUserCallback callback = b.remoteUserCallback;\n       return new AvaticaServerConfiguration() {\n \n@@ -593,7 +649,7 @@ private AvaticaServerConfiguration buildSpnegoConfiguration(Builder b) {\n         }\n \n         @Override public String[] getAllowedRoles() {\n-          return null;\n+          return additionalAllowedRealms;\n         }\n \n         @Override public String getHashLoginServiceRealm() {\n",
  "files": 1,
  "linesAdd": 59,
  "linesRem": 3,
  "failing_tests": [],
  "nb_test": 13,
  "nb_failure": 0,
  "nb_error": 0,
  "nb_skipped": 0
}