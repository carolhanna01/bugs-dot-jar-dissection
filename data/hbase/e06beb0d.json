{
  "project": "hbase",
  "jira_id": "21890",
  "commit": "e06beb0d",
  "classification": {
    "singleLine": false
  },
  "patch": "diff --git a/hbase-procedure/src/main/java/org/apache/hadoop/hbase/procedure2/RemoteProcedureDispatcher.java b/hbase-procedure/src/main/java/org/apache/hadoop/hbase/procedure2/RemoteProcedureDispatcher.java\nindex 402aa33f57..958b071404 100644\n--- a/hbase-procedure/src/main/java/org/apache/hadoop/hbase/procedure2/RemoteProcedureDispatcher.java\n+++ b/hbase-procedure/src/main/java/org/apache/hadoop/hbase/procedure2/RemoteProcedureDispatcher.java\n@@ -23,25 +23,21 @@ import java.lang.Thread.UncaughtExceptionHandler;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import java.util.concurrent.Callable;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.DelayQueue;\n-import java.util.concurrent.Future;\n-import java.util.concurrent.FutureTask;\n import java.util.concurrent.ThreadPoolExecutor;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicBoolean;\n-\n import org.apache.hadoop.conf.Configuration;\n-import org.apache.yetus.audience.InterfaceAudience;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.apache.hadoop.hbase.procedure2.util.DelayedUtil;\n import org.apache.hadoop.hbase.procedure2.util.DelayedUtil.DelayedContainerWithTimestamp;\n import org.apache.hadoop.hbase.procedure2.util.DelayedUtil.DelayedWithTimeout;\n import org.apache.hadoop.hbase.procedure2.util.StringUtils;\n import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n import org.apache.hadoop.hbase.util.Threads;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import org.apache.hbase.thirdparty.com.google.common.collect.ArrayListMultimap;\n \n@@ -52,7 +48,7 @@ import org.apache.hbase.thirdparty.com.google.common.collect.ArrayListMultimap;\n  * <li>Each server queue has a dispatch buffer</li>\n  * <li>Once the dispatch buffer reaches a threshold-size/time we send<li>\n  * </ul>\n- * <p>Call {@link #start()} and then {@link #submitTask(Callable)}. When done,\n+ * <p>Call {@link #start()} and then {@link #submitTask(Runnable)}. When done,\n  * call {@link #stop()}.\n  */\n @InterfaceAudience.Private\n@@ -139,14 +135,7 @@ public abstract class RemoteProcedureDispatcher<TEnv, TRemote extends Comparable\n     }\n   }\n \n-  protected UncaughtExceptionHandler getUncaughtExceptionHandler() {\n-    return new UncaughtExceptionHandler() {\n-      @Override\n-      public void uncaughtException(Thread t, Throwable e) {\n-        LOG.warn(\"Failed to execute remote procedures \" + t.getName(), e);\n-      }\n-    };\n-  }\n+  protected abstract UncaughtExceptionHandler getUncaughtExceptionHandler();\n \n   // ============================================================================================\n   //  Node Helpers\n@@ -197,14 +186,12 @@ public abstract class RemoteProcedureDispatcher<TEnv, TRemote extends Comparable\n   // ============================================================================================\n   //  Task Helpers\n   // ============================================================================================\n-  protected Future<Void> submitTask(Callable<Void> task) {\n-    return threadPool.submit(task);\n+  protected final void submitTask(Runnable task) {\n+    threadPool.execute(task);\n   }\n \n-  protected Future<Void> submitTask(Callable<Void> task, long delay, TimeUnit unit) {\n-    final FutureTask<Void> futureTask = new FutureTask(task);\n-    timeoutExecutor.add(new DelayedTask(futureTask, delay, unit));\n-    return futureTask;\n+  protected final void submitTask(Runnable task, long delay, TimeUnit unit) {\n+    timeoutExecutor.add(new DelayedTask(task, delay, unit));\n   }\n \n   protected abstract void remoteDispatch(TRemote key, Set<RemoteProcedure> operations);\n@@ -254,8 +241,6 @@ public abstract class RemoteProcedureDispatcher<TEnv, TRemote extends Comparable\n \n   /**\n    * Account of what procedures are running on remote node.\n-   * @param <TEnv>\n-   * @param <TRemote>\n    */\n   public interface RemoteNode<TEnv, TRemote> {\n     TRemote getKey();\n@@ -390,10 +377,11 @@ public abstract class RemoteProcedureDispatcher<TEnv, TRemote extends Comparable\n \n   /**\n    * Delayed object that holds a FutureTask.\n+   * <p/>\n    * used to submit something later to the thread-pool.\n    */\n-  private static final class DelayedTask extends DelayedContainerWithTimestamp<FutureTask<Void>> {\n-    public DelayedTask(final FutureTask<Void> task, final long delay, final TimeUnit unit) {\n+  private static final class DelayedTask extends DelayedContainerWithTimestamp<Runnable> {\n+    public DelayedTask(Runnable task, long delay, TimeUnit unit) {\n       super(task, EnvironmentEdgeManager.currentTime() + unit.toMillis(delay));\n     }\n   }\n",
  "files": 1,
  "linesAdd": 12,
  "linesRem": 26,
  "failing_tests": [],
  "nb_test": 0,
  "nb_failure": 0,
  "nb_error": 0,
  "nb_skipped": 0
}