{
  "project": "hbase",
  "jira_id": "21900",
  "commit": "b3eb70c3",
  "classification": {
    "singleLine": false
  },
  "patch": "diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/AsyncMetaRegionLocator.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/AsyncMetaRegionLocator.java\nindex ce3a2ddd81..f5b3f92f65 100644\n--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/AsyncMetaRegionLocator.java\n+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/AsyncMetaRegionLocator.java\n@@ -92,6 +92,7 @@ class AsyncMetaRegionLocator {\n           metaRelocateFuture.set(null);\n           future.complete(locs);\n         });\n+        return future;\n       } else {\n         CompletableFuture<RegionLocations> future = metaRelocateFuture.get();\n         if (future != null) {\ndiff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/zookeeper/ReadOnlyZKClient.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/zookeeper/ReadOnlyZKClient.java\nindex 3b508707f2..9873e831a6 100644\n--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/zookeeper/ReadOnlyZKClient.java\n+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/zookeeper/ReadOnlyZKClient.java\n@@ -31,6 +31,7 @@ import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicBoolean;\n import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.hbase.DoNotRetryIOException;\n+import org.apache.hadoop.hbase.util.FutureUtils;\n import org.apache.hadoop.hbase.util.Threads;\n import org.apache.yetus.audience.InterfaceAudience;\n import org.apache.zookeeper.KeeperException;\n@@ -252,15 +253,9 @@ public final class ReadOnlyZKClient implements Closeable {\n     }\n   }\n \n-  private static <T> CompletableFuture<T> failed(Throwable e) {\n-    CompletableFuture<T> future = new CompletableFuture<>();\n-    future.completeExceptionally(e);\n-    return future;\n-  }\n-\n   public CompletableFuture<byte[]> get(String path) {\n     if (closed.get()) {\n-      return failed(new DoNotRetryIOException(\"Client already closed\"));\n+      return FutureUtils.failedFuture(new DoNotRetryIOException(\"Client already closed\"));\n     }\n     CompletableFuture<byte[]> future = new CompletableFuture<>();\n     tasks.add(new ZKTask<byte[]>(path, future, \"get\") {\n@@ -276,7 +271,7 @@ public final class ReadOnlyZKClient implements Closeable {\n \n   public CompletableFuture<Stat> exists(String path) {\n     if (closed.get()) {\n-      return failed(new DoNotRetryIOException(\"Client already closed\"));\n+      return FutureUtils.failedFuture(new DoNotRetryIOException(\"Client already closed\"));\n     }\n     CompletableFuture<Stat> future = new CompletableFuture<>();\n     tasks.add(new ZKTask<Stat>(path, future, \"exists\") {\ndiff --git a/hbase-common/src/main/java/org/apache/hadoop/hbase/util/FutureUtils.java b/hbase-common/src/main/java/org/apache/hadoop/hbase/util/FutureUtils.java\nindex 861dacbc32..6f0077c798 100644\n--- a/hbase-common/src/main/java/org/apache/hadoop/hbase/util/FutureUtils.java\n+++ b/hbase-common/src/main/java/org/apache/hadoop/hbase/util/FutureUtils.java\n@@ -134,4 +134,13 @@ public final class FutureUtils {\n       throw new IOException(cause);\n     }\n   }\n+\n+  /**\n+   * Returns a CompletableFuture that is already completed exceptionally with the given exception.\n+   */\n+  public static <T> CompletableFuture<T> failedFuture(Throwable e) {\n+    CompletableFuture<T> future = new CompletableFuture<>();\n+    future.completeExceptionally(e);\n+    return future;\n+  }\n }\n\\ No newline at end of file\n",
  "files": 3,
  "linesAdd": 13,
  "linesRem": 8,
  "failing_tests": [],
  "nb_test": 214,
  "nb_failure": 0,
  "nb_error": 0,
  "nb_skipped": 1
}