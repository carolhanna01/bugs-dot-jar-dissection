{"files": 1, "singleLine": false, "nb_error": 0, "failing_tests": ["testMissingPluginDependencyGroupId(org.apache.maven.model.validation.DefaultModelValidatorTest)", "testMissingPluginDependencyArtifactId(org.apache.maven.model.validation.DefaultModelValidatorTest)", "testMissingPluginDependencyVersion(org.apache.maven.model.validation.DefaultModelValidatorTest)", "testBadPluginDependencyVersion(org.apache.maven.model.validation.DefaultModelValidatorTest)"], "nb_test": 82, "patch": "diff --git a/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java b/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java\nindex fa262c8..bed7b47 100644\n--- a/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java\n+++ b/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java\n@@ -253,12 +253,7 @@ public class DefaultModelValidator\n                     validateBoolean( \"build.plugins.plugin.extensions\", problems, errOn30, p.getExtensions(),\n                                      p.getKey() );\n \n-                    for ( Dependency d : p.getDependencies() )\n-                    {\n-                        validateEnum( \"build.plugins.plugin[\" + p.getKey() + \"].dependencies.dependency.scope\",\n-                                      problems, errOn30, d.getScope(), d.getManagementKey(),\n-                                      \"compile\", \"runtime\", \"system\" );\n-                    }\n+                    validateEffectivePluginDependencies( problems, p, request );\n                 }\n \n                 validateResources( problems, build.getResources(), \"build.resources.resource\", request );\n@@ -365,67 +360,21 @@ public class DefaultModelValidator\n     }\n \n     private void validateEffectiveDependencies( ModelProblemCollector problems, List<Dependency> dependencies,\n-                                                boolean managed, ModelBuildingRequest request )\n+                                                boolean management, ModelBuildingRequest request )\n     {\n         Severity errOn30 = getSeverity( request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0 );\n \n-        String prefix = managed ? \"dependencyManagement.dependencies.dependency.\" : \"dependencies.dependency.\";\n+        String prefix = management ? \"dependencyManagement.dependencies.dependency.\" : \"dependencies.dependency.\";\n \n         for ( Dependency d : dependencies )\n         {\n-            validateId( prefix + \"artifactId\", problems, d.getArtifactId(), d.getManagementKey() );\n-\n-            validateId( prefix + \"groupId\", problems, d.getGroupId(), d.getManagementKey() );\n-\n-            if ( !managed )\n-            {\n-                validateStringNotEmpty( prefix + \"type\", problems, Severity.ERROR, d.getType(), d.getManagementKey() );\n-\n-                validateStringNotEmpty( prefix + \"version\", problems, Severity.ERROR, d.getVersion(),\n-                                        d.getManagementKey() );\n-            }\n-\n-            if ( \"system\".equals( d.getScope() ) )\n-            {\n-                String systemPath = d.getSystemPath();\n-\n-                if ( StringUtils.isEmpty( systemPath ) )\n-                {\n-                    addViolation( problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"is missing.\" );\n-                }\n-                else\n-                {\n-                    File sysFile = new File( systemPath );\n-                    if ( !sysFile.isAbsolute() )\n-                    {\n-                        addViolation( problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(),\n-                                      \"must specify an absolute path but is \" + systemPath );\n-                    }\n-                    else if ( !sysFile.isFile() )\n-                    {\n-                        String msg = \"refers to a non-existing file \" + sysFile.getAbsolutePath();\n-                        systemPath = systemPath.replace( '/', File.separatorChar ).replace( '\\\\', File.separatorChar );\n-                        String jdkHome =\n-                            request.getSystemProperties().getProperty( \"java.home\", \"\" ) + File.separator + \"..\";\n-                        if ( systemPath.startsWith( jdkHome ) )\n-                        {\n-                            msg += \". Please verify that you run Maven using a JDK and not just a JRE.\";\n-                        }\n-                        addViolation( problems, Severity.WARNING, prefix + \"systemPath\", d.getManagementKey(), msg );\n-                    }\n-                }\n-            }\n-            else if ( StringUtils.isNotEmpty( d.getSystemPath() ) )\n-            {\n-                addViolation( problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must be omitted.\"\n-                    + \" This field may only be specified for a dependency with system scope.\" );\n-            }\n+            validateEffectiveDependency( problems, d, management, prefix, request );\n \n             if ( request.getValidationLevel() >= ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0 )\n             {\n                 validateBoolean( prefix + \"optional\", problems, errOn30, d.getOptional(), d.getManagementKey() );\n \n-                if ( !managed )\n+                if ( !management )\n                 {\n                     validateVersion( prefix + \"version\", problems, errOn30, d.getVersion(), d.getManagementKey() );\n \n@@ -440,6 +389,80 @@ public class DefaultModelValidator\n         }\n     }\n \n+    private void validateEffectivePluginDependencies( ModelProblemCollector problems, Plugin plugin,\n+                                                      ModelBuildingRequest request )\n+    {\n+        List<Dependency> dependencies = plugin.getDependencies();\n+\n+        if ( !dependencies.isEmpty() )\n+        {\n+            String prefix = \"build.plugins.plugin[\" + plugin.getKey() + \"].dependencies.dependency.\";\n+\n+            Severity errOn30 = getSeverity( request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0 );\n+\n+            for ( Dependency d : dependencies )\n+            {\n+                validateEffectiveDependency( problems, d, false, prefix, request );\n+\n+                validateVersion( prefix + \"version\", problems, errOn30, d.getVersion(), d.getManagementKey() );\n+\n+                validateEnum( prefix + \"scope\", problems, errOn30, d.getScope(), d.getManagementKey(), \"compile\",\n+                              \"runtime\", \"system\" );\n+            }\n+        }\n+    }\n+\n+    private void validateEffectiveDependency( ModelProblemCollector problems, Dependency d, boolean management,\n+                                              String prefix, ModelBuildingRequest request )\n+    {\n+        validateId( prefix + \"artifactId\", problems, d.getArtifactId(), d.getManagementKey() );\n+\n+        validateId( prefix + \"groupId\", problems, d.getGroupId(), d.getManagementKey() );\n+\n+        if ( !management )\n+        {\n+            validateStringNotEmpty( prefix + \"type\", problems, Severity.ERROR, d.getType(), d.getManagementKey() );\n+\n+            validateStringNotEmpty( prefix + \"version\", problems, Severity.ERROR, d.getVersion(), d.getManagementKey() );\n+        }\n+\n+        if ( \"system\".equals( d.getScope() ) )\n+        {\n+            String systemPath = d.getSystemPath();\n+\n+            if ( StringUtils.isEmpty( systemPath ) )\n+            {\n+                addViolation( problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"is missing.\" );\n+            }\n+            else\n+            {\n+                File sysFile = new File( systemPath );\n+                if ( !sysFile.isAbsolute() )\n+                {\n+                    addViolation( problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(),\n+                                  \"must specify an absolute path but is \" + systemPath );\n+                }\n+                else if ( !sysFile.isFile() )\n+                {\n+                    String msg = \"refers to a non-existing file \" + sysFile.getAbsolutePath();\n+                    systemPath = systemPath.replace( '/', File.separatorChar ).replace( '\\\\', File.separatorChar );\n+                    String jdkHome =\n+                        request.getSystemProperties().getProperty( \"java.home\", \"\" ) + File.separator + \"..\";\n+                    if ( systemPath.startsWith( jdkHome ) )\n+                    {\n+                        msg += \". Please verify that you run Maven using a JDK and not just a JRE.\";\n+                    }\n+                    addViolation( problems, Severity.WARNING, prefix + \"systemPath\", d.getManagementKey(), msg );\n+                }\n+            }\n+        }\n+        else if ( StringUtils.isNotEmpty( d.getSystemPath() ) )\n+        {\n+            addViolation( problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must be omitted.\"\n+                + \" This field may only be specified for a dependency with system scope.\" );\n+        }\n+    }\n+\n     private void validateRepositories( ModelProblemCollector problems, List<Repository> repositories, String prefix,\n                                        ModelBuildingRequest request )\n     {\n", "project": "maven", "linesAdd": 79, "nb_skipped": 0, "fix_commit": "83389c34", "nb_failure": 4, "id": "4648", "linesRem": 56}