{
  "files": 1, 
  "singleLine": false, 
  "nb_error": 0, 
  "failing_tests": [
    "org.apache.maven.artifact.versioning.DefaultArtifactVersionTest#testNonNumericVersionRepresentationReturnsANumberFormatException AssertionFailedError"
  ], 
  "nb_test": 22, 
  "patch": "diff --git a/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java b/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java\nindex 745afdd..6a6ab74 100644\n--- a/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java\n+++ b/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java\n@@ -21,6 +21,7 @@\n \n import java.util.StringTokenizer;\n import java.util.regex.Pattern;\n+import java.util.NoSuchElementException;\n \n /**\n  * Default implementation of artifact versioning.\n@@ -204,12 +205,18 @@ public final void parseVersion( String version )\n \n     private static Integer getNextIntegerToken( StringTokenizer tok )\n     {\n-        String s = tok.nextToken();\n-        if ( ( s.length() > 1 ) && s.startsWith( \"0\" ) )\n+        try {\n+            String s = tok.nextToken();\n+            if ( ( s.length() > 1 ) && s.startsWith( \"0\" ) )\n+            {\n+                throw new NumberFormatException( \"Number part has a leading 0: '\" + s + \"'\" );\n+            }\n+            return Integer.valueOf( s );\n+        } \n+        catch( NoSuchElementException e )\n         {\n-            throw new NumberFormatException( \"Number part has a leading 0: '\" + s + \"'\" );\n+            throw new NumberFormatException( \"Number is invalid\" );\n         }\n-        return Integer.valueOf( s );\n     }\n \n     @Override\n", 
  "project": "maven", 
  "linesAdd": 11, 
  "nb_skipped": 0, 
  "fix_commit": "af1ecd5f", 
  "nb_failure": 1, 
  "id": "5645", 
  "linesRem": 4
}