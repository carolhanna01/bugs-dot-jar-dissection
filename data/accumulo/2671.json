{
  "files": 1, 
  "singleLine": false, 
  "nb_error": 1, 
  "failing_tests": [
    "BlockedIOStreamTest.testGiantWrite \u00bb StackOverflow"
  ], 
  "nb_test": 634, 
  "patch": "diff --git a/core/src/main/java/org/apache/accumulo/core/security/crypto/BlockedOutputStream.java b/core/src/main/java/org/apache/accumulo/core/security/crypto/BlockedOutputStream.java\nindex ca72055..3ce648e 100644\n--- a/core/src/main/java/org/apache/accumulo/core/security/crypto/BlockedOutputStream.java\n+++ b/core/src/main/java/org/apache/accumulo/core/security/crypto/BlockedOutputStream.java\n@@ -72,15 +72,18 @@ public class BlockedOutputStream extends OutputStream {\n \n   @Override\n   public void write(byte b[], int off, int len) throws IOException {\n-    if (bb.remaining() >= len) {\n-      bb.put(b, off, len);\n-      if (bb.remaining() == 0)\n-        flush();\n-    } else {\n+    // Can't recurse here in case the len is large and the blocksize is small (and the stack is small)\n+    // So we'll just fill up the buffer over and over\n+    while (len >= bb.remaining()) {\n       int remaining = bb.remaining();\n-      write(b, off, remaining);\n-      write(b, off + remaining, len - remaining);\n+      bb.put(b, off, remaining);\n+      // This is guaranteed to have the buffer filled, so we'll just flush it. No check needed\n+      flush();\n+      off += remaining;\n+      len -= remaining;\n     }\n+    // And then write the remainder (and this is guaranteed to not fill the buffer, so we won't flush afteward\n+    bb.put(b, off, len);\n   }\n \n   @Override\n", 
  "project": "accumulo", 
  "linesAdd": 10, 
  "nb_skipped": 1, 
  "fix_commit": "17344890", 
  "nb_failure": 0, 
  "id": "2671", 
  "linesRem": 7
}