{"nb_failure": 2, "nb_error": 0, "failing_tests": ["testDefaultEquality(org.apache.accumulo.core.client.BatchWriterConfigTest): expected:<org.apache.accumulo.core.client.BatchWriterConfig@37073255> but was:<org.apache.accumulo.core.client.BatchWriterConfig@397986ac>", "testManualEquality(org.apache.accumulo.core.client.BatchWriterConfigTest): expected:<org.apache.accumulo.core.client.BatchWriterConfig@38981d47> but was:<org.apache.accumulo.core.client.BatchWriterConfig@aaa3d58>"], "patch": "diff --git a/core/src/main/java/org/apache/accumulo/core/client/BatchWriterConfig.java b/core/src/main/java/org/apache/accumulo/core/client/BatchWriterConfig.java\nindex d3ad3fe..28955f5 100644\n--- a/core/src/main/java/org/apache/accumulo/core/client/BatchWriterConfig.java\n+++ b/core/src/main/java/org/apache/accumulo/core/client/BatchWriterConfig.java\n@@ -24,6 +24,7 @@ import java.util.ArrayList;\n import java.util.List;\n import java.util.concurrent.TimeUnit;\n \n+import org.apache.commons.lang.builder.HashCodeBuilder;\n import org.apache.hadoop.io.Writable;\n import org.apache.hadoop.util.StringUtils;\n \n@@ -33,19 +34,19 @@ import org.apache.hadoop.util.StringUtils;\n  * @since 1.5.0\n  */\n public class BatchWriterConfig implements Writable {\n-  \n+\n   private static final Long DEFAULT_MAX_MEMORY = 50 * 1024 * 1024l;\n   private Long maxMemory = null;\n-  \n+\n   private static final Long DEFAULT_MAX_LATENCY = 2 * 60 * 1000l;\n   private Long maxLatency = null;\n-  \n+\n   private static final Long DEFAULT_TIMEOUT = Long.MAX_VALUE;\n   private Long timeout = null;\n-  \n+\n   private static final Integer DEFAULT_MAX_WRITE_THREADS = 3;\n   private Integer maxWriteThreads = null;\n-  \n+\n   /**\n    * Sets the maximum memory to batch before writing. The smaller this value, the more frequently the {@link BatchWriter} will write.<br />\n    * If set to a value smaller than a single mutation, then it will {@link BatchWriter#flush()} after each added mutation. Must be non-negative.\n@@ -65,7 +66,7 @@ public class BatchWriterConfig implements Writable {\n     this.maxMemory = maxMemory;\n     return this;\n   }\n-  \n+\n   /**\n    * Sets the maximum amount of time to hold the data in memory before flushing it to servers.<br />\n    * For no maximum, set to zero, or {@link Long#MAX_VALUE} with {@link TimeUnit#MILLISECONDS}.\n@@ -89,7 +90,7 @@ public class BatchWriterConfig implements Writable {\n   public BatchWriterConfig setMaxLatency(long maxLatency, TimeUnit timeUnit) {\n     if (maxLatency < 0)\n       throw new IllegalArgumentException(\"Negative max latency not allowed \" + maxLatency);\n-    \n+\n     if (maxLatency == 0)\n       this.maxLatency = Long.MAX_VALUE;\n     else\n@@ -97,7 +98,7 @@ public class BatchWriterConfig implements Writable {\n       this.maxLatency = Math.max(1, timeUnit.toMillis(maxLatency));\n     return this;\n   }\n-  \n+\n   /**\n    * Sets the maximum amount of time an unresponsive server will be re-tried. When this timeout is exceeded, the {@link BatchWriter} should throw an exception.<br />\n    * For no timeout, set to zero, or {@link Long#MAX_VALUE} with {@link TimeUnit#MILLISECONDS}.\n@@ -121,7 +122,7 @@ public class BatchWriterConfig implements Writable {\n   public BatchWriterConfig setTimeout(long timeout, TimeUnit timeUnit) {\n     if (timeout < 0)\n       throw new IllegalArgumentException(\"Negative timeout not allowed \" + timeout);\n-    \n+\n     if (timeout == 0)\n       this.timeout = Long.MAX_VALUE;\n     else\n@@ -129,7 +130,7 @@ public class BatchWriterConfig implements Writable {\n       this.timeout = Math.max(1, timeUnit.toMillis(timeout));\n     return this;\n   }\n-  \n+\n   /**\n    * Sets the maximum number of threads to use for writing data to the tablet servers.\n    * \n@@ -145,27 +146,27 @@ public class BatchWriterConfig implements Writable {\n   public BatchWriterConfig setMaxWriteThreads(int maxWriteThreads) {\n     if (maxWriteThreads <= 0)\n       throw new IllegalArgumentException(\"Max threads must be positive \" + maxWriteThreads);\n-    \n+\n     this.maxWriteThreads = maxWriteThreads;\n     return this;\n   }\n-  \n+\n   public long getMaxMemory() {\n     return maxMemory != null ? maxMemory : DEFAULT_MAX_MEMORY;\n   }\n-  \n+\n   public long getMaxLatency(TimeUnit timeUnit) {\n     return timeUnit.convert(maxLatency != null ? maxLatency : DEFAULT_MAX_LATENCY, TimeUnit.MILLISECONDS);\n   }\n-  \n+\n   public long getTimeout(TimeUnit timeUnit) {\n     return timeUnit.convert(timeout != null ? timeout : DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS);\n   }\n-  \n+\n   public int getMaxWriteThreads() {\n     return maxWriteThreads != null ? maxWriteThreads : DEFAULT_MAX_WRITE_THREADS;\n   }\n-  \n+\n   @Override\n   public void write(DataOutput out) throws IOException {\n     // write this out in a human-readable way\n@@ -179,7 +180,7 @@ public class BatchWriterConfig implements Writable {\n     if (timeout != null)\n       addField(fields, \"timeout\", timeout);\n     String output = StringUtils.join(\",\", fields);\n-    \n+\n     byte[] bytes = output.getBytes(Charset.forName(\"UTF-8\"));\n     byte[] len = String.format(\"%6s#\", Integer.toString(bytes.length, 36)).getBytes(\"UTF-8\");\n     if (len.length != 7)\n@@ -187,13 +188,13 @@ public class BatchWriterConfig implements Writable {\n     out.write(len);\n     out.write(bytes);\n   }\n-  \n+\n   private void addField(List<String> fields, String name, Object value) {\n     String key = StringUtils.escapeString(name, '\\\\', new char[] {',', '='});\n     String val = StringUtils.escapeString(String.valueOf(value), '\\\\', new char[] {',', '='});\n     fields.add(key + '=' + val);\n   }\n-  \n+\n   @Override\n   public void readFields(DataInput in) throws IOException {\n     byte[] len = new byte[7];\n@@ -203,7 +204,7 @@ public class BatchWriterConfig implements Writable {\n       throw new IllegalStateException(\"length was not encoded correctly\");\n     byte[] bytes = new byte[Integer.parseInt(strLen.substring(strLen.lastIndexOf(' ') + 1, strLen.length() - 1), 36)];\n     in.readFully(bytes);\n-    \n+\n     String strFields = new String(bytes, Charset.forName(\"UTF-8\"));\n     String[] fields = StringUtils.split(strFields, '\\\\', ',');\n     for (String field : fields) {\n@@ -223,4 +224,70 @@ public class BatchWriterConfig implements Writable {\n       }\n     }\n   }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (o instanceof BatchWriterConfig) {\n+      BatchWriterConfig other = (BatchWriterConfig) o;\n+\n+      if (null != maxMemory) {\n+        if (!maxMemory.equals(other.maxMemory)) {\n+          return false;\n+        }\n+      } else {\n+        if (null != other.maxMemory) {\n+          return false;\n+        }\n+      }\n+\n+      if (null != maxLatency) {\n+        if (!maxLatency.equals(other.maxLatency)) {\n+          return false;\n+        }\n+      } else {\n+        if (null != other.maxLatency) {\n+          return false;\n+        }\n+      }\n+\n+      if (null != maxWriteThreads) {\n+        if (!maxWriteThreads.equals(other.maxWriteThreads)) {\n+          return false;\n+        }\n+      } else {\n+        if (null != other.maxWriteThreads) {\n+          return false;\n+        }\n+      }\n+\n+      if (null != timeout) {\n+        if (!timeout.equals(other.timeout)) {\n+          return false;\n+        }\n+      } else {\n+        if (null != other.timeout) {\n+          return false;\n+        }\n+      }\n+\n+      return true;\n+    }\n+\n+    return false;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    HashCodeBuilder hcb = new HashCodeBuilder();\n+    hcb.append(maxMemory).append(maxLatency).append(maxWriteThreads).append(timeout);\n+    return hcb.toHashCode();\n+  }\n+\n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder(32);\n+    sb.append(\"[maxMemory=\").append(getMaxMemory()).append(\", maxLatency=\").append(getMaxLatency(TimeUnit.MILLISECONDS)).append(\", maxWriteThreads=\")\n+        .append(getMaxWriteThreads()).append(\", timeout=\").append(getTimeout(TimeUnit.MILLISECONDS)).append(\"]\");\n+    return sb.toString();\n+  }\n }\n", "nb_test": 415, "nb_skipped": 0, "fix_commit": "f99b5654", "id": "2928"}