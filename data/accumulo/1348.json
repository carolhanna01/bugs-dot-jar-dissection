{"nb_failure": 1, "nb_error": 0, "failing_tests": ["execFileTest(org.apache.accumulo.core.util.shell.ShellTest): Unknown command present in Unknown command \"foo\".  Enter \"help\" for a list possible commands.(..)"], "patch": "diff --git a/core/src/main/java/org/apache/accumulo/core/client/mock/MockShell.java b/core/src/main/java/org/apache/accumulo/core/client/mock/MockShell.java\nindex 1a3c518..4469d5c 100644\n--- a/core/src/main/java/org/apache/accumulo/core/client/mock/MockShell.java\n+++ b/core/src/main/java/org/apache/accumulo/core/client/mock/MockShell.java\n@@ -78,8 +78,13 @@ public class MockShell extends Shell {\n     \n     if (execFile != null) {\n       java.util.Scanner scanner = new java.util.Scanner(new File(execFile));\n-      while (scanner.hasNextLine())\n-        execCommand(scanner.nextLine(), true, isVerbose());\n+      try {\n+        while (scanner.hasNextLine() && !hasExited()) {\n+          execCommand(scanner.nextLine(), true, isVerbose());\n+        }\n+      } finally {\n+        scanner.close();\n+      }\n     } else if (execCommand != null) {\n       for (String command : execCommand.split(\"\\n\")) {\n         execCommand(command, true, isVerbose());\ndiff --git a/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java b/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java\nindex ab08c32..75f7bd0 100644\n--- a/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java\n+++ b/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java\n@@ -250,7 +250,7 @@ public class Shell extends ShellOptions {\n     if (sysUser == null)\n       sysUser = \"root\";\n     String user = cl.getOptionValue(usernameOption.getOpt(), sysUser);\n-\n+    \n     String passw = cl.getOptionValue(passwOption.getOpt(), null);\n     tabCompletion = !cl.hasOption(tabCompleteOption.getLongOpt());\n     String[] loginOptions = cl.getOptionValues(loginOption.getOpt());\n@@ -265,13 +265,13 @@ public class Shell extends ShellOptions {\n       \n       if (loginOptions == null && cl.hasOption(tokenOption.getOpt()))\n         throw new IllegalArgumentException(\"Must supply '-\" + loginOption.getOpt() + \"' option with '-\" + tokenOption.getOpt() + \"' option\");\n-\n+      \n       if (passw != null && cl.hasOption(tokenOption.getOpt()))\n         throw new IllegalArgumentException(\"Can not supply '-\" + passwOption.getOpt() + \"' option with '-\" + tokenOption.getOpt() + \"' option\");\n-\n+      \n       if (user == null)\n         throw new MissingArgumentException(usernameOption);\n-\n+      \n       if (loginOptions != null && cl.hasOption(tokenOption.getOpt())) {\n         Properties props = new Properties();\n         for (String loginOption : loginOptions)\n@@ -283,7 +283,7 @@ public class Shell extends ShellOptions {\n         this.token = Class.forName(cl.getOptionValue(tokenOption.getOpt())).asSubclass(AuthenticationToken.class).newInstance();\n         this.token.init(props);\n       }\n-\n+      \n       if (!cl.hasOption(fakeOption.getLongOpt())) {\n         DistributedTrace.enable(instance, new ZooReader(instance.getZooKeepers(), instance.getZooKeepersSessionTimeOut()), \"shell\", InetAddress.getLocalHost()\n             .getHostName());\n@@ -447,8 +447,9 @@ public class Shell extends ShellOptions {\n     if (execFile != null) {\n       java.util.Scanner scanner = new java.util.Scanner(new File(execFile));\n       try {\n-        while (scanner.hasNextLine())\n+        while (scanner.hasNextLine() && !hasExited()) {\n           execCommand(scanner.nextLine(), true, isVerbose());\n+        }\n       } finally {\n         scanner.close();\n       }\n", "nb_test": 367, "nb_skipped": 0, "fix_commit": "6ff92b12)", "id": "1348"}