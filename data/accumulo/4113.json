{
  "files": 3, 
  "singleLine": false, 
  "nb_error": 1, 
  "failing_tests": [
    "ByteBufferUtilTest.testNonZeroArrayOffset:62->assertEquals:34 expected:<3456> but was:<0123>", 
    "ByteBufferUtilTest.testDirectByteBuffer:92->assertEquals:34 \u00bb UnsupportedOperation"
  ], 
  "nb_test": 715, 
  "patch": "diff --git a/core/src/main/java/org/apache/accumulo/core/data/ArrayByteSequence.java b/core/src/main/java/org/apache/accumulo/core/data/ArrayByteSequence.java\nindex d9ddc67..d040139 100644\n--- a/core/src/main/java/org/apache/accumulo/core/data/ArrayByteSequence.java\n+++ b/core/src/main/java/org/apache/accumulo/core/data/ArrayByteSequence.java\n@@ -21,6 +21,8 @@ import static com.google.common.base.Charsets.UTF_8;\n import java.io.Serializable;\n import java.nio.ByteBuffer;\n \n+import org.apache.accumulo.core.util.ByteBufferUtil;\n+\n public class ArrayByteSequence extends ByteSequence implements Serializable {\n \n   private static final long serialVersionUID = 1L;\n@@ -52,15 +54,14 @@ public class ArrayByteSequence extends ByteSequence implements Serializable {\n   }\n \n   public ArrayByteSequence(ByteBuffer buffer) {\n-    this.length = buffer.remaining();\n-\n     if (buffer.hasArray()) {\n       this.data = buffer.array();\n-      this.offset = buffer.position();\n+      this.offset = buffer.position() + buffer.arrayOffset();\n+      this.length = buffer.remaining();\n     } else {\n-      this.data = new byte[length];\n       this.offset = 0;\n-      buffer.get(data);\n+      this.data = ByteBufferUtil.toBytes(buffer);\n+      this.length = data.length;\n     }\n   }\n \n@@ -118,6 +119,7 @@ public class ArrayByteSequence extends ByteSequence implements Serializable {\n     return copy;\n   }\n \n+  @Override\n   public String toString() {\n     return new String(data, offset, length, UTF_8);\n   }\ndiff --git a/core/src/main/java/org/apache/accumulo/core/util/ByteBufferUtil.java b/core/src/main/java/org/apache/accumulo/core/util/ByteBufferUtil.java\nindex be5cddf..cdde05c 100644\n--- a/core/src/main/java/org/apache/accumulo/core/util/ByteBufferUtil.java\n+++ b/core/src/main/java/org/apache/accumulo/core/util/ByteBufferUtil.java\n@@ -31,7 +31,15 @@ public class ByteBufferUtil {\n   public static byte[] toBytes(ByteBuffer buffer) {\n     if (buffer == null)\n       return null;\n-    return Arrays.copyOfRange(buffer.array(), buffer.position(), buffer.limit());\n+    if (buffer.hasArray()) {\n+      // did not use buffer.get() because it changes the position\n+      return Arrays.copyOfRange(buffer.array(), buffer.position() + buffer.arrayOffset(), buffer.limit() + buffer.arrayOffset());\n+    } else {\n+      byte[] data = new byte[buffer.remaining()];\n+      // duplicate inorder to avoid changing position\n+      buffer.duplicate().get(data);\n+      return data;\n+    }\n   }\n \n   public static List<ByteBuffer> toByteBuffers(Collection<byte[]> bytesList) {\n@@ -47,23 +55,32 @@ public class ByteBufferUtil {\n   public static List<byte[]> toBytesList(Collection<ByteBuffer> bytesList) {\n     if (bytesList == null)\n       return null;\n-    ArrayList<byte[]> result = new ArrayList<byte[]>();\n+    ArrayList<byte[]> result = new ArrayList<byte[]>(bytesList.size());\n     for (ByteBuffer bytes : bytesList) {\n       result.add(toBytes(bytes));\n     }\n     return result;\n   }\n \n-  public static Text toText(ByteBuffer bytes) {\n-    if (bytes == null)\n+  public static Text toText(ByteBuffer byteBuffer) {\n+    if (byteBuffer == null)\n       return null;\n-    Text result = new Text();\n-    result.set(bytes.array(), bytes.position(), bytes.remaining());\n-    return result;\n+\n+    if (byteBuffer.hasArray()) {\n+      Text result = new Text();\n+      result.set(byteBuffer.array(), byteBuffer.arrayOffset() + byteBuffer.position(), byteBuffer.remaining());\n+      return result;\n+    } else {\n+      return new Text(toBytes(byteBuffer));\n+    }\n   }\n \n   public static String toString(ByteBuffer bytes) {\n-    return new String(bytes.array(), bytes.position(), bytes.remaining(), UTF_8);\n+    if (bytes.hasArray()) {\n+      return new String(bytes.array(), bytes.arrayOffset() + bytes.position(), bytes.remaining(), UTF_8);\n+    } else {\n+      return new String(toBytes(bytes), UTF_8);\n+    }\n   }\n \n   public static ByteBuffer toByteBuffers(ByteSequence bs) {\n@@ -73,7 +90,6 @@ public class ByteBufferUtil {\n     if (bs.isBackedByArray()) {\n       return ByteBuffer.wrap(bs.getBackingArray(), bs.offset(), bs.length());\n     } else {\n-      // TODO create more efficient impl\n       return ByteBuffer.wrap(bs.toArray());\n     }\n   }\ndiff --git a/core/src/main/java/org/apache/accumulo/core/util/UnsynchronizedBuffer.java b/core/src/main/java/org/apache/accumulo/core/util/UnsynchronizedBuffer.java\nindex f353613..b776553 100644\n--- a/core/src/main/java/org/apache/accumulo/core/util/UnsynchronizedBuffer.java\n+++ b/core/src/main/java/org/apache/accumulo/core/util/UnsynchronizedBuffer.java\n@@ -122,8 +122,8 @@ public class UnsynchronizedBuffer {\n         offset = buffer.arrayOffset() + buffer.position();\n         data = buffer.array();\n       } else {\n-        data = new byte[buffer.remaining()];\n-        buffer.get(data);\n+        offset = 0;\n+        data = ByteBufferUtil.toBytes(buffer);\n       }\n     }\n \n", 
  "project": "accumulo", 
  "linesAdd": 34, 
  "nb_skipped": 2, 
  "fix_commit": "27300d81", 
  "nb_failure": 1, 
  "id": "4113", 
  "linesRem": 16
}