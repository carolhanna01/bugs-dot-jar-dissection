{
  "files": 1, 
  "singleLine": false, 
  "nb_error": 0, 
  "failing_tests": [
    "HistoryCommandTest.testCorrectNumbering:76 null"
  ], 
  "nb_test": 640, 
  "patch": "diff --git a/core/src/main/java/org/apache/accumulo/core/util/shell/commands/HistoryCommand.java b/core/src/main/java/org/apache/accumulo/core/util/shell/commands/HistoryCommand.java\nindex 9531d90..d6068ba 100644\n--- a/core/src/main/java/org/apache/accumulo/core/util/shell/commands/HistoryCommand.java\n+++ b/core/src/main/java/org/apache/accumulo/core/util/shell/commands/HistoryCommand.java\n@@ -18,7 +18,6 @@ package org.apache.accumulo.core.util.shell.commands;\n \n import java.io.IOException;\n import java.util.Iterator;\n-import java.util.ListIterator;\n \n import jline.console.history.History.Entry;\n \n@@ -27,39 +26,33 @@ import org.apache.accumulo.core.util.shell.Shell.Command;\n import org.apache.commons.cli.CommandLine;\n import org.apache.commons.cli.Option;\n import org.apache.commons.cli.Options;\n-import org.apache.commons.collections.iterators.AbstractIteratorDecorator;\n+\n+import com.google.common.base.Function;\n+import com.google.common.collect.Iterators;\n \n public class HistoryCommand extends Command {\n   private Option clearHist;\n   private Option disablePaginationOpt;\n   \n-  @SuppressWarnings(\"unchecked\")\n   @Override\n   public int execute(final String fullCommand, final CommandLine cl, final Shell shellState) throws IOException {\n     if (cl.hasOption(clearHist.getOpt())) {\n       shellState.getReader().getHistory().clear();\n     } else {\n-      ListIterator<Entry> it = shellState.getReader().getHistory().entries();\n-      shellState.printLines(new HistoryLineIterator(it), !cl.hasOption(disablePaginationOpt.getOpt()));\n+      Iterator<Entry> source = shellState.getReader().getHistory().entries();\n+      Iterator<String> historyIterator = Iterators.transform(source, new Function<Entry,String>() {\n+        @Override\n+        public String apply(Entry input) {\n+          return String.format(\"%d: %s\", input.index() + 1, input.value());\n+        }\n+      });\n+\n+      shellState.printLines(historyIterator, !cl.hasOption(disablePaginationOpt.getOpt()));\n     }\n     \n     return 0;\n   }\n   \n-  /**\n-   * Decorator that converts an Iterator<History.Entry> to an Iterator<String>.\n-   */\n-  private static class HistoryLineIterator extends AbstractIteratorDecorator {\n-    public HistoryLineIterator(Iterator<Entry> iterator) {\n-      super(iterator);\n-    }\n-    \n-    @Override\n-    public String next() {\n-      return super.next().toString();\n-    }\n-  }\n-  \n   @Override\n   public String description() {\n     return (\"generates a list of commands previously executed\");\n", 
  "project": "accumulo", 
  "linesAdd": 12, 
  "nb_skipped": 1, 
  "fix_commit": "1f7dd2d5", 
  "nb_failure": 1, 
  "id": "2742", 
  "linesRem": 19
}