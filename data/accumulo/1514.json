{"nb_failure": 5, "nb_error": 0, "failing_tests": ["testPostDelegation(org.apache.accumulo.start.classloader.vfs.ContextManagerTest)", "differentContexts(org.apache.accumulo.start.classloader.vfs.ContextManagerTest): arrays first differed at element [0]; expected:<jar:file:///home/ylyu/parallel/accumulo/accumulo9/dataset/accumulo/ACCUMULO-1514_fb25913c5b9d1d9615dd32807b6583c558794e49/start/target/junit4545360540553368377/HelloWorld.jar!/> but was:<file:///home/ylyu/parallel/accumulo/accumulo9/dataset/accumulo/ACCUMULO-1514_fb25913c5b9d1d9615dd32807b6583c558794e49/start/target/junit4545360540553368377>", "testModifiedClass(org.apache.accumulo.start.classloader.vfs.AccumuloReloadingVFSClassLoaderTest): arrays first differed at element [0]; expected:<jar:file:///home/ylyu/parallel/accumulo/accumulo9/dataset/accumulo/ACCUMULO-1514_fb25913c5b9d1d9615dd32807b6583c558794e49/start/target/junit6214954286572045794/HelloWorld.jar!/> but was:<file:///home/ylyu/parallel/accumulo/accumulo9/dataset/accumulo/ACCUMULO-1514_fb25913c5b9d1d9615dd32807b6583c558794e49/start/target/junit6214954286572045794>", "testReloading(org.apache.accumulo.start.classloader.vfs.AccumuloReloadingVFSClassLoaderTest): arrays first differed at element [0]; expected:<jar:file:///home/ylyu/parallel/accumulo/accumulo9/dataset/accumulo/ACCUMULO-1514_fb25913c5b9d1d9615dd32807b6583c558794e49/start/target/junit3469370927152443111/HelloWorld.jar!/> but was:<file:///home/ylyu/parallel/accumulo/accumulo9/dataset/accumulo/ACCUMULO-1514_fb25913c5b9d1d9615dd32807b6583c558794e49/start/target/junit3469370927152443111>", "testConstructor(org.apache.accumulo.start.classloader.vfs.AccumuloReloadingVFSClassLoaderTest): arrays first differed at element [0]; expected:<jar:file:///home/ylyu/parallel/accumulo/accumulo9/dataset/accumulo/ACCUMULO-1514_fb25913c5b9d1d9615dd32807b6583c558794e49/start/target/junit4175051648314321909/HelloWorld.jar!/> but was:<file:///home/ylyu/parallel/accumulo/accumulo9/dataset/accumulo/ACCUMULO-1514_fb25913c5b9d1d9615dd32807b6583c558794e49/start/target/junit4175051648314321909>"], "patch": "diff --git a/start/src/main/java/org/apache/accumulo/start/classloader/vfs/AccumuloVFSClassLoader.java b/start/src/main/java/org/apache/accumulo/start/classloader/vfs/AccumuloVFSClassLoader.java\nindex b1e829a..eb653bc 100644\n--- a/start/src/main/java/org/apache/accumulo/start/classloader/vfs/AccumuloVFSClassLoader.java\n+++ b/start/src/main/java/org/apache/accumulo/start/classloader/vfs/AccumuloVFSClassLoader.java\n@@ -58,9 +58,9 @@ import org.apache.log4j.Logger;\n  * \n  */\n public class AccumuloVFSClassLoader {\n-\n+  \n   public static class AccumuloVFSClassLoaderShutdownThread implements Runnable {\n-\n+    \n     public void run() {\n       try {\n         AccumuloVFSClassLoader.close();\n@@ -68,35 +68,35 @@ public class AccumuloVFSClassLoader {\n         // do nothing, we are shutting down anyway\n       }\n     }\n-\n+    \n   }\n-\n+  \n   private static List<WeakReference<DefaultFileSystemManager>> vfsInstances = Collections\n       .synchronizedList(new ArrayList<WeakReference<DefaultFileSystemManager>>());\n-\n+  \n   public static final String DYNAMIC_CLASSPATH_PROPERTY_NAME = \"general.dynamic.classpaths\";\n-\n+  \n   public static final String DEFAULT_DYNAMIC_CLASSPATH_VALUE = \"$ACCUMULO_HOME/lib/ext/[^.].*.jar\\n\";\n-\n+  \n   public static final String VFS_CLASSLOADER_SYSTEM_CLASSPATH_PROPERTY = \"general.vfs.classpaths\";\n-\n+  \n   public static final String VFS_CONTEXT_CLASSPATH_PROPERTY = \"general.vfs.context.classpath.\";\n-\n+  \n   public static final String VFS_CACHE_DIR = \"general.vfs.cache.dir\";\n-\n+  \n   private static ClassLoader parent = null;\n   private static volatile ReloadingClassLoader loader = null;\n   private static final Object lock = new Object();\n-\n+  \n   private static ContextManager contextManager;\n-\n+  \n   private static Logger log = Logger.getLogger(AccumuloVFSClassLoader.class);\n-\n+  \n   static {\n     // Register the shutdown hook\n     Runtime.getRuntime().addShutdownHook(new Thread(new AccumuloVFSClassLoaderShutdownThread()));\n   }\n-\n+  \n   public synchronized static <U> Class<? extends U> loadClass(String classname, Class<U> extension) throws ClassNotFoundException {\n     try {\n       return (Class<? extends U>) getClassLoader().loadClass(classname).asSubclass(extension);\n@@ -104,40 +104,45 @@ public class AccumuloVFSClassLoader {\n       throw new ClassNotFoundException(\"IO Error loading class \" + classname, e);\n     }\n   }\n-\n+  \n   public static Class<?> loadClass(String classname) throws ClassNotFoundException {\n     return loadClass(classname, Object.class).asSubclass(Object.class);\n   }\n-\n+  \n   static FileObject[] resolve(FileSystemManager vfs, String uris) throws FileSystemException {\n     return resolve(vfs, uris, new ArrayList<FileObject>());\n   }\n-\n+  \n   static FileObject[] resolve(FileSystemManager vfs, String uris, ArrayList<FileObject> pathsToMonitor) throws FileSystemException {\n     if (uris == null)\n       return new FileObject[0];\n-\n+    \n     ArrayList<FileObject> classpath = new ArrayList<FileObject>();\n-\n+    \n     pathsToMonitor.clear();\n-\n+    \n     for (String path : uris.split(\",\")) {\n-\n+      \n       path = path.trim();\n-\n+      \n       if (path.equals(\"\"))\n         continue;\n-\n+      \n       path = AccumuloClassLoader.replaceEnvVars(path, System.getenv());\n-\n+      \n       FileObject fo = vfs.resolveFile(path);\n-\n+      \n       switch (fo.getType()) {\n         case FILE:\n-        case FOLDER:\n           classpath.add(fo);\n           pathsToMonitor.add(fo);\n           break;\n+        case FOLDER:\n+          pathsToMonitor.add(fo);\n+          for (FileObject child : fo.getChildren()) {\n+            classpath.add(child);\n+          }\n+          break;\n         case IMAGINARY:\n           // assume its a pattern\n           String pattern = fo.getName().getBaseName();\n@@ -157,67 +162,67 @@ public class AccumuloVFSClassLoader {\n           log.warn(\"ignoring classpath entry \" + fo);\n           break;\n       }\n-\n+      \n     }\n-\n+    \n     return classpath.toArray(new FileObject[classpath.size()]);\n   }\n-\n+  \n   private static ReloadingClassLoader createDynamicClassloader(final ClassLoader parent) throws FileSystemException, IOException {\n     String dynamicCPath = AccumuloClassLoader.getAccumuloString(DYNAMIC_CLASSPATH_PROPERTY_NAME, DEFAULT_DYNAMIC_CLASSPATH_VALUE);\n-\n+    \n     String envJars = System.getenv(\"ACCUMULO_XTRAJARS\");\n     if (null != envJars && !envJars.equals(\"\"))\n       if (dynamicCPath != null && !dynamicCPath.equals(\"\"))\n         dynamicCPath = dynamicCPath + \",\" + envJars;\n       else\n         dynamicCPath = envJars;\n-\n+    \n     ReloadingClassLoader wrapper = new ReloadingClassLoader() {\n       @Override\n       public ClassLoader getClassLoader() {\n         return parent;\n       }\n     };\n-\n+    \n     if (dynamicCPath == null || dynamicCPath.equals(\"\"))\n       return wrapper;\n-\n+    \n     // TODO monitor time for lib/ext was 1 sec... should this be configurable? - ACCUMULO-1301\n     return new AccumuloReloadingVFSClassLoader(dynamicCPath, generateVfs(), wrapper, 1000, true);\n   }\n-\n+  \n   public static ClassLoader getClassLoader() throws IOException {\n     ReloadingClassLoader localLoader = loader;\n     while (null == localLoader) {\n       synchronized (lock) {\n         if (null == loader) {\n-\n+          \n           FileSystemManager vfs = generateVfs();\n-\n+          \n           // Set up the 2nd tier class loader\n           if (null == parent) {\n             parent = AccumuloClassLoader.getClassLoader();\n           }\n-\n+          \n           FileObject[] vfsCP = resolve(vfs, AccumuloClassLoader.getAccumuloString(VFS_CLASSLOADER_SYSTEM_CLASSPATH_PROPERTY, \"\"));\n-\n+          \n           if (vfsCP.length == 0) {\n             localLoader = createDynamicClassloader(parent);\n             loader = localLoader;\n             return localLoader.getClassLoader();\n           }\n-\n+          \n           // Create the Accumulo Context ClassLoader using the DEFAULT_CONTEXT\n           localLoader = createDynamicClassloader(new VFSClassLoader(vfsCP, vfs, parent));\n           loader = localLoader;\n         }\n       }\n     }\n-\n+    \n     return localLoader.getClassLoader();\n   }\n-\n+  \n   public static FileSystemManager generateVfs() throws FileSystemException {\n     DefaultFileSystemManager vfs = new FinalCloseDefaultFileSystemManager();\n     vfs.addProvider(\"res\", new org.apache.commons.vfs2.provider.res.ResourceFileProvider());\n@@ -263,11 +268,11 @@ public class AccumuloVFSClassLoader {\n     vfsInstances.add(new WeakReference<DefaultFileSystemManager>(vfs));\n     return vfs;\n   }\n-\n+  \n   public interface Printer {\n     void print(String s);\n   }\n-\n+  \n   public static void printClassPath() {\n     printClassPath(new Printer() {\n       @Override\n@@ -276,28 +281,28 @@ public class AccumuloVFSClassLoader {\n       }\n     });\n   }\n-\n+  \n   public static void printClassPath(Printer out) {\n     try {\n       ClassLoader cl = getClassLoader();\n       ArrayList<ClassLoader> classloaders = new ArrayList<ClassLoader>();\n-\n+      \n       while (cl != null) {\n         classloaders.add(cl);\n         cl = cl.getParent();\n       }\n-\n+      \n       Collections.reverse(classloaders);\n-\n+      \n       int level = 0;\n-\n+      \n       for (ClassLoader classLoader : classloaders) {\n         if (level > 0)\n           out.print(\"\");\n         level++;\n-\n+        \n         String classLoaderDescription;\n-\n+        \n         switch (level) {\n           case 1:\n             classLoaderDescription = level + \": Java System Classloader (loads Java system resources)\";\n@@ -316,16 +321,16 @@ public class AccumuloVFSClassLoader {\n                 + AccumuloVFSClassLoader.class.getName() + \")\";\n             break;\n         }\n-\n+        \n         if (classLoader instanceof URLClassLoader) {\n           // If VFS class loader enabled, but no contexts defined.\n           URLClassLoader ucl = (URLClassLoader) classLoader;\n           out.print(\"Level \" + classLoaderDescription + \" URL classpath items are:\");\n-\n+          \n           for (URL u : ucl.getURLs()) {\n             out.print(\"\\t\" + u.toExternalForm());\n           }\n-\n+          \n         } else if (classLoader instanceof VFSClassLoader) {\n           out.print(\"Level \" + classLoaderDescription + \" VFS classpaths items are:\");\n           VFSClassLoader vcl = (VFSClassLoader) classLoader;\n@@ -336,12 +341,12 @@ public class AccumuloVFSClassLoader {\n           out.print(\"Unknown classloader configuration \" + classLoader.getClass());\n         }\n       }\n-\n+      \n     } catch (Throwable t) {\n       throw new RuntimeException(t);\n     }\n   }\n-\n+  \n   public static synchronized ContextManager getContextManager() throws IOException {\n     if (contextManager == null) {\n       getClassLoader();\n@@ -356,10 +361,10 @@ public class AccumuloVFSClassLoader {\n         }\n       });\n     }\n-\n+    \n     return contextManager;\n   }\n-\n+  \n   public static void close() {\n     for (WeakReference<DefaultFileSystemManager> vfsInstance : vfsInstances) {\n       DefaultFileSystemManager ref = vfsInstance.get();\n", "nb_test": 30, "nb_skipped": 0, "fix_commit": "fb25913c", "id": "1514"}