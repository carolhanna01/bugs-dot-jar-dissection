{
  "project": "solr",
  "jira_id": "3430",
  "commit": "a027a355",
  "classification": {
    "singleLine": false
  },
  "patch": "diff --git a/lucene/src/java/org/apache/lucene/search/similarities/AfterEffectB.java b/lucene/src/java/org/apache/lucene/search/similarities/AfterEffectB.java\nindex b1f4320043..62d3bd6f50 100644\n--- a/lucene/src/java/org/apache/lucene/search/similarities/AfterEffectB.java\n+++ b/lucene/src/java/org/apache/lucene/search/similarities/AfterEffectB.java\n@@ -26,8 +26,8 @@ import org.apache.lucene.search.Explanation;\n public class AfterEffectB extends AfterEffect {\n   @Override\n   public final float score(BasicStats stats, float tfn) {\n-    long F = stats.getTotalTermFreq();\n-    int n = stats.getDocFreq();\n+    long F = stats.getTotalTermFreq()+1;\n+    int n = stats.getDocFreq()+1;\n     return (F + 1) / (n * (tfn + 1));\n   }\n   \ndiff --git a/lucene/src/java/org/apache/lucene/search/similarities/BasicModelBE.java b/lucene/src/java/org/apache/lucene/search/similarities/BasicModelBE.java\nindex 2ac9165d48..125147104a 100644\n--- a/lucene/src/java/org/apache/lucene/search/similarities/BasicModelBE.java\n+++ b/lucene/src/java/org/apache/lucene/search/similarities/BasicModelBE.java\n@@ -21,14 +21,14 @@ import static org.apache.lucene.search.similarities.SimilarityBase.log2;\n \n /**\n  * Limiting form of the Bose-Einstein model. The formula used in Lucene differs\n- * slightly from the one in the original paper: {@code F} is increased by {@code tfn}\n+ * slightly from the one in the original paper: {@code F} is increased by {@code tfn+1}\n  * and {@code N} is increased by {@code F} \n  * @lucene.experimental\n  */\n public class BasicModelBE extends BasicModel {\n   @Override\n   public final float score(BasicStats stats, float tfn) {\n-    double F = stats.getTotalTermFreq() + tfn;\n+    double F = stats.getTotalTermFreq() + 1 + tfn;\n     // approximation only holds true when F << N, so we use N += F\n     double N = F + stats.getNumberOfDocuments();\n     return (float)(-log2((N - 1) * Math.E)\ndiff --git a/lucene/src/java/org/apache/lucene/search/similarities/BasicModelD.java b/lucene/src/java/org/apache/lucene/search/similarities/BasicModelD.java\nindex 04b76a6504..b32356f152 100644\n--- a/lucene/src/java/org/apache/lucene/search/similarities/BasicModelD.java\n+++ b/lucene/src/java/org/apache/lucene/search/similarities/BasicModelD.java\n@@ -24,7 +24,7 @@ import static org.apache.lucene.search.similarities.SimilarityBase.log2;\n  * for DFR. The formula used in Lucene differs slightly from the one in the\n  * original paper: to avoid underflow for small values of {@code N} and\n  * {@code F}, {@code N} is increased by {@code 1} and\n- * {@code F} is always increased by {@code tfn}.\n+ * {@code F} is always increased by {@code tfn+1}.\n  * <p>\n  * WARNING: for terms that do not meet the expected random distribution\n  * (e.g. stopwords), this model may give poor performance, such as\n@@ -37,7 +37,7 @@ public class BasicModelD extends BasicModel {\n     // we have to ensure phi is always < 1 for tiny TTF values, otherwise nphi can go negative,\n     // resulting in NaN. cleanest way is to unconditionally always add tfn to totalTermFreq\n     // to create a 'normalized' F.\n-    double F = stats.getTotalTermFreq() + tfn;\n+    double F = stats.getTotalTermFreq() + 1 + tfn;\n     double phi = (double)tfn / F;\n     double nphi = 1 - phi;\n     double p = 1.0 / (stats.getNumberOfDocuments() + 1);\ndiff --git a/lucene/src/java/org/apache/lucene/search/similarities/BasicModelG.java b/lucene/src/java/org/apache/lucene/search/similarities/BasicModelG.java\nindex edd50b0f00..3c3a692351 100644\n--- a/lucene/src/java/org/apache/lucene/search/similarities/BasicModelG.java\n+++ b/lucene/src/java/org/apache/lucene/search/similarities/BasicModelG.java\n@@ -21,7 +21,7 @@ import static org.apache.lucene.search.similarities.SimilarityBase.log2;\n \n /**\n  * Geometric as limiting form of the Bose-Einstein model.  The formula used in Lucene differs\n- * slightly from the one in the original paper: {@code F} is increased by {@code tfn}\n+ * slightly from the one in the original paper: {@code F} is increased by {@code 1}\n  * and {@code N} is increased by {@code F}.\n  * @lucene.experimental\n  */\n@@ -29,7 +29,9 @@ public class BasicModelG extends BasicModel {\n   @Override\n   public final float score(BasicStats stats, float tfn) {\n     // just like in BE, approximation only holds true when F << N, so we use lambda = F / (N + F)\n-    double lambda = stats.getTotalTermFreq() / (double) (stats.getNumberOfDocuments() + stats.getTotalTermFreq());\n+    double F = stats.getTotalTermFreq() + 1;\n+    double N = stats.getNumberOfDocuments();\n+    double lambda = F / (N + F);\n     // -log(1 / (lambda + 1)) -> log(lambda + 1)\n     return (float)(log2(lambda + 1) + tfn * log2((1 + lambda) / lambda));\n   }\ndiff --git a/lucene/src/java/org/apache/lucene/search/similarities/BasicModelP.java b/lucene/src/java/org/apache/lucene/search/similarities/BasicModelP.java\nindex 41a88232ec..d78f7ad238 100644\n--- a/lucene/src/java/org/apache/lucene/search/similarities/BasicModelP.java\n+++ b/lucene/src/java/org/apache/lucene/search/similarities/BasicModelP.java\n@@ -33,7 +33,7 @@ public class BasicModelP extends BasicModel {\n   \n   @Override\n   public final float score(BasicStats stats, float tfn) {\n-    float lambda = (float)stats.getTotalTermFreq() / stats.getNumberOfDocuments();\n+    float lambda = (float)(stats.getTotalTermFreq()+1) / (stats.getNumberOfDocuments()+1);\n     return (float)(tfn * log2(tfn / lambda)\n         + (lambda + 1 / (12 * tfn) - tfn) * LOG2_E\n         + 0.5 * log2(2 * Math.PI * tfn));\ndiff --git a/lucene/src/java/org/apache/lucene/search/similarities/LMSimilarity.java b/lucene/src/java/org/apache/lucene/search/similarities/LMSimilarity.java\nindex bf1df96116..1679ea83f2 100644\n--- a/lucene/src/java/org/apache/lucene/search/similarities/LMSimilarity.java\n+++ b/lucene/src/java/org/apache/lucene/search/similarities/LMSimilarity.java\n@@ -144,7 +144,7 @@ public abstract class LMSimilarity extends SimilarityBase {\n   public static class DefaultCollectionModel implements CollectionModel {\n     @Override\n     public float computeProbability(BasicStats stats) {\n-      return (float)stats.getTotalTermFreq() / (stats.getNumberOfFieldTokens() +1);\n+      return (stats.getTotalTermFreq()+1F) / (stats.getNumberOfFieldTokens()+1F);\n     }\n     \n     @Override\ndiff --git a/lucene/src/java/org/apache/lucene/search/similarities/LambdaDF.java b/lucene/src/java/org/apache/lucene/search/similarities/LambdaDF.java\nindex 7e4a8240b8..73ae600c9a 100644\n--- a/lucene/src/java/org/apache/lucene/search/similarities/LambdaDF.java\n+++ b/lucene/src/java/org/apache/lucene/search/similarities/LambdaDF.java\n@@ -20,13 +20,13 @@ package org.apache.lucene.search.similarities;\n import org.apache.lucene.search.Explanation;\n \n /**\n- * Computes lambda as {@code totalTermFreq / numberOfDocuments}.\n+ * Computes lambda as {@code docFreq+1 / numberOfDocuments+1}.\n  * @lucene.experimental\n  */\n public class LambdaDF extends Lambda {\n   @Override\n   public final float lambda(BasicStats stats) {\n-    return (float)stats.getDocFreq() / stats.getNumberOfDocuments();\n+    return (stats.getDocFreq()+1F) / (stats.getNumberOfDocuments()+1F);\n   }\n   \n   @Override\ndiff --git a/lucene/src/java/org/apache/lucene/search/similarities/LambdaTTF.java b/lucene/src/java/org/apache/lucene/search/similarities/LambdaTTF.java\nindex 25c55bd72c..702409589b 100644\n--- a/lucene/src/java/org/apache/lucene/search/similarities/LambdaTTF.java\n+++ b/lucene/src/java/org/apache/lucene/search/similarities/LambdaTTF.java\n@@ -20,13 +20,13 @@ package org.apache.lucene.search.similarities;\n import org.apache.lucene.search.Explanation;\n \n /**\n- * Computes lambda as {@code docFreq / numberOfDocuments}.\n+ * Computes lambda as {@code totalTermFreq+1 / numberOfDocuments+1}.\n  * @lucene.experimental\n  */\n public class LambdaTTF extends Lambda {  \n   @Override\n   public final float lambda(BasicStats stats) {\n-    return (float)stats.getTotalTermFreq() / stats.getNumberOfDocuments();\n+    return (stats.getTotalTermFreq()+1F) / (stats.getNumberOfDocuments()+1F);\n   }\n \n   @Override\ndiff --git a/lucene/src/java/org/apache/lucene/search/similarities/NormalizationH3.java b/lucene/src/java/org/apache/lucene/search/similarities/NormalizationH3.java\nindex 97bf86a113..b00fc17b3d 100644\n--- a/lucene/src/java/org/apache/lucene/search/similarities/NormalizationH3.java\n+++ b/lucene/src/java/org/apache/lucene/search/similarities/NormalizationH3.java\n@@ -34,7 +34,7 @@ public class NormalizationH3 extends Normalization {\n \n   @Override\n   public float tfn(BasicStats stats, float tf, float len) {\n-    return (tf + mu * (stats.getTotalTermFreq() / (float)stats.getNumberOfFieldTokens())) / (len + mu) * mu;\n+    return (tf + mu * ((stats.getTotalTermFreq()+1F) / (stats.getNumberOfFieldTokens()+1F))) / (len + mu) * mu;\n   }\n \n   @Override\n",
  "files": 9,
  "linesAdd": 17,
  "linesRem": 15,
  "failing_tests": [],
  "nb_test": 0,
  "nb_failure": 0,
  "nb_error": 0,
  "nb_skipped": 0
}