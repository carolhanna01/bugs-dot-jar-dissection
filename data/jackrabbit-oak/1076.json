{
  "files": 1, 
  "singleLine": false, 
  "nb_error": 1, 
  "failing_tests": [
    "testRelativeProperties(org.apache.jackrabbit.oak.query.index.TraversingIndexQueryTest): Result set size is different expected:<1> but was:<2>", 
    "testMultipleRelativeProperties(org.apache.jackrabbit.oak.query.index.TraversingIndexQueryTest): Result set size is different expected:<0> but was:<1>", 
    "sql2Measure(org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexQueryTest): Results in target/sql2_measure.txt don't match expected results in src/test/resources/sql2_measure.txt; compare the files for details"
  ], 
  "nb_test": 1836, 
  "patch": "diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/query/ast/SelectorImpl.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/query/ast/SelectorImpl.java\nindex 7421870..8434fb2 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/query/ast/SelectorImpl.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/query/ast/SelectorImpl.java\n@@ -42,6 +42,7 @@ import org.apache.jackrabbit.oak.api.PropertyValue;\n import org.apache.jackrabbit.oak.api.Tree;\n import org.apache.jackrabbit.oak.api.Type;\n import org.apache.jackrabbit.oak.commons.PathUtils;\n+import org.apache.jackrabbit.oak.plugins.memory.PropertyBuilder;\n import org.apache.jackrabbit.oak.query.QueryImpl;\n import org.apache.jackrabbit.oak.query.fulltext.FullTextExpression;\n import org.apache.jackrabbit.oak.query.index.FilterImpl;\n@@ -533,12 +534,33 @@ public class SelectorImpl extends SourceImpl {\n             readOakProperties(list, t, oakPropertyName, propertyType);\n             if (list.size() == 0) {\n                 return null;\n+            } else if (list.size() == 1) {\n+                return list.get(0);\n             }\n-            ArrayList<String> strings = new ArrayList<String>();\n-            for (PropertyValue p : list) {\n-                Iterables.addAll(strings, p.getValue(Type.STRINGS));\n+            Type<?> type = list.get(0).getType();\n+            for (int i = 1; i < list.size(); i++) {\n+                Type<?> t2 = list.get(i).getType();\n+                if (t2 != type) {\n+                    // types don't match\n+                    type = Type.STRING;\n+                    break;\n+                }\n+            }\n+            if (type == Type.STRING) {\n+                ArrayList<String> strings = new ArrayList<String>();\n+                for (PropertyValue p : list) {\n+                    Iterables.addAll(strings, p.getValue(Type.STRINGS));\n+                }\n+                return PropertyValues.newString(strings);\n+            }\n+            @SuppressWarnings(\"unchecked\")\n+            PropertyBuilder<Object> builder = (PropertyBuilder<Object>) PropertyBuilder.array(type);\n+            builder.setName(\"\");\n+            for (PropertyValue v : list) {\n+                builder.addValue(v.getValue(type));\n             }\n-            return PropertyValues.newString(strings);                    \n+            PropertyState s = builder.getPropertyState();\n+            return PropertyValues.create(s);\n         }\n         boolean relative = oakPropertyName.indexOf('/') >= 0;\n         Tree t = currentTree();\n@@ -590,6 +612,7 @@ public class SelectorImpl extends SourceImpl {\n     }\n     \n     private void readOakProperties(ArrayList<PropertyValue> target, Tree t, String oakPropertyName, Integer propertyType) {\n+        boolean skipCurrentNode = false;\n         while (true) {\n             if (t == null || !t.exists()) {\n                 return;\n@@ -608,10 +631,14 @@ public class SelectorImpl extends SourceImpl {\n                 for (Tree child : t.getChildren()) {\n                     readOakProperties(target, child, oakPropertyName, propertyType);\n                 }\n+                skipCurrentNode = true;\n             } else {\n                 t = t.getChild(parent);\n             }\n         }\n+        if (skipCurrentNode) {\n+            return;\n+        }\n         if (!\"*\".equals(oakPropertyName)) {\n             PropertyValue value = currentOakProperty(t, oakPropertyName, propertyType);\n             if (value != null) {\n@@ -619,12 +646,12 @@ public class SelectorImpl extends SourceImpl {\n             }\n             return;\n         }\n-          for (PropertyState p : t.getProperties()) {\n-              if (propertyType == null || p.getType().tag() == propertyType) {\n-                  PropertyValue v = PropertyValues.create(p);\n-                  target.add(v);\n-              }\n-          }\n+        for (PropertyState p : t.getProperties()) {\n+            if (propertyType == null || p.getType().tag() == propertyType) {\n+                PropertyValue v = PropertyValues.create(p);\n+                target.add(v);\n+            }\n+        }\n     }\n \n     @Override\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 37, 
  "nb_skipped": 8, 
  "fix_commit": "9238264d", 
  "nb_failure": 2, 
  "id": "1076", 
  "linesRem": 10
}