{
  "files": 2, 
  "singleLine": false, 
  "nb_error": 2, 
  "failing_tests": [
    "testUnwrappedOr(org.apache.jackrabbit.oak.query.SQL2ParserTest)", 
    "xpath(org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexQueryTest): Results in target/xpath.txt don't match expected results in src/test/resources/xpath.txt; compare the files for details", 
    "xpath(org.apache.jackrabbit.oak.plugins.index.property.OrderedIndexQueryTest): Results in target/xpath.txt don't match expected results in src/test/resources/xpath.txt; compare the files for details"
  ], 
  "nb_test": 1868, 
  "patch": "diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/Expression.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/Expression.java\nindex 782a543..b34fb56 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/Expression.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/Expression.java\n@@ -17,6 +17,8 @@\n package org.apache.jackrabbit.oak.query.xpath;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n \n import org.apache.jackrabbit.oak.query.SQL2Parser;\n import org.apache.jackrabbit.util.ISO9075;\n@@ -46,6 +48,15 @@ abstract class Expression {\n     }\n     \n     /**\n+     * Get the optimized expression.\n+     * \n+     * @return the optimized expression\n+     */\n+    Expression optimize() {\n+        return this;\n+    }\n+\n+    /**\n      * Whether this is a condition.\n      * \n      * @return true if it is \n@@ -55,6 +66,43 @@ abstract class Expression {\n     }\n     \n     /**\n+     * Whether this is a or contains a full-text condition.\n+     * \n+     * @return true if it is\n+     */\n+    boolean containsFullTextCondition() {\n+        return false;\n+    }\n+    \n+    /**\n+     * Get the left-hand-side expression for equality conditions. \n+     * For example, for x=1, it is x. If it is not equality, return null.\n+     * \n+     * @return the left-hand-side expression, or null\n+     */        \n+    String getCommonLeftPart() {\n+        return null;\n+    }\n+    \n+    /**\n+     * Get the left hand side of an expression.\n+     * \n+     * @return the left hand side\n+     */\n+    Expression getLeft() {\n+        return null;\n+    }\n+    \n+    /**\n+     * Get the list of the right hand side of an expression.\n+     * \n+     * @return the list\n+     */\n+    List<Expression> getRight() {\n+        return null;\n+    }\n+\n+    /**\n      * Pull an OR condition up to the right hand side of an AND condition.\n      * \n      * @return the (possibly rotated) expression\n@@ -156,19 +204,24 @@ abstract class Expression {\n         int getPrecedence() {\n             return precedence;\n         }\n-        \n-        /**\n-         * Get the left-hand-side expression for equality conditions. \n-         * For example, for x=1, it is x. If it is not equality, return null.\n-         * \n-         * @return the left-hand-side expression, or null\n-         */        \n-        public String getCommonLeftPart() {\n+             \n+        @Override\n+        String getCommonLeftPart() {\n             if (!\"=\".equals(operator)) {\n                 return null;\n             }\n             return left.toString();\n         }\n+        \n+        @Override\n+        Expression getLeft() {\n+            return left;\n+        }\n+        \n+        @Override\n+        List<Expression> getRight() {\n+            return Collections.singletonList(right);\n+        }\n     \n         @Override\n         public String toString() {\n@@ -222,6 +275,11 @@ abstract class Expression {\n         boolean isCondition() {\n             return true;\n         }\n+        \n+        @Override\n+        Expression optimize() {\n+            return this;\n+        }\n     \n     }\n     \n@@ -243,16 +301,87 @@ abstract class Expression {\n          */\n         @Override\n         public String getCommonLeftPart() {\n-            if (left instanceof Condition && right instanceof Condition) {\n-                String l = ((Condition) left).getCommonLeftPart();\n-                String r = ((Condition) right).getCommonLeftPart();\n-                if (l != null && r != null && l.equals(r)) {\n-                    return l;\n-                }\n+            String l = left.getCommonLeftPart();\n+            String r = right.getCommonLeftPart();\n+            if (l != null && r != null && l.equals(r)) {\n+                return l;\n             }\n             return null;\n         }\n         \n+        @Override\n+        Expression optimize() {\n+            Expression l = left.optimize();\n+            Expression r = right.optimize();\n+            if (l != left || r != right) {\n+                return new OrCondition(l, r).optimize();\n+            }\n+            String commonLeft = getCommonLeftPart();\n+            if (commonLeft == null) {\n+                return this;\n+            }\n+            // \"@x = 1 or @x = 2\" is converted to \"@x in (1, 2)\"\n+            ArrayList<Expression> list = new ArrayList<Expression>();\n+            list.addAll(left.getRight());\n+            list.addAll(right.getRight());\n+            Expression le = left.getLeft();\n+            InCondition in = new InCondition(le, list);\n+            return in.optimize();\n+        }\n+        \n+        @Override\n+        boolean containsFullTextCondition() {\n+            return left.containsFullTextCondition() || right.containsFullTextCondition();\n+        }\n+        \n+    }\n+    \n+    /**\n+     * An \"or\" condition.\n+     */\n+    static class InCondition extends Expression {\n+\n+        final Expression left;\n+        final List<Expression> list;\n+        \n+        InCondition(Expression left, List<Expression> list) {\n+            this.left = left;\n+            this.list = list;\n+        }\n+        \n+        @Override\n+        String getCommonLeftPart() {\n+            return left.toString();\n+        }\n+        \n+        @Override\n+        Expression getLeft() {\n+            return left;\n+        }\n+        \n+        @Override\n+        List<Expression> getRight() {\n+            return list;\n+        }\n+    \n+        @Override\n+        public String toString() {\n+            StringBuilder buff = new StringBuilder();\n+            buff.append(left).append(\" in(\");\n+            for (int i = 0; i < list.size(); i++) {\n+                if (i > 0) {\n+                    buff.append(\", \");\n+                }\n+                buff.append(list.get(i));\n+            }\n+            return buff.append(')').toString();\n+        }\n+    \n+        @Override\n+        boolean isCondition() {\n+            return true;\n+        }        \n+        \n     }\n     \n     /**\n@@ -263,6 +392,16 @@ abstract class Expression {\n         AndCondition(Expression left, Expression right) {\n             super(left, \"and\", right, Expression.PRECEDENCE_AND);\n         }\n+\n+        @Override\n+        Expression optimize() {\n+            Expression l = left.optimize();\n+            Expression r = right.optimize();\n+            if (l != left || r != right) {\n+                return new AndCondition(l, r);\n+            }\n+            return this;\n+        }\n         \n         @Override\n         AndCondition pullOrRight() {\n@@ -285,6 +424,11 @@ abstract class Expression {\n             return this;\n         }\n         \n+        @Override\n+        boolean containsFullTextCondition() {\n+            return left.containsFullTextCondition() || right.containsFullTextCondition();\n+        }\n+        \n     }\n     \n     /**\n@@ -320,6 +464,11 @@ abstract class Expression {\n         }\n         \n         @Override\n+        boolean containsFullTextCondition() {\n+            return true;\n+        }\n+        \n+        @Override\n         boolean isName() {\n             return left.isName();\n         }\n@@ -352,6 +501,11 @@ abstract class Expression {\n         boolean isCondition() {\n             return true;\n         }\n+\n+        @Override\n+        boolean containsFullTextCondition() {\n+            return true;\n+        }\n         \n         @Override\n         boolean isName() {\n@@ -520,5 +674,5 @@ abstract class Expression {\n         }\n     \n     }\n-    \n+\n }\n\\ No newline at end of file\ndiff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/Statement.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/Statement.java\nindex 0504429..6113c0c 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/Statement.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/Statement.java\n@@ -20,7 +20,6 @@ import java.util.ArrayList;\n \n import org.apache.jackrabbit.oak.query.QueryImpl;\n import org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition;\n-import org.apache.jackrabbit.oak.query.xpath.Expression.Contains;\n import org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition;\n import org.apache.jackrabbit.oak.query.xpath.Expression.Property;\n \n@@ -29,8 +28,6 @@ import org.apache.jackrabbit.oak.query.xpath.Expression.Property;\n  */\n public class Statement {\n \n-    private String xpathQuery;\n-    \n     private boolean explain;\n     private boolean measure;\n     \n@@ -49,15 +46,18 @@ public class Statement {\n     \n     private Expression where;\n \n-    private ArrayList<Order> orderList = new ArrayList<Order>();\n+    ArrayList<Order> orderList = new ArrayList<Order>();\n+    \n+    String xpathQuery;\n     \n     public Statement optimize() {\n-        if (explain || measure || orderList.size() > 0) {\n+        if (explain || measure) {\n             return this;\n         }\n         if (where == null) {\n             return this;\n         }\n+        where = where.optimize();\n         ArrayList<Expression> unionList = new ArrayList<Expression>();\n         addToUnionList(where, unionList);\n         if (unionList.size() == 1) {\n@@ -71,37 +71,29 @@ public class Statement {\n             s.selectors = selectors;\n             s.columnList = columnList;\n             s.where = e;\n-            if (i == unionList.size() - 1) {\n-                s.xpathQuery = xpathQuery;\n-            }\n             if (union == null) {\n                 union = s;\n             } else {\n                 union = new UnionStatement(union.optimize(), s.optimize());\n             }\n         }\n+        union.orderList = orderList;\n+        union.xpathQuery = xpathQuery;\n         return union;\n     }\n     \n     private static void addToUnionList(Expression condition,  ArrayList<Expression> unionList) {\n-        if (condition instanceof OrCondition) {\n+        if (condition.containsFullTextCondition()) {\n+            // do not use union\n+        } else if (condition instanceof OrCondition) {\n             OrCondition or = (OrCondition) condition;\n-            if (or.getCommonLeftPart() != null) {\n-                // @x = 1 or @x = 2 \n-                // is automatically converted to \n-                // @x in (1, 2)\n-                // within the query engine\n-            } else if (or.left instanceof Contains && or.right instanceof Contains) {\n-                // do not optimize \"contains\"\n-            } else {\n-                // conditions of type                \n-                // @x = 1 or @y = 2\n-                // or similar are converted to\n-                // (@x = 1) union (@y = 2)\n-                addToUnionList(or.left, unionList);\n-                addToUnionList(or.right, unionList);\n-                return;\n-            }\n+            // conditions of type                \n+            // @x = 1 or @y = 2\n+            // or similar are converted to\n+            // (@x = 1) union (@y = 2)\n+            addToUnionList(or.left, unionList);\n+            addToUnionList(or.right, unionList);\n+            return;\n         } else if (condition instanceof AndCondition) {\n             // conditions of type\n             // @a = 1 and (@x = 1 or @y = 2)\n@@ -111,19 +103,10 @@ public class Statement {\n             and = and.pullOrRight();\n             if (and.right instanceof OrCondition) {\n                 OrCondition or = (OrCondition) and.right;\n-                if (or.getCommonLeftPart() != null) {\n-                    // @x = 1 or @x = 2 \n-                    // is automatically converted to \n-                    // @x in (1, 2)\n-                    // within the query engine                \n-                } else if (or.left instanceof Contains && or.right instanceof Contains) {\n-                    // do not optimize \"contains\"\n-                } else {\n-                    // same as above, but with the added \"and\"\n-                    addToUnionList(new AndCondition(and.left, or.left), unionList);\n-                    addToUnionList(new AndCondition(and.left, or.right), unionList);\n-                    return;\n-                }\n+                // same as above, but with the added \"and\"\n+                addToUnionList(new AndCondition(and.left, or.left), unionList);\n+                addToUnionList(new AndCondition(and.left, or.right), unionList);\n+                return;\n             }\n         }\n         unionList.add(condition);\n@@ -255,7 +238,25 @@ public class Statement {\n         \n         @Override\n         public String toString() {\n-            return s1 + \" union \" + s2;\n+            StringBuilder buff = new StringBuilder();\n+            buff.append(s1).append(\" union \").append(s2);\n+            // order by ...\n+            if (orderList != null && !orderList.isEmpty()) {\n+                buff.append(\" order by \");\n+                for (int i = 0; i < orderList.size(); i++) {\n+                    if (i > 0) {\n+                        buff.append(\", \");\n+                    }\n+                    buff.append(orderList.get(i));\n+                }\n+            }\n+            // leave original xpath string as a comment\n+            if (xpathQuery != null) {\n+                buff.append(\" /* xpath: \");\n+                buff.append(xpathQuery);\n+                buff.append(\" */\");\n+            }\n+            return buff.toString();\n         }\n         \n     }\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 209, 
  "nb_skipped": 9, 
  "fix_commit": "004db804", 
  "nb_failure": 1, 
  "id": "2021", 
  "linesRem": 54
}