{"nb_failure": 3, "nb_error": 0, "failing_tests": ["testReaggregateMixin(org.apache.jackrabbit.oak.plugins.index.lucene.AggregateTest): expected:<4> but was:<0>", "oneLevelTypedMixin(org.apache.jackrabbit.oak.plugins.index.lucene.AggregateTest): expected:<1> but was:<0>", "indexingBasedOnMixinAndRelativeProps(org.apache.jackrabbit.oak.plugins.index.lucene.LucenePropertyIndexTest): Expected path /test/a not found, got []"], "patch": "diff --git a/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/Aggregate.java b/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/Aggregate.java\nindex e9f7dd2..fa5728b 100644\n--- a/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/Aggregate.java\n+++ b/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/Aggregate.java\n@@ -30,7 +30,6 @@ import com.google.common.base.Predicate;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.Iterables;\n import com.google.common.collect.Lists;\n-import org.apache.jackrabbit.oak.api.CommitFailedException;\n import org.apache.jackrabbit.oak.api.PropertyState;\n import org.apache.jackrabbit.oak.commons.PathUtils;\n import org.apache.jackrabbit.oak.plugins.index.lucene.util.ConfigUtil;\n@@ -79,7 +78,7 @@ class Aggregate {\n     }\n \n     public void collectAggregates(NodeState root, ResultCollector collector) {\n-        if (nodeTypeName.equals(ConfigUtil.getPrimaryTypeName(root))) {\n+        if (matchingType(nodeTypeName, root)) {\n             List<Matcher> matchers = createMatchers();\n             collectAggregates(root, matchers, collector);\n         }\n@@ -111,6 +110,19 @@ class Aggregate {\n         return nodeTypeName;\n     }\n \n+    private static boolean matchingType(String nodeTypeName, NodeState nodeState) {\n+        if (nodeTypeName.equals(ConfigUtil.getPrimaryTypeName(nodeState))) {\n+            return true;\n+        }\n+\n+        for (String mixin : ConfigUtil.getMixinNames(nodeState)) {\n+            if (nodeTypeName.equals(mixin)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n     private static void collectAggregates(NodeState nodeState, List<Matcher> matchers,\n                                           ResultCollector collector) {\n         for (ChildNodeEntry cne : nodeState.getChildNodeEntries()) {\n@@ -231,7 +243,7 @@ class Aggregate {\n             //last segment -> add to collector if node type matches\n             if (depth == maxDepth() - 1\n                     && primaryType != null\n-                    && !primaryType.equals(ConfigUtil.getPrimaryTypeName(nodeState))) {\n+                    && !matchingType(primaryType, nodeState)) {\n                 return false;\n             }\n             return super.match(name, nodeState, depth);\n@@ -256,7 +268,19 @@ class Aggregate {\n \n         @Override\n         public Aggregate getAggregate(NodeState matchedNodeState) {\n-            return aggMapper.getAggregate(ConfigUtil.getPrimaryTypeName(matchedNodeState));\n+            //Check agg defn for primaryType first\n+            Aggregate agg = aggMapper.getAggregate(ConfigUtil.getPrimaryTypeName(matchedNodeState));\n+\n+            //If not found then look for defn for mixins\n+            if (agg == null) {\n+                for (String mixin : ConfigUtil.getMixinNames(matchedNodeState)) {\n+                    agg = aggMapper.getAggregate(mixin);\n+                    if (agg != null) {\n+                        break;\n+                    }\n+                }\n+            }\n+            return agg;\n         }\n \n         @Override\ndiff --git a/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/util/ConfigUtil.java b/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/util/ConfigUtil.java\nindex 476f7e1..73287a0 100644\n--- a/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/util/ConfigUtil.java\n+++ b/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/util/ConfigUtil.java\n@@ -19,6 +19,8 @@\n \n package org.apache.jackrabbit.oak.plugins.index.lucene.util;\n \n+import java.util.Collections;\n+\n import com.google.common.primitives.Ints;\n import org.apache.jackrabbit.JcrConstants;\n import org.apache.jackrabbit.oak.api.Blob;\n@@ -60,6 +62,11 @@ public class ConfigUtil {\n         return (ps == null) ? JcrConstants.NT_BASE : ps.getValue(Type.NAME);\n     }\n \n+    public static Iterable<String> getMixinNames(NodeState nodeState) {\n+        PropertyState ps = nodeState.getProperty(JcrConstants.JCR_MIXINTYPES);\n+        return (ps == null) ? Collections.<String>emptyList() : ps.getValue(Type.NAMES);\n+    }\n+\n     /**\n      * Assumes that given state is of type nt:file and then reads\n      * the jcr:content/@jcr:data property to get the binary content\ndiff --git a/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/util/package-info.java b/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/util/package-info.java\nindex 0761902..b1049b9 100644\n--- a/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/util/package-info.java\n+++ b/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/util/package-info.java\n@@ -14,7 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-@Version(\"1.1.0\")\n+@Version(\"1.2.0\")\n @Export(optional = \"provide:=true\")\n package org.apache.jackrabbit.oak.plugins.index.lucene.util;\n \n", "nb_test": 278, "nb_skipped": 3, "fix_commit": "fcd64766", "id": "3630"}