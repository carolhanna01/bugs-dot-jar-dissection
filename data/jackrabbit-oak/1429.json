{"files": 1, "singleLine": false, "nb_error": 0, "failing_tests": ["commitRootInPrevious(org.apache.jackrabbit.oak.plugins.document.DocumentSplitTest)"], "nb_test": 1625, "patch": "diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/NodeDocument.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/NodeDocument.java\nindex 49c9d01..48f3bfb 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/NodeDocument.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/NodeDocument.java\n@@ -362,9 +362,7 @@ public final class NodeDocument extends Document implements CachedNodeDocument{\n      */\n     @CheckForNull\n     public String getCommitRootPath(Revision revision) {\n-        // check local map first\n-        Map<Revision, String> local = getLocalCommitRoot();\n-        String depth = local.get(revision);\n+        String depth = getCommitRootDepth(revision);\n         if (depth != null) {\n             if (depth.equals(\"0\")) {\n                 return \"/\";\n@@ -373,13 +371,6 @@ public final class NodeDocument extends Document implements CachedNodeDocument{\n             return PathUtils.getAncestorPath(p,\n                     PathUtils.getDepth(p) - Integer.parseInt(depth));\n         }\n-        // check previous\n-        for (NodeDocument prev : getPreviousDocs(COMMIT_ROOT, revision)) {\n-            String path = prev.getCommitRootPath(revision);\n-            if (path != null) {\n-                return path;\n-            }\n-        }\n         return null;\n     }\n \n@@ -968,6 +959,31 @@ public final class NodeDocument extends Document implements CachedNodeDocument{\n     }\n \n     /**\n+     * Returns the commit root depth for the given revision. This method also\n+     * takes previous documents into account.\n+     *\n+     * @param revision get the commit root depth for this revision.\n+     * @return the depth or <code>null</code> if there is no commit root entry\n+     *         for the given revision on this document or previous documents.\n+     */\n+    @CheckForNull\n+    private String getCommitRootDepth(@Nonnull Revision revision) {\n+        // check local map first\n+        Map<Revision, String> local = getLocalCommitRoot();\n+        String depth = local.get(revision);\n+        if (depth == null) {\n+            // check previous\n+            for (NodeDocument prev : getPreviousDocs(COMMIT_ROOT, revision)) {\n+                depth = prev.getCommitRootDepth(revision);\n+                if (depth != null) {\n+                    break;\n+                }\n+            }\n+        }\n+        return depth;\n+    }\n+\n+    /**\n      * Checks that revision x is newer than another revision.\n      *\n      * @param x the revision to check\n", "project": "jackrabbit-oak", "linesAdd": 26, "nb_skipped": 7, "fix_commit": "c2f5ca6c", "nb_failure": 1, "id": "1429", "linesRem": 10}