{"files": 1, "singleLine": false, "nb_error": 1, "failing_tests": ["xpath(org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexQueryTest): Results in target/oajopi.property.PropertyIndexQueryTest_xpath.txt don't match expected results in /home/ylyu/parallel/oak/oak9/dataset/oak/OAK-4387_ca05fd06f97e4ea2be08b58204c3be060d71e7f0/oak-core/target/test-classes/org/apache/jackrabbit/oak/query/xpath.txt; compare the files for details; got=(..)"], "nb_test": 2884, "patch": "diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/XPathToSQL2Converter.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/XPathToSQL2Converter.java\nindex d64d7cf..98bcc5e 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/XPathToSQL2Converter.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/XPathToSQL2Converter.java\n@@ -192,46 +192,57 @@ public class XPathToSQL2Converter {\n                         currentSelector.path = \"/\";\n                     }\n                 }\n-            } else if (readIf(\"text\")) {\n-                // \"...text()\"\n-                currentSelector.isChild = false;\n-                pathPattern += \"jcr:xmltext\";\n-                read(\"(\");\n-                read(\")\");\n-                if (currentSelector.isDescendant) {\n-                    currentSelector.nodeName = \"jcr:xmltext\";\n-                } else {\n-                    currentSelector.path = PathUtils.concat(currentSelector.path, \"jcr:xmltext\");\n-                }\n-            } else if (readIf(\"element\")) {\n-                // \"...element(...\"\n-                read(\"(\");\n-                if (readIf(\")\")) {\n-                    // any\n-                    pathPattern += \"%\";\n-                } else {\n-                    if (readIf(\"*\")) {\n-                        // any\n-                        pathPattern += \"%\";\n+            } else if (currentTokenType == IDENTIFIER) {\n+                // probably a path restriction\n+                // String name = readPathSegment();\n+                String identifier = readIdentifier();\n+                if (readIf(\"(\")) {\n+                    if (\"text\".equals(identifier)) {\n+                        // \"...text()\"\n+                        currentSelector.isChild = false;\n+                        pathPattern += \"jcr:xmltext\";\n+                        read(\")\");\n+                        if (currentSelector.isDescendant) {\n+                            currentSelector.nodeName = \"jcr:xmltext\";\n+                        } else {\n+                            currentSelector.path = PathUtils.concat(currentSelector.path, \"jcr:xmltext\");\n+                        }                        \n+                    } else if (\"element\".equals(identifier)) {\n+                        // \"...element(...\"\n+                        if (readIf(\")\")) {\n+                            // any\n+                            pathPattern += \"%\";\n+                        } else {\n+                            if (readIf(\"*\")) {\n+                                // any\n+                                pathPattern += \"%\";\n+                            } else {\n+                                String name = readPathSegment();\n+                                pathPattern += name;\n+                                appendNodeName(name);\n+                            }\n+                            if (readIf(\",\")) {\n+                                currentSelector.nodeType = readIdentifier();\n+                            }\n+                            read(\")\");\n+                        }\n+                    } else if (\"rep:excerpt\".equals(identifier)) {\n+                        readOpenDotClose(false);\n+                        rewindSelector();\n+                        Expression.Property p = new Expression.Property(currentSelector, \"rep:excerpt\", false);\n+                        statement.addSelectColumn(p);\n                     } else {\n-                        String name = readPathSegment();\n-                        pathPattern += name;\n-                        appendNodeName(name);\n-                    }\n-                    if (readIf(\",\")) {\n-                        currentSelector.nodeType = readIdentifier();\n+                        throw getSyntaxError();\n                     }\n-                    read(\")\");\n+                } else {\n+                    String name = ISO9075.decode(identifier);\n+                    pathPattern += name;\n+                    appendNodeName(name);\n                 }\n             } else if (readIf(\"@\")) {\n                 rewindSelector();\n                 Expression.Property p = readProperty();\n                 statement.addSelectColumn(p);\n-            } else if (readIf(\"rep:excerpt\")) {\n-                rewindSelector();\n-                readExcerpt();\n-                Expression.Property p = new Expression.Property(currentSelector, \"rep:excerpt\", false);\n-                statement.addSelectColumn(p);\n             } else if (readIf(\"(\")) {\n                 rewindSelector();\n                 do {\n@@ -239,7 +250,7 @@ public class XPathToSQL2Converter {\n                         Expression.Property p = readProperty();\n                         statement.addSelectColumn(p);\n                     } else if (readIf(\"rep:excerpt\")) {\n-                        readExcerpt();\n+                        readOpenDotClose(true);\n                         Expression.Property p = new Expression.Property(currentSelector, \"rep:excerpt\", false);\n                         statement.addSelectColumn(p);\n                     } else if (readIf(\"rep:spellcheck\")) {\n@@ -249,7 +260,7 @@ public class XPathToSQL2Converter {\n                         Expression.Property p = new Expression.Property(currentSelector, \"rep:spellcheck()\", false);\n                         statement.addSelectColumn(p);\n                     } else if (readIf(\"rep:suggest\")) {\n-                        readExcerpt();\n+                        readOpenDotClose(true);\n                         Expression.Property p = new Expression.Property(currentSelector, \"rep:suggest()\", false);\n                         statement.addSelectColumn(p);\n                     }\n@@ -257,11 +268,6 @@ public class XPathToSQL2Converter {\n                 if (!readIf(\")\")) {\n                     return convertToUnion(query, statement, startParseIndex - 1);\n                 }\n-            } else if (currentTokenType == IDENTIFIER) {\n-                // path restriction\n-                String name = readPathSegment();\n-                pathPattern += name;\n-                appendNodeName(name);\n             } else if (readIf(\".\")) {\n                 // just \".\" this is simply ignored, so that\n                 // \"a/./b\" is the same as \"a/b\"\n@@ -717,13 +723,19 @@ public class XPathToSQL2Converter {\n         return new Expression.Property(currentSelector, readPathSegment(), false);\n     }\n     \n-    private void readExcerpt() throws ParseException {\n-        read(\"(\");\n-        if (!readIf(\")\")) {\n-            // only rep:excerpt(.) and rep:excerpt() are currently supported\n-            read(\".\");\n-            read(\")\");\n+    /**\n+     * Read open bracket (optional), and optional dot, and close bracket.\n+     * \n+     * @param readOpenBracket whether to read the open bracket (false if this\n+     *            was already read)\n+     * @throws ParseException if close bracket or the dot were not read\n+     */\n+    private void readOpenDotClose(boolean readOpenBracket) throws ParseException {\n+        if (readOpenBracket) {\n+            read(\"(\");\n         }\n+        readIf(\".\");\n+        read(\")\");\n     }\n \n     private String readPathSegment() throws ParseException {\n", "project": "jackrabbit-oak", "linesAdd": 58, "nb_skipped": 1, "fix_commit": "ca05fd06", "nb_failure": 0, "id": "4387", "linesRem": 46}