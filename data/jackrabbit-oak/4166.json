{
  "files": 2, 
  "singleLine": false, 
  "nb_error": 5, 
  "failing_tests": [
    "referencedOlderThanOrphaned(org.apache.jackrabbit.oak.upgrade.CopyVersionHistoryTest): jcr:versionHistory not found on /versionables/mix:simpleVersionable/old", 
    "copyAllVersions(org.apache.jackrabbit.oak.upgrade.CopyVersionHistoryTest): jcr:versionHistory not found on /versionables/mix:simpleVersionable/old", 
    "onlyReferencedAfterDate(org.apache.jackrabbit.oak.upgrade.CopyVersionHistoryTest): jcr:versionHistory not found on /versionables/mix:simpleVersionable/young", 
    "onlyReferenced(org.apache.jackrabbit.oak.upgrade.CopyVersionHistoryTest): jcr:versionHistory not found on /versionables/mix:simpleVersionable/old", 
    "referencedSinceDate(org.apache.jackrabbit.oak.upgrade.CopyVersionHistoryTest): jcr:versionHistory not found on /versionables/mix:simpleVersionable/young"
  ], 
  "nb_test": 126, 
  "patch": "diff --git a/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/RepositoryUpgrade.java b/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/RepositoryUpgrade.java\nindex 7866301..9fb3b37 100644\n--- a/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/RepositoryUpgrade.java\n+++ b/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/RepositoryUpgrade.java\n@@ -117,6 +117,7 @@ import org.apache.jackrabbit.oak.upgrade.security.GroupEditorProvider;\n import org.apache.jackrabbit.oak.upgrade.security.RestrictionEditorProvider;\n import org.apache.jackrabbit.oak.upgrade.version.VersionCopyConfiguration;\n import org.apache.jackrabbit.oak.upgrade.version.VersionableEditor;\n+import org.apache.jackrabbit.oak.upgrade.version.VersionablePropertiesEditor;\n import org.apache.jackrabbit.spi.Name;\n import org.apache.jackrabbit.spi.QNodeDefinition;\n import org.apache.jackrabbit.spi.QNodeTypeDefinition;\n@@ -470,6 +471,10 @@ public class RepositoryUpgrade {\n                     new SameNameSiblingsEditor.Provider()\n             )));\n \n+            // this editor works on the VersionableEditor output, so it can't be\n+            // a part of the same EditorHook\n+            hooks.add(new EditorHook(new VersionablePropertiesEditor.Provider()));\n+\n             // security-related hooks\n             for (SecurityConfiguration sc : security.getConfigurations()) {\n                 hooks.addAll(sc.getCommitHooks(workspaceName));\ndiff --git a/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/version/VersionablePropertiesEditor.java b/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/version/VersionablePropertiesEditor.java\nnew file mode 100644\nindex 0000000..a9c61e8\n--- /dev/null\n+++ b/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/version/VersionablePropertiesEditor.java\n@@ -0,0 +1,184 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.jackrabbit.oak.upgrade.version;\n+\n+import org.apache.jackrabbit.oak.api.CommitFailedException;\n+import org.apache.jackrabbit.oak.plugins.nodetype.TypePredicate;\n+import org.apache.jackrabbit.oak.spi.commit.CommitInfo;\n+import org.apache.jackrabbit.oak.spi.commit.DefaultEditor;\n+import org.apache.jackrabbit.oak.spi.commit.Editor;\n+import org.apache.jackrabbit.oak.spi.commit.EditorProvider;\n+import org.apache.jackrabbit.oak.spi.state.ChildNodeEntry;\n+import org.apache.jackrabbit.oak.spi.state.NodeBuilder;\n+import org.apache.jackrabbit.oak.spi.state.NodeState;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static com.google.common.collect.Sets.newHashSet;\n+import static org.apache.jackrabbit.JcrConstants.JCR_BASEVERSION;\n+import static org.apache.jackrabbit.JcrConstants.JCR_FROZENMIXINTYPES;\n+import static org.apache.jackrabbit.JcrConstants.JCR_ISCHECKEDOUT;\n+import static org.apache.jackrabbit.JcrConstants.JCR_MIXINTYPES;\n+import static org.apache.jackrabbit.JcrConstants.JCR_PREDECESSORS;\n+import static org.apache.jackrabbit.JcrConstants.JCR_ROOTVERSION;\n+import static org.apache.jackrabbit.JcrConstants.JCR_SUCCESSORS;\n+import static org.apache.jackrabbit.JcrConstants.JCR_UUID;\n+import static org.apache.jackrabbit.JcrConstants.JCR_VERSIONHISTORY;\n+import static org.apache.jackrabbit.JcrConstants.MIX_VERSIONABLE;\n+import static org.apache.jackrabbit.JcrConstants.NT_FROZENNODE;\n+import static org.apache.jackrabbit.JcrConstants.NT_VERSION;\n+import static org.apache.jackrabbit.oak.api.Type.NAMES;\n+import static org.apache.jackrabbit.oak.api.Type.REFERENCE;\n+import static org.apache.jackrabbit.oak.api.Type.REFERENCES;\n+import static org.apache.jackrabbit.oak.plugins.memory.MultiGenericPropertyState.nameProperty;\n+import static org.apache.jackrabbit.oak.upgrade.version.VersionHistoryUtil.getVersionHistoryNodeState;\n+\n+/**\n+ * The VersionablePropertiesEditor adds missing versionable properties.\n+ */\n+public final class VersionablePropertiesEditor extends DefaultEditor {\n+\n+    private static final String MIX_SIMPLE_VERSIONABLE = \"mix:simpleVersionable\";\n+\n+    private static final Logger log = LoggerFactory.getLogger(VersionablePropertiesEditor.class);\n+\n+    private final NodeBuilder rootBuilder;\n+\n+    private final NodeBuilder builder;\n+\n+    private final TypePredicate isVersionable;\n+\n+    private final TypePredicate isSimpleVersionable;\n+\n+    private final TypePredicate isNtVersion;\n+\n+    private final TypePredicate isFrozenNode;\n+\n+    private VersionablePropertiesEditor(NodeBuilder rootBuilder) {\n+        this.builder = rootBuilder;\n+        this.rootBuilder = rootBuilder;\n+        this.isVersionable = new TypePredicate(rootBuilder.getNodeState(), MIX_VERSIONABLE);\n+        this.isSimpleVersionable = new TypePredicate(rootBuilder.getNodeState(), MIX_SIMPLE_VERSIONABLE);\n+        this.isNtVersion = new TypePredicate(rootBuilder.getNodeState(), NT_VERSION);\n+        this.isFrozenNode = new TypePredicate(rootBuilder.getNodeState(), NT_FROZENNODE);\n+    }\n+\n+    private VersionablePropertiesEditor(VersionablePropertiesEditor parent, NodeBuilder builder) {\n+        this.builder = builder;\n+        this.rootBuilder = parent.rootBuilder;\n+        this.isVersionable = parent.isVersionable;\n+        this.isSimpleVersionable = parent.isSimpleVersionable;\n+        this.isNtVersion = parent.isNtVersion;\n+        this.isFrozenNode = parent.isFrozenNode;\n+    }\n+\n+    public static class Provider implements EditorProvider {\n+        @Override\n+        public Editor getRootEditor(NodeState before, NodeState after, NodeBuilder builder, CommitInfo info)\n+                throws CommitFailedException {\n+            return new VersionablePropertiesEditor(builder);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"VersionablePropertiesEditor\";\n+        }\n+    }\n+\n+    @Override\n+    public Editor childNodeAdded(String name, NodeState after) throws CommitFailedException {\n+        NodeBuilder nodeBuilder = builder.getChildNode(name);\n+        if (isVersionable.apply(after)) {\n+            fixProperties(nodeBuilder);\n+        } else if (isFrozenNode.apply(after)) {\n+            updateFrozenMixins(nodeBuilder);\n+        }\n+        return new VersionablePropertiesEditor(this, nodeBuilder);\n+    }\n+\n+    @Override\n+    public Editor childNodeChanged(String name, NodeState before, NodeState after) throws CommitFailedException {\n+        return childNodeAdded(name, after);\n+    }\n+\n+    private static boolean updateFrozenMixins(NodeBuilder builder) {\n+        if (builder.hasProperty(JCR_FROZENMIXINTYPES)) {\n+            final Set<String> mixins = newHashSet(builder.getProperty(JCR_FROZENMIXINTYPES).getValue(NAMES));\n+            if (mixins.remove(MIX_SIMPLE_VERSIONABLE)) {\n+                mixins.add(MIX_VERSIONABLE);\n+                builder.setProperty(nameProperty(JCR_FROZENMIXINTYPES, mixins));\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private void fixProperties(NodeBuilder node) {\n+        NodeState versionHistory = getVersionHistoryNodeState(rootBuilder.getNodeState(), node.getString(JCR_UUID));\n+        if (!versionHistory.exists()) {\n+            log.warn(\"No version history for {}\", node);\n+            return;\n+        }\n+\n+        Set<String> updated = new HashSet<>();\n+        if (!node.hasProperty(JCR_VERSIONHISTORY)) {\n+            node.setProperty(JCR_VERSIONHISTORY, versionHistory.getString(JCR_UUID), REFERENCE);\n+            updated.add(JCR_VERSIONHISTORY);\n+        }\n+\n+        String baseVersion = null;\n+        if (!node.hasProperty(JCR_BASEVERSION)) {\n+            baseVersion = getLastVersion(versionHistory);\n+            node.setProperty(JCR_BASEVERSION, baseVersion, REFERENCE);\n+            updated.add(JCR_BASEVERSION);\n+        }\n+\n+        if (!node.hasProperty(JCR_PREDECESSORS)) {\n+            baseVersion = baseVersion == null ? getLastVersion(versionHistory) : baseVersion;\n+\n+            List<String> predecessors = new ArrayList<>();\n+            if (node.getBoolean(JCR_ISCHECKEDOUT)) {\n+                predecessors.add(baseVersion);\n+            }\n+            node.setProperty(JCR_PREDECESSORS, predecessors, REFERENCES);\n+            updated.add(JCR_PREDECESSORS);\n+        }\n+\n+        if (!updated.isEmpty()) {\n+            log.info(\"Updated versionable properties {} for {}\", updated, node);\n+        }\n+    }\n+\n+    private String getLastVersion(NodeState versionHistory) {\n+        NodeState lastVersion = versionHistory.getChildNode(JCR_ROOTVERSION);\n+        for (ChildNodeEntry child : versionHistory.getChildNodeEntries()) {\n+            NodeState v = child.getNodeState();\n+            if (!isNtVersion.apply(v)) {\n+                continue;\n+            }\n+            if (v.getProperty(JCR_SUCCESSORS).count() == 0) { // no successors\n+                lastVersion = v;\n+            }\n+        }\n+        return lastVersion.getString(JCR_UUID);\n+    }\n+}\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 189, 
  "nb_skipped": 7, 
  "fix_commit": "374e3f3d", 
  "nb_failure": 0, 
  "id": "4166", 
  "linesRem": 0
}