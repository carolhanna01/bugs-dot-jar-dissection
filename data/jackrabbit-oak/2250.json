{"files": 1, "singleLine": false, "nb_error": 0, "failing_tests": ["propertyDefinitionWithExcludes(org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinitionTest)"], "nb_test": 315, "patch": "diff --git a/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/IndexDefinition.java b/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/IndexDefinition.java\nindex 9dd4b00..a89b6ae 100644\n--- a/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/IndexDefinition.java\n+++ b/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/IndexDefinition.java\n@@ -285,7 +285,8 @@ class IndexDefinition {\n     private Map<String, PropertyDefinition> collectPropertyDefns(NodeBuilder defn) {\n         Map<String, PropertyDefinition> propDefns = newHashMap();\n         NodeBuilder propNode = defn.getChildNode(LuceneIndexConstants.PROP_NODE);\n-        for (String propName : Iterables.concat(includes, orderedProps)) {\n+        //Include all immediate child nodes to 'properties' node by default\n+        for (String propName : Iterables.concat(includes, orderedProps, propNode.getChildNodeNames())) {\n             NodeBuilder propDefnNode;\n             if (relativeProps.containsKey(propName)) {\n                 propDefnNode = relativeProps.get(propName).getPropDefnNode(propNode);\n@@ -293,7 +294,7 @@ class IndexDefinition {\n                 propDefnNode = propNode.getChildNode(propName);\n             }\n \n-            if (propDefnNode.exists()) {\n+            if (propDefnNode.exists() && !propDefns.containsKey(propName)) {\n                 propDefns.put(propName, new PropertyDefinition(this, propName, propDefnNode));\n             }\n         }\n", "project": "jackrabbit-oak", "linesAdd": 3, "nb_skipped": 2, "fix_commit": "08b25cb0", "nb_failure": 1, "id": "2250", "linesRem": 2}