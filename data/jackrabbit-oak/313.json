{
  "files": 1, 
  "singleLine": false, 
  "nb_error": 0, 
  "failing_tests": [
    "testTrailingSlash(org.apache.jackrabbit.oak.namepath.NamePathMapperImplTest): expected:</a/b/c[]> but was:</a/b/c[/]>"
  ], 
  "nb_test": 229, 
  "patch": "diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/NamePathMapperImpl.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/NamePathMapperImpl.java\nindex 7bce77d..65639f1 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/NamePathMapperImpl.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/NamePathMapperImpl.java\n@@ -151,9 +151,6 @@ public class NamePathMapperImpl implements NamePathMapper {\n     }\n \n     private String getOakPath(String jcrPath, final boolean keepIndex) {\n-        final List<String> elements = new ArrayList<String>();\n-        final StringBuilder parseErrors = new StringBuilder();\n-\n         if (\"/\".equals(jcrPath)) {\n             // avoid the need to special case the root path later on\n             return \"/\";\n@@ -180,6 +177,7 @@ public class NamePathMapperImpl implements NamePathMapper {\n         boolean hasIndexBrackets = false;\n         boolean hasColon = false;\n         boolean hasNameStartingWithDot = false;\n+        boolean hasTrailingSlash = false;\n \n         char prev = 0;\n         for (int i = 0; i < length; i++) {\n@@ -193,6 +191,8 @@ public class NamePathMapperImpl implements NamePathMapper {\n                 hasColon = true;\n             } else if (c == '.' && (prev == 0 || prev == '/')) {\n                 hasNameStartingWithDot = true;\n+            } else if(c == '/' && i == (length - 1)){\n+                hasTrailingSlash = true;\n             }\n \n             prev = c;\n@@ -202,6 +202,9 @@ public class NamePathMapperImpl implements NamePathMapper {\n         if (!hasNameStartingWithDot && !hasClarkBrackets && !hasIndexBrackets) {\n             if (!hasColon || !hasSessionLocalMappings()) {\n                 if (JcrPathParser.validate(jcrPath)) {\n+                    if(hasTrailingSlash){\n+                        return jcrPath.substring(0, length - 1);\n+                    }\n                     return jcrPath;\n                 }\n                 else {\n@@ -211,6 +214,9 @@ public class NamePathMapperImpl implements NamePathMapper {\n             }\n         }\n \n+        final List<String> elements = new ArrayList<String>();\n+        final StringBuilder parseErrors = new StringBuilder();\n+\n         JcrPathParser.Listener listener = new JcrPathParser.Listener() {\n \n             @Override\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 9, 
  "nb_skipped": 1, 
  "fix_commit": "e115fd90", 
  "nb_failure": 1, 
  "id": "313", 
  "linesRem": 3
}