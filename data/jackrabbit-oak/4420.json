{"files": 4, "singleLine": false, "nb_error": 0, "failing_tests": ["validateMigration(org.apache.jackrabbit.oak.upgrade.cli.blob.FbsToFbsTest): expected:<123> but was:<null>", "validateMigration(org.apache.jackrabbit.oak.upgrade.cli.blob.CopyReferencesTest): expected:<123> but was:<null>", "validateMigration(org.apache.jackrabbit.oak.upgrade.cli.blob.FdsToFbsTest): expected:<123> but was:<null>", "validateMigration(org.apache.jackrabbit.oak.upgrade.cli.blob.FbsToFdsTest): expected:<123> but was:<null>", "validateMigration(org.apache.jackrabbit.oak.upgrade.cli.SegmentToSegmentTarTest): expected:<123> but was:<null>", "validateMigration(org.apache.jackrabbit.oak.upgrade.cli.SegmentTarToSegmentTest): expected:<123> but was:<null>", "validateMigration(org.apache.jackrabbit.oak.upgrade.cli.SegmentToSegmentTest): expected:<123> but was:<null>"], "nb_test": 128, "patch": "diff --git a/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/RepositorySidegrade.java b/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/RepositorySidegrade.java\nindex 48bc82c..386d010 100755\n--- a/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/RepositorySidegrade.java\n+++ b/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/RepositorySidegrade.java\n@@ -18,23 +18,29 @@ package org.apache.jackrabbit.oak.upgrade;\n \n import java.util.ArrayList;\n import java.util.Calendar;\n+import java.util.Comparator;\n import java.util.List;\n import java.util.Set;\n \n import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n import javax.jcr.RepositoryException;\n \n+import com.google.common.base.Function;\n import org.apache.jackrabbit.oak.Oak;\n import org.apache.jackrabbit.oak.api.CommitFailedException;\n+import org.apache.jackrabbit.oak.commons.PathUtils;\n import org.apache.jackrabbit.oak.plugins.nodetype.write.InitialContent;\n import org.apache.jackrabbit.oak.spi.commit.CommitHook;\n import org.apache.jackrabbit.oak.spi.commit.CommitInfo;\n import org.apache.jackrabbit.oak.spi.commit.EditorHook;\n import org.apache.jackrabbit.oak.spi.lifecycle.RepositoryInitializer;\n+import org.apache.jackrabbit.oak.spi.state.ChildNodeEntry;\n import org.apache.jackrabbit.oak.spi.state.NodeBuilder;\n import org.apache.jackrabbit.oak.spi.state.NodeState;\n import org.apache.jackrabbit.oak.spi.state.NodeStore;\n import org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.LoggingCompositeHook;\n+import org.apache.jackrabbit.oak.upgrade.cli.node.TarNodeStore;\n import org.apache.jackrabbit.oak.upgrade.nodestate.NameFilteringNodeState;\n import org.apache.jackrabbit.oak.upgrade.nodestate.report.LoggingReporter;\n import org.apache.jackrabbit.oak.upgrade.nodestate.report.ReportingNodeState;\n@@ -47,7 +53,10 @@ import org.slf4j.LoggerFactory;\n import static com.google.common.base.Preconditions.checkNotNull;\n import static com.google.common.collect.ImmutableSet.copyOf;\n import static com.google.common.collect.ImmutableSet.of;\n+import static com.google.common.collect.Lists.newArrayList;\n+import static com.google.common.collect.Lists.transform;\n import static com.google.common.collect.Sets.union;\n+import static java.util.Collections.sort;\n import static org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.DEFAULT_EXCLUDE_PATHS;\n import static org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.DEFAULT_INCLUDE_PATHS;\n import static org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.DEFAULT_MERGE_PATHS;\n@@ -256,14 +265,19 @@ public class RepositorySidegrade {\n     }\n \n     private void removeCheckpointReferences(NodeBuilder builder) throws CommitFailedException {\n-        // removing references to the checkpoints, \n+        // removing references to the checkpoints,\n         // which don't exist in the new repository\n         builder.setChildNode(\":async\");\n     }\n \n     private void copyState(NodeState sourceRoot, NodeBuilder targetRoot) throws CommitFailedException {\n         copyWorkspace(sourceRoot, targetRoot);\n-        removeCheckpointReferences(targetRoot);\n+\n+        if (!copyCheckpoints(targetRoot)) {\n+            LOG.info(\"Copying checkpoints is not supported for this combination of node stores\");\n+            removeCheckpointReferences(targetRoot);\n+        }\n+\n         if (!versionCopyConfiguration.skipOrphanedVersionsCopy()) {\n             copyVersionStorage(sourceRoot, targetRoot, versionCopyConfiguration);\n         }\n@@ -296,4 +310,77 @@ public class RepositorySidegrade {\n             copyProperties(sourceRoot, targetRoot);\n         }\n     }\n-}\n\\ No newline at end of file\n+\n+    private boolean copyCheckpoints(NodeBuilder targetRoot) {\n+        if (!(source instanceof TarNodeStore && target instanceof TarNodeStore)) {\n+            return false;\n+        }\n+\n+        TarNodeStore sourceTarNS = (TarNodeStore) source;\n+        TarNodeStore targetTarNS = (TarNodeStore) target;\n+\n+        NodeState srcSuperRoot = sourceTarNS.getSuperRoot();\n+        NodeBuilder builder = targetTarNS.getSuperRoot().builder();\n+\n+        String previousRoot = null;\n+        for (String checkpoint : getCheckpointPaths(srcSuperRoot)) {\n+            // copy the checkpoint without the root\n+            NodeStateCopier.builder()\n+                    .include(checkpoint)\n+                    .exclude(checkpoint + \"/root\")\n+                    .copy(srcSuperRoot, builder);\n+\n+            // reference the previousRoot or targetRoot as a new checkpoint root\n+            NodeState baseRoot;\n+            if (previousRoot == null) {\n+                baseRoot = targetRoot.getNodeState();\n+            } else {\n+                baseRoot = getBuilder(builder, previousRoot).getNodeState();\n+            }\n+            NodeBuilder targetParent = getBuilder(builder, checkpoint);\n+            targetParent.setChildNode(\"root\", baseRoot);\n+            previousRoot = checkpoint + \"/root\";\n+\n+            // apply diff changes\n+            NodeStateCopier.builder()\n+                    .include(checkpoint + \"/root\")\n+                    .copy(srcSuperRoot, builder);\n+        }\n+\n+        targetTarNS.setSuperRoot(builder);\n+        return true;\n+   }\n+\n+    /**\n+     * Return all checkpoint paths, sorted by their \"created\" property, descending.\n+     *\n+     * @param superRoot\n+     * @return\n+     */\n+    private static List<String> getCheckpointPaths(NodeState superRoot) {\n+        List<ChildNodeEntry> checkpoints = newArrayList(superRoot.getChildNode(\"checkpoints\").getChildNodeEntries().iterator());\n+        sort(checkpoints, new Comparator<ChildNodeEntry>() {\n+            @Override\n+            public int compare(ChildNodeEntry o1, ChildNodeEntry o2) {\n+                long c1 = o1.getNodeState().getLong(\"created\");\n+                long c2 = o1.getNodeState().getLong(\"created\");\n+                return -Long.compare(c1, c2);\n+            }\n+        });\n+        return transform(checkpoints, new Function<ChildNodeEntry, String>() {\n+            @Nullable\n+            @Override\n+            public String apply(@Nullable ChildNodeEntry input) {\n+                return \"/checkpoints/\" + input.getName();\n+            }\n+        });\n+    }\n+\n+    private static NodeBuilder getBuilder(NodeBuilder root, String path) {\n+        NodeBuilder builder = root;\n+        for (String element : PathUtils.elements(path)) {\n+            builder = builder.child(element);\n+        }\n+        return builder;\n+    }\n+}\ndiff --git a/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/cli/node/SegmentFactory.java b/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/cli/node/SegmentFactory.java\nindex 43a26b5..94aeb49 100644\n--- a/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/cli/node/SegmentFactory.java\n+++ b/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/cli/node/SegmentFactory.java\n@@ -20,14 +20,20 @@ import java.io.Closeable;\n import java.io.File;\n import java.io.IOException;\n \n+import org.apache.jackrabbit.oak.plugins.segment.SegmentNodeBuilder;\n+import org.apache.jackrabbit.oak.plugins.segment.SegmentNodeState;\n import org.apache.jackrabbit.oak.plugins.segment.SegmentNodeStore;\n import org.apache.jackrabbit.oak.plugins.segment.file.FileStore;\n import org.apache.jackrabbit.oak.plugins.segment.file.FileStore.Builder;\n import org.apache.jackrabbit.oak.spi.blob.BlobStore;\n+import org.apache.jackrabbit.oak.spi.state.NodeBuilder;\n+import org.apache.jackrabbit.oak.spi.state.NodeState;\n import org.apache.jackrabbit.oak.spi.state.NodeStore;\n \n import com.google.common.io.Closer;\n \n+import static com.google.common.base.Preconditions.checkArgument;\n+\n public class SegmentFactory implements NodeStoreFactory {\n \n     private final File dir;\n@@ -49,9 +55,27 @@ public class SegmentFactory implements NodeStoreFactory {\n             builder.withBlobStore(blobStore);\n         }\n         builder.withMaxFileSize(256).withMemoryMapping(mmap);\n-        FileStore fs = builder.build();\n+        final FileStore fs = builder.build();\n         closer.register(asCloseable(fs));\n-        return SegmentNodeStore.builder(fs).build();\n+        return new TarNodeStore(SegmentNodeStore.builder(fs).build(), new TarNodeStore.SuperRootProvider() {\n+            @Override\n+            public void setSuperRoot(NodeBuilder builder) {\n+                checkArgument(builder instanceof SegmentNodeBuilder);\n+                SegmentNodeBuilder segmentBuilder = (SegmentNodeBuilder) builder;\n+                SegmentNodeState lastRoot = (SegmentNodeState) getSuperRoot();\n+\n+                if (!lastRoot.getRecordId().equals(((SegmentNodeState) segmentBuilder.getBaseState()).getRecordId())) {\n+                    throw new IllegalArgumentException(\"The new head is out of date\");\n+                }\n+\n+                fs.setHead(lastRoot, ((SegmentNodeBuilder) builder).getNodeState());\n+            }\n+\n+            @Override\n+            public NodeState getSuperRoot() {\n+                return fs.getHead();\n+            }\n+        });\n     }\n \n     public File getRepositoryDir() {\ndiff --git a/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/cli/node/SegmentTarFactory.java b/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/cli/node/SegmentTarFactory.java\nindex caa53dd..7714b51 100644\n--- a/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/cli/node/SegmentTarFactory.java\n+++ b/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/cli/node/SegmentTarFactory.java\n@@ -16,6 +16,7 @@\n  */\n package org.apache.jackrabbit.oak.upgrade.cli.node;\n \n+import static com.google.common.base.Preconditions.checkArgument;\n import static org.apache.jackrabbit.oak.segment.file.FileStoreBuilder.fileStoreBuilder;\n \n import java.io.Closeable;\n@@ -23,10 +24,14 @@ import java.io.File;\n import java.io.IOException;\n \n import com.google.common.io.Closer;\n+import org.apache.jackrabbit.oak.segment.SegmentNodeBuilder;\n+import org.apache.jackrabbit.oak.segment.SegmentNodeState;\n import org.apache.jackrabbit.oak.segment.SegmentNodeStoreBuilders;\n import org.apache.jackrabbit.oak.segment.file.FileStore;\n import org.apache.jackrabbit.oak.segment.file.FileStoreBuilder;\n import org.apache.jackrabbit.oak.spi.blob.BlobStore;\n+import org.apache.jackrabbit.oak.spi.state.NodeBuilder;\n+import org.apache.jackrabbit.oak.spi.state.NodeState;\n import org.apache.jackrabbit.oak.spi.state.NodeStore;\n \n public class SegmentTarFactory implements NodeStoreFactory {\n@@ -45,14 +50,33 @@ public class SegmentTarFactory implements NodeStoreFactory {\n \n     @Override\n     public NodeStore create(BlobStore blobStore, Closer closer) throws IOException {\n-        FileStoreBuilder builder = fileStoreBuilder(new File(dir, \"segmentstore\"));\n+        final FileStoreBuilder builder = fileStoreBuilder(new File(dir, \"segmentstore\"));\n         if (blobStore != null) {\n             builder.withBlobStore(blobStore);\n         }\n         builder.withMaxFileSize(256).withMemoryMapping(mmap);\n-        FileStore fs = builder.build();\n+        final FileStore fs = builder.build();\n         closer.register(asCloseable(fs));\n-        return SegmentNodeStoreBuilders.builder(fs).build();\n+\n+        return new TarNodeStore(SegmentNodeStoreBuilders.builder(fs).build(), new TarNodeStore.SuperRootProvider() {\n+            @Override\n+            public void setSuperRoot(NodeBuilder builder) {\n+                checkArgument(builder instanceof SegmentNodeBuilder);\n+                SegmentNodeBuilder segmentBuilder = (SegmentNodeBuilder) builder;\n+                SegmentNodeState lastRoot = (SegmentNodeState) getSuperRoot();\n+\n+                if (!lastRoot.getRecordId().equals(((SegmentNodeState) segmentBuilder.getBaseState()).getRecordId())) {\n+                    throw new IllegalArgumentException(\"The new head is out of date\");\n+                }\n+\n+                fs.getRevisions().setHead(lastRoot.getRecordId(), segmentBuilder.getNodeState().getRecordId());\n+            }\n+\n+            @Override\n+            public NodeState getSuperRoot() {\n+                return fs.getReader().readHeadState();\n+            }\n+        });\n     }\n \n     public File getRepositoryDir() {\ndiff --git a/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/cli/node/TarNodeStore.java b/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/cli/node/TarNodeStore.java\nnew file mode 100644\nindex 0000000..e83cfcc\n--- /dev/null\n+++ b/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/cli/node/TarNodeStore.java\n@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.jackrabbit.oak.upgrade.cli.node;\n+\n+import org.apache.jackrabbit.oak.api.Blob;\n+import org.apache.jackrabbit.oak.api.CommitFailedException;\n+import org.apache.jackrabbit.oak.spi.commit.CommitHook;\n+import org.apache.jackrabbit.oak.spi.commit.CommitInfo;\n+import org.apache.jackrabbit.oak.spi.state.NodeBuilder;\n+import org.apache.jackrabbit.oak.spi.state.NodeState;\n+import org.apache.jackrabbit.oak.spi.state.NodeStore;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Map;\n+\n+public class TarNodeStore implements NodeStore {\n+\n+    private final NodeStore ns;\n+\n+    private final SuperRootProvider superRootProvider;\n+\n+    public TarNodeStore(NodeStore ns, SuperRootProvider superRootProvider) {\n+        this.ns = ns;\n+        this.superRootProvider = superRootProvider;\n+    }\n+\n+    public void setSuperRoot(NodeBuilder builder) {\n+        superRootProvider.setSuperRoot(builder);\n+    }\n+\n+    public NodeState getSuperRoot() {\n+        return superRootProvider.getSuperRoot();\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public NodeState getRoot() {\n+        return ns.getRoot();\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public NodeState merge(@Nonnull NodeBuilder builder, @Nonnull CommitHook commitHook, @Nonnull CommitInfo info) throws CommitFailedException {\n+        return ns.merge(builder, commitHook, info);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public NodeState rebase(@Nonnull NodeBuilder builder) {\n+        return ns.rebase(builder);\n+    }\n+\n+    @Override\n+    public NodeState reset(@Nonnull NodeBuilder builder) {\n+        return ns.reset(builder);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public Blob createBlob(InputStream inputStream) throws IOException {\n+        return ns.createBlob(inputStream);\n+    }\n+\n+    @Override\n+    public Blob getBlob(@Nonnull String reference) {\n+        return ns.getBlob(reference);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String checkpoint(long lifetime, @Nonnull Map<String, String> properties) {\n+        return checkpoint(lifetime, properties);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String checkpoint(long lifetime) {\n+        return checkpoint(lifetime);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public Map<String, String> checkpointInfo(@Nonnull String checkpoint) {\n+        return checkpointInfo(checkpoint);\n+    }\n+\n+    @Override\n+    public NodeState retrieve(@Nonnull String checkpoint) {\n+        return retrieve(checkpoint);\n+    }\n+\n+    @Override\n+    public boolean release(@Nonnull String checkpoint) {\n+        return release(checkpoint);\n+    }\n+\n+    interface SuperRootProvider {\n+\n+        void setSuperRoot(NodeBuilder builder);\n+\n+        NodeState getSuperRoot();\n+\n+    }\n+}\n", "project": "jackrabbit-oak", "linesAdd": 263, "nb_skipped": 7, "fix_commit": "d645112f", "nb_failure": 7, "id": "4420", "linesRem": 8}