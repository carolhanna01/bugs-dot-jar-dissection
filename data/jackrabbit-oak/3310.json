{"nb_failure": 1, "nb_error": 0, "failing_tests": ["testReadOnlyAfterCheckin(org.apache.jackrabbit.oak.jcr.version.VersionableTest): setProperty(..., null) must fail on a checked-in node"], "patch": "diff --git a/oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/session/NodeImpl.java b/oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/session/NodeImpl.java\nindex 71f12f9..07e0ae3 100644\n--- a/oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/session/NodeImpl.java\n+++ b/oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/session/NodeImpl.java\n@@ -1424,6 +1424,14 @@ public class NodeImpl<T extends NodeDelegate> extends ItemImpl<T> implements Nod\n             throws RepositoryException {\n         final String oakName = getOakName(checkNotNull(jcrName));\n         return perform(new ItemWriteOperation<Property>(\"internalRemoveProperty\") {\n+            @Override\n+            public void checkPreconditions() throws RepositoryException {\n+                super.checkPreconditions();\n+                if (!isCheckedOut()) {\n+                    throw new VersionException(\n+                            \"Cannot remove property. Node is checked in.\");\n+                }\n+            }\n             @Nonnull\n             @Override\n             public Property perform() throws RepositoryException {\ndiff --git a/oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/session/PropertyImpl.java b/oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/session/PropertyImpl.java\nindex 52ca344..7a54197 100644\n--- a/oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/session/PropertyImpl.java\n+++ b/oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/session/PropertyImpl.java\n@@ -37,6 +37,7 @@ import javax.jcr.Value;\n import javax.jcr.ValueFactory;\n import javax.jcr.ValueFormatException;\n import javax.jcr.nodetype.PropertyDefinition;\n+import javax.jcr.version.VersionException;\n \n import org.apache.jackrabbit.oak.api.Tree.Status;\n import org.apache.jackrabbit.oak.api.Type;\n@@ -110,6 +111,15 @@ public class PropertyImpl extends ItemImpl<PropertyDelegate> implements Property\n     public void remove() throws RepositoryException {\n         sessionDelegate.performVoid(new ItemWriteOperation(\"remove\") {\n             @Override\n+            public void checkPreconditions() throws RepositoryException {\n+                super.checkPreconditions();\n+                if (!getParent().isCheckedOut()) {\n+                    throw new VersionException(\n+                            \"Cannot set property. Node is checked in.\");\n+                }\n+            }\n+\n+            @Override\n             public void performVoid() {\n                 dlg.remove();\n             }\n@@ -451,6 +461,15 @@ public class PropertyImpl extends ItemImpl<PropertyDelegate> implements Property\n             throws RepositoryException {\n         sessionDelegate.performVoid(new ItemWriteOperation(\"internalSetValue\") {\n             @Override\n+            public void checkPreconditions() throws RepositoryException {\n+                super.checkPreconditions();\n+                if (!getParent().isCheckedOut()) {\n+                    throw new VersionException(\n+                            \"Cannot set property. Node is checked in.\");\n+                }\n+            }\n+\n+            @Override\n             public void performVoid() throws RepositoryException {\n                 Type<?> type = dlg.getPropertyState().getType();\n                 if (type.isArray()) {\n@@ -478,6 +497,15 @@ public class PropertyImpl extends ItemImpl<PropertyDelegate> implements Property\n \n         sessionDelegate.performVoid(new ItemWriteOperation(\"internalSetValue\") {\n             @Override\n+            public void checkPreconditions() throws RepositoryException {\n+                super.checkPreconditions();\n+                if (!getParent().isCheckedOut()) {\n+                    throw new VersionException(\n+                            \"Cannot set property. Node is checked in.\");\n+                }\n+            }\n+\n+            @Override\n             public void performVoid() throws RepositoryException {\n                 Type<?> type = dlg.getPropertyState().getType();\n                 if (!type.isArray()) {\n", "nb_test": 1413, "nb_skipped": 1, "fix_commit": "4416a9f8", "id": "3310"}