{"files": 2, "singleLine": false, "nb_error": 0, "failing_tests": ["recoverBranchCommit(org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreTest)"], "nb_test": 1975, "patch": "diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/LastRevRecoveryAgent.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/LastRevRecoveryAgent.java\nindex 899995a..cc57477 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/LastRevRecoveryAgent.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/LastRevRecoveryAgent.java\n@@ -289,7 +289,8 @@ public class LastRevRecoveryAgent {\n         // if found then lastRev needs to be fixed\n         for (Revision rev : revs) {\n             if (rev.compareRevisionTime(currentLastRev) > 0) {\n-                if (doc.isCommitted(rev)) {\n+                rev = doc.getCommitRevision(rev);\n+                if (rev != null) {\n                     return rev;\n                 }\n             } else {\ndiff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/NodeDocument.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/NodeDocument.java\nindex 388cca2..912237b 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/NodeDocument.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/NodeDocument.java\n@@ -545,6 +545,26 @@ public final class NodeDocument extends Document implements CachedNodeDocument{\n     }\n \n     /**\n+     * Returns the commit revision for the change with the given revision.\n+     *\n+     * @param revision the revision of a change.\n+     * @return the commit revision of the change or {@code null} if the change\n+     *          is not committed or unknown.\n+     */\n+    @CheckForNull\n+    public Revision getCommitRevision(@Nonnull Revision revision) {\n+        NodeDocument commitRoot = getCommitRoot(checkNotNull(revision));\n+        if (commitRoot == null) {\n+            return null;\n+        }\n+        String value = commitRoot.getCommitValue(revision);\n+        if (Utils.isCommitted(value)) {\n+            return Utils.resolveCommitRevision(revision, value);\n+        }\n+        return null;\n+    }\n+\n+    /**\n      * Returns <code>true</code> if this document contains an entry for the\n      * given <code>revision</code> in the {@link #REVISIONS} map. Please note\n      * that an entry in the {@link #REVISIONS} map does not necessarily mean\n", "project": "jackrabbit-oak", "linesAdd": 22, "nb_skipped": 9, "fix_commit": "f4d5bbe1", "nb_failure": 1, "id": "2308", "linesRem": 1}