{
  "files": 1, 
  "singleLine": false, 
  "nb_error": 0, 
  "failing_tests": [
    "testFulltext(org.apache.jackrabbit.oak.jcr.query.QueryFulltextTest): expected:<...:base] /* aggregate [:fulltext:hallo :fulltext:hello] ft:(text:\"hallo\" OR...> but was:<...:base] /* aggregate [+(:fulltext:hallo :fulltext:hello) +text:{* TO *}] ft:(text:\"hallo\" OR...>"
  ], 
  "nb_test": 245, 
  "patch": "diff --git a/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/LuceneIndex.java b/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/LuceneIndex.java\nindex 8be3395..8889094 100644\n--- a/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/LuceneIndex.java\n+++ b/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/LuceneIndex.java\n@@ -475,6 +475,13 @@ public class LuceneIndex implements FulltextQueryIndex {\n         }\n \n         for (PropertyRestriction pr : filter.getPropertyRestrictions()) {\n+\n+            if (pr.first == null && pr.last == null) {\n+                // ignore property existence checks, Lucene can't to 'property\n+                // is not null' queries (OAK-1208)\n+                continue;\n+            }\n+\n             String name = pr.propertyName;\n             if (name.contains(\"/\")) {\n                 // lucene cannot handle child-level property restrictions\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 7, 
  "nb_skipped": 1, 
  "fix_commit": "cb3ac20d", 
  "nb_failure": 1, 
  "id": "1208", 
  "linesRem": 0
}