{"nb_failure": 1, "nb_error": 0, "failing_tests": ["testInvalidJcrPaths(org.apache.jackrabbit.oak.namepath.NamePathMapperImplTest): foo:bar]baz"], "patch": "diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/NamePathMapperImpl.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/NamePathMapperImpl.java\nindex a257e69..9108966 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/NamePathMapperImpl.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/NamePathMapperImpl.java\n@@ -239,46 +239,49 @@ public class NamePathMapperImpl implements NamePathMapper {\n         int colon = -1; // index of the last colon in the path\n \n         switch (path.charAt(0)) {\n-        case '{': // possibly an expanded name\n-        case '[': // starts with an identifier\n-        case '.': // possibly \".\" or \"..\"\n-        case ':': // colon as the first character\n-            return true;\n-        case '/':\n-            if (length == 1) {\n-                return false; // the root path\n-            }\n-            slash = 0;\n-            break;\n-        }\n-\n-        for (int i = 1; i < length; i++) {\n-            switch (path.charAt(i)) {\n             case '{': // possibly an expanded name\n-            case '[': // possibly an index\n+            case '[': // starts with an identifier\n+            case '.': // possibly \".\" or \"..\"\n+            case ':': // colon as the first character\n                 return true;\n-            case '.':\n-                if (i == slash + 1) {\n-                    return true; // possibly \".\" or \"..\"\n-                }\n-                break;\n-            case ':':\n-                if (i == slash + 1              // \"x/:y\"\n-                        || i == colon + i       // \"x::y\"\n-                        || colon > slash        // \"x:y:z\"\n-                        || i + 1 == length) {   // \"x:\"\n-                    return true;\n-                }\n-                colon = i;\n-                break;\n             case '/':\n-                if (i == slash + 1              // \"x//y\"\n-                        || i == colon + i       // \"x:/y\"\n-                        || i + 1 == length) {   // \"x/\"\n-                    return true;\n+                if (length == 1) {\n+                    return false; // the root path\n                 }\n-                slash = i;\n+                slash = 0;\n                 break;\n+        }\n+\n+        for (int i = 1; i < length; i++) {\n+            switch (path.charAt(i)) {\n+                case '{': // possibly an expanded name\n+                case '[': // possibly an index\n+                case ']': // illegal character if not part of index\n+                case '|': // illegal character\n+                case '*': // illegal character\n+                    return true;\n+                case '.':\n+                    if (i == slash + 1) {\n+                        return true; // possibly \".\" or \"..\"\n+                    }\n+                    break;\n+                case ':':\n+                    if (i == slash + 1              // \"x/:y\"\n+                            || i == colon + i       // \"x::y\"\n+                            || colon > slash        // \"x:y:z\"\n+                            || i + 1 == length) {   // \"x:\"\n+                        return true;\n+                    }\n+                    colon = i;\n+                    break;\n+                case '/':\n+                    if (i == slash + 1              // \"x//y\"\n+                            || i == colon + i       // \"x:/y\"\n+                            || i + 1 == length) {   // \"x/\"\n+                        return true;\n+                    }\n+                    slash = i;\n+                    break;\n             }\n         }\n \n", "nb_test": 1720, "nb_skipped": 8, "fix_commit": "c05cec12", "id": "1168"}