{
  "project": "kafka",
  "jira_id": "1984",
  "commit": "c82afddc",
  "classification": {
    "singleLine": false
  },
  "patch": "diff --git a/clients/src/main/java/org/apache/kafka/clients/producer/internals/Partitioner.java b/clients/src/main/java/org/apache/kafka/clients/producer/internals/Partitioner.java\nindex 8112e6d89d..dfb936d8f0 100644\n--- a/clients/src/main/java/org/apache/kafka/clients/producer/internals/Partitioner.java\n+++ b/clients/src/main/java/org/apache/kafka/clients/producer/internals/Partitioner.java\n@@ -56,14 +56,15 @@ public class Partitioner {\n                                                    + \"].\");\n             return partition;\n         } else if (key == null) {\n-            // choose the next available node in a round-robin fashion\n-            for (int i = 0; i < numPartitions; i++) {\n-                int part = Utils.abs(counter.getAndIncrement()) % numPartitions;\n-                if (partitions.get(part).leader() != null)\n-                    return part;\n-            }\n+            int nextValue = counter.getAndIncrement();\n+            List<PartitionInfo> availablePartitions = cluster.availablePartitionsForTopic(topic);\n+            if (availablePartitions.size() > 0) {\n+                int part = Utils.abs(nextValue) % availablePartitions.size();\n+                return availablePartitions.get(part).partition();\n+            } else {\n                 // no partitions are available, give a non-available partition\n-            return Utils.abs(counter.getAndIncrement()) % numPartitions;\n+                return Utils.abs(nextValue) % numPartitions;\n+            }\n         } else {\n             // hash the key to choose a partition\n             return Utils.abs(Utils.murmur2(key)) % numPartitions;\ndiff --git a/clients/src/main/java/org/apache/kafka/common/Cluster.java b/clients/src/main/java/org/apache/kafka/common/Cluster.java\nindex 8fcd2916f1..60594a7dce 100644\n--- a/clients/src/main/java/org/apache/kafka/common/Cluster.java\n+++ b/clients/src/main/java/org/apache/kafka/common/Cluster.java\n@@ -25,6 +25,7 @@ public final class Cluster {\n     private final List<Node> nodes;\n     private final Map<TopicPartition, PartitionInfo> partitionsByTopicPartition;\n     private final Map<String, List<PartitionInfo>> partitionsByTopic;\n+    private final Map<String, List<PartitionInfo>> availablePartitionsByTopic;\n     private final Map<Integer, List<PartitionInfo>> partitionsByNode;\n     private final Map<Integer, Node> nodesById;\n \n@@ -68,8 +69,18 @@ public final class Cluster {\n             }\n         }\n         this.partitionsByTopic = new HashMap<String, List<PartitionInfo>>(partsForTopic.size());\n-        for (Map.Entry<String, List<PartitionInfo>> entry : partsForTopic.entrySet())\n-            this.partitionsByTopic.put(entry.getKey(), Collections.unmodifiableList(entry.getValue()));\n+        this.availablePartitionsByTopic = new HashMap<String, List<PartitionInfo>>(partsForTopic.size());\n+        for (Map.Entry<String, List<PartitionInfo>> entry : partsForTopic.entrySet()) {\n+            String topic = entry.getKey();\n+            List<PartitionInfo> partitionList = entry.getValue();\n+            this.partitionsByTopic.put(topic, Collections.unmodifiableList(partitionList));\n+            List<PartitionInfo> availablePartitions = new ArrayList<PartitionInfo>();\n+            for (PartitionInfo part : partitionList) {\n+                if (part.leader() != null)\n+                    availablePartitions.add(part);\n+            }\n+            this.availablePartitionsByTopic.put(topic, Collections.unmodifiableList(availablePartitions));\n+        }\n         this.partitionsByNode = new HashMap<Integer, List<PartitionInfo>>(partsForNode.size());\n         for (Map.Entry<Integer, List<PartitionInfo>> entry : partsForNode.entrySet())\n             this.partitionsByNode.put(entry.getKey(), Collections.unmodifiableList(entry.getValue()));\n@@ -143,6 +154,15 @@ public final class Cluster {\n         return this.partitionsByTopic.get(topic);\n     }\n \n+    /**\n+     * Get the list of available partitions for this topic\n+     * @param topic The topic name\n+     * @return A list of partitions\n+     */\n+    public List<PartitionInfo> availablePartitionsForTopic(String topic) {\n+        return this.availablePartitionsByTopic.get(topic);\n+    }\n+\n     /**\n      * Get the list of partitions whose leader is this node\n      * @param nodeId The node id\n",
  "files": 2,
  "linesAdd": 30,
  "linesRem": 9,
  "failing_tests": [],
  "nb_test": 0,
  "nb_failure": 0,
  "nb_error": 0,
  "nb_skipped": 0
}