{
  "files": 5, 
  "singleLine": false, 
  "nb_error": 0, 
  "failing_tests": [
    "testIndexedUrlMountedPageWithComponentThatUsesUrlForResourceListener(org.apache.wicket.request.target.coding.IndexParamWithStatelessIFrameTest)", 
    "testIndexedLink(org.apache.wicket.markup.html.link.IndexedParamUrlCodingTest)", 
    "testStatelessDefaultUrlCodingStrategy(org.apache.wicket.request.target.coding.StatelessStatefullUrlCodingStrategyTest)", 
    "testStatefullDefaultUrlCodingStrategy(org.apache.wicket.request.target.coding.StatelessStatefullUrlCodingStrategyTest)", 
    "testStatelessIndexedUrlCodingStrategy(org.apache.wicket.request.target.coding.StatelessStatefullUrlCodingStrategyTest)", 
    "testStatefullIndexedUrlCodingStrategy(org.apache.wicket.request.target.coding.StatelessStatefullUrlCodingStrategyTest)", 
    "testStatelessHybridUrlCodingStrategy(org.apache.wicket.request.target.coding.StatelessStatefullUrlCodingStrategyTest)", 
    "testStatefullHybridUrlCodingStrategy(org.apache.wicket.request.target.coding.StatelessStatefullUrlCodingStrategyTest)", 
    "testAppendParametersAppendingStringBufferMap1(org.apache.wicket.request.target.coding.MixedParamUrlCodingStrategyTest)", 
    "testAppendParametersAppendingStringBufferMap2(org.apache.wicket.request.target.coding.MixedParamUrlCodingStrategyTest)", 
    "testAppendParametersAppendingStringBufferMap5(org.apache.wicket.request.target.coding.MixedParamUrlCodingStrategyTest)", 
    "testAppendParametersAppendingStringBufferMap6(org.apache.wicket.request.target.coding.MixedParamUrlCodingStrategyTest)", 
    "testPage(org.apache.wicket.util.parse.metapattern.parsers.IndexedParamTest)", 
    "testStatelessComponentPageWithMount(org.apache.wicket.stateless.StatelessComponentTest)", 
    "testStatelessComponentPageWithParamsWithMount(org.apache.wicket.stateless.StatelessComponentTest)", 
    "testStatelessComponentPageWithParamsWithIndexMount(org.apache.wicket.stateless.StatelessComponentTest)"
  ], 
  "nb_test": 763, 
  "patch": "diff --git a/wicket/src/main/java/org/apache/wicket/request/target/coding/AbstractRequestTargetUrlCodingStrategy.java b/wicket/src/main/java/org/apache/wicket/request/target/coding/AbstractRequestTargetUrlCodingStrategy.java\nindex b1d26e9..5631502 100644\n--- a/wicket/src/main/java/org/apache/wicket/request/target/coding/AbstractRequestTargetUrlCodingStrategy.java\n+++ b/wicket/src/main/java/org/apache/wicket/request/target/coding/AbstractRequestTargetUrlCodingStrategy.java\n@@ -83,25 +83,27 @@ public abstract class AbstractRequestTargetUrlCodingStrategy\n \t * @param parameters\n \t *            Map object to be encoded\n \t */\n-\tprotected void appendParameters(AppendingStringBuffer url, Map<?,?> parameters)\n+\tprotected void appendParameters(AppendingStringBuffer url, Map<?, ?> parameters)\n \t{\n \t\tif (parameters != null && parameters.size() > 0)\n \t\t{\n \t\t\tfor (Entry<?, ?> entry1 : parameters.entrySet())\n \t\t\t{\n-\t\t\t\tObject value = ((Entry<?, ?>) entry1).getValue();\n+\t\t\t\tObject value = ((Entry<?, ?>)entry1).getValue();\n \t\t\t\tif (value != null)\n \t\t\t\t{\n \t\t\t\t\tif (value instanceof String[])\n \t\t\t\t\t{\n-\t\t\t\t\t\tString[] values = (String[]) value;\n+\t\t\t\t\t\tString[] values = (String[])value;\n \t\t\t\t\t\tfor (String value1 : values)\n \t\t\t\t\t\t{\n-\t\t\t\t\t\t\tappendValue(url, ((Entry<?, ?>) entry1).getKey().toString(), value1);\n+\t\t\t\t\t\t\tappendValue(url, ((Entry<?, ?>)entry1).getKey().toString(), value1);\n \t\t\t\t\t\t}\n-\t\t\t\t\t} else\n+\t\t\t\t\t}\n+\t\t\t\t\telse\n \t\t\t\t\t{\n-\t\t\t\t\t\tappendValue(url, ((Entry<?, ?>) entry1).getKey().toString(), value.toString());\n+\t\t\t\t\t\tappendValue(url, ((Entry<?, ?>)entry1).getKey().toString(),\n+\t\t\t\t\t\t\tvalue.toString());\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n@@ -117,7 +119,7 @@ public abstract class AbstractRequestTargetUrlCodingStrategy\n \t\t\t{\n \t\t\t\turl.append(\"/\");\n \t\t\t}\n-\t\t\turl.append(key).append(\"/\").append(escapedValue).append(\"/\");\n+\t\t\turl.append(key).append(\"/\").append(escapedValue);\n \t\t}\n \t}\n \n@@ -130,7 +132,7 @@ public abstract class AbstractRequestTargetUrlCodingStrategy\n \t *            query string parameters\n \t * @return Parameters created from the url fragment and query string\n \t */\n-\tprotected ValueMap decodeParameters(String urlFragment, Map<String,Object> urlParameters)\n+\tprotected ValueMap decodeParameters(String urlFragment, Map<String, Object> urlParameters)\n \t{\n \t\t// Hack off any leading slash\n \t\tif (urlFragment.startsWith(\"/\"))\ndiff --git a/wicket/src/main/java/org/apache/wicket/request/target/coding/IndexedHybridUrlCodingStrategy.java b/wicket/src/main/java/org/apache/wicket/request/target/coding/IndexedHybridUrlCodingStrategy.java\nindex 4a46b34..2f3ae49 100644\n--- a/wicket/src/main/java/org/apache/wicket/request/target/coding/IndexedHybridUrlCodingStrategy.java\n+++ b/wicket/src/main/java/org/apache/wicket/request/target/coding/IndexedHybridUrlCodingStrategy.java\n@@ -45,6 +45,7 @@ public class IndexedHybridUrlCodingStrategy extends HybridUrlCodingStrategy\n \t\tsuper(mountPath, pageClass);\r\n \t}\r\n \r\n+\t@Override\r\n \tprotected void appendParameters(AppendingStringBuffer url, Map parameters)\r\n \t{\r\n \t\tint i = 0;\r\n@@ -55,7 +56,7 @@ public class IndexedHybridUrlCodingStrategy extends HybridUrlCodingStrategy\n \t\t\t{\r\n \t\t\t\turl.append(\"/\");\r\n \t\t\t}\r\n-\t\t\turl.append(urlEncodePathComponent(value)).append(\"/\");\r\n+\t\t\turl.append(urlEncodePathComponent(value));\r\n \t\t\ti++;\r\n \t\t}\r\n \r\n@@ -68,18 +69,19 @@ public class IndexedHybridUrlCodingStrategy extends HybridUrlCodingStrategy\n \t\t\t{\r\n \t\t\t\turl.append(\"/\");\r\n \t\t\t}\r\n-\t\t\turl.append(WebRequestCodingStrategy.PAGEMAP).append(\"/\").append(urlEncodePathComponent(pageMap))\r\n-\t\t\t\t\t.append(\"/\");\r\n+\t\t\turl.append(WebRequestCodingStrategy.PAGEMAP).append(\"/\").append(\r\n+\t\t\t\turlEncodePathComponent(pageMap));\r\n \t\t}\r\n \r\n \t\tif (i != parameters.size())\r\n \t\t{\r\n \t\t\tthrow new WicketRuntimeException(\r\n-\t\t\t\t\t\"Not all parameters were encoded. Make sure all parameter names are integers in consecutive order starting with zero. Current parameter names are: \" +\r\n-\t\t\t\t\t\t\tparameters.keySet().toString());\r\n+\t\t\t\t\"Not all parameters were encoded. Make sure all parameter names are integers in consecutive order starting with zero. Current parameter names are: \" +\r\n+\t\t\t\t\tparameters.keySet().toString());\r\n \t\t}\r\n \t}\r\n \r\n+\t@Override\r\n \tprotected ValueMap decodeParameters(String urlFragment, Map urlParameters)\r\n \t{\r\n \t\tPageParameters params = new PageParameters();\r\n@@ -102,8 +104,8 @@ public class IndexedHybridUrlCodingStrategy extends HybridUrlCodingStrategy\n \t\t\tif (WebRequestCodingStrategy.PAGEMAP.equals(parts[i]))\r\n \t\t\t{\r\n \t\t\t\ti++;\r\n-\t\t\t\tparams.put(WebRequestCodingStrategy.PAGEMAP, WebRequestCodingStrategy\r\n-\t\t\t\t\t\t.decodePageMapName(urlDecodePathComponent(parts[i])));\r\n+\t\t\t\tparams.put(WebRequestCodingStrategy.PAGEMAP,\r\n+\t\t\t\t\tWebRequestCodingStrategy.decodePageMapName(urlDecodePathComponent(parts[i])));\r\n \t\t\t}\r\n \t\t\telse\r\n \t\t\t{\r\ndiff --git a/wicket/src/main/java/org/apache/wicket/request/target/coding/IndexedParamUrlCodingStrategy.java b/wicket/src/main/java/org/apache/wicket/request/target/coding/IndexedParamUrlCodingStrategy.java\nindex 5c97510..d6c5c1b 100644\n--- a/wicket/src/main/java/org/apache/wicket/request/target/coding/IndexedParamUrlCodingStrategy.java\n+++ b/wicket/src/main/java/org/apache/wicket/request/target/coding/IndexedParamUrlCodingStrategy.java\n@@ -90,7 +90,7 @@ public class IndexedParamUrlCodingStrategy extends BookmarkablePageRequestTarget\n \t\t\t{\n \t\t\t\turl.append(\"/\");\n \t\t\t}\n-\t\t\turl.append(urlEncodePathComponent(value)).append(\"/\");\n+\t\t\turl.append(urlEncodePathComponent(value));\n \t\t\ti++;\n \t\t}\n \n@@ -104,7 +104,7 @@ public class IndexedParamUrlCodingStrategy extends BookmarkablePageRequestTarget\n \t\t\t\turl.append(\"/\");\n \t\t\t}\n \t\t\turl.append(WebRequestCodingStrategy.PAGEMAP).append(\"/\").append(\n-\t\t\t\turlEncodePathComponent(pageMap)).append(\"/\");\n+\t\t\t\turlEncodePathComponent(pageMap));\n \t\t}\n \n \t\tString intface = (String)parameters.get(WebRequestCodingStrategy.INTERFACE_PARAMETER_NAME);\n@@ -116,7 +116,7 @@ public class IndexedParamUrlCodingStrategy extends BookmarkablePageRequestTarget\n \t\t\t\turl.append(\"/\");\n \t\t\t}\n \t\t\turl.append(WebRequestCodingStrategy.INTERFACE_PARAMETER_NAME).append(\"/\").append(\n-\t\t\t\turlEncodePathComponent(intface)).append(\"/\");\n+\t\t\t\turlEncodePathComponent(intface));\n \t\t}\n \t\tif (i != parameters.size())\n \t\t{\ndiff --git a/wicket/src/main/java/org/apache/wicket/request/target/coding/MixedParamUrlCodingStrategy.java b/wicket/src/main/java/org/apache/wicket/request/target/coding/MixedParamUrlCodingStrategy.java\nindex 9788196..388a0df 100644\n--- a/wicket/src/main/java/org/apache/wicket/request/target/coding/MixedParamUrlCodingStrategy.java\n+++ b/wicket/src/main/java/org/apache/wicket/request/target/coding/MixedParamUrlCodingStrategy.java\n@@ -129,7 +129,11 @@ public class MixedParamUrlCodingStrategy extends BookmarkablePageRequestTargetUr\n \t\t\t\t{\r\n \t\t\t\t\tvalue = \"\";\r\n \t\t\t\t}\r\n-\t\t\t\turl.append(urlEncodePathComponent(value)).append(\"/\");\r\n+\t\t\t\tif (!url.endsWith(\"/\"))\r\n+\t\t\t\t{\r\n+\t\t\t\t\turl.append(\"/\");\r\n+\t\t\t\t}\r\n+\t\t\t\turl.append(urlEncodePathComponent(value));\r\n \t\t\t\tparameterNamesToAdd.remove(parameterName);\r\n \t\t\t}\r\n \t\t}\r\ndiff --git a/wicket/src/main/java/org/apache/wicket/request/target/coding/PackageRequestTargetUrlCodingStrategy.java b/wicket/src/main/java/org/apache/wicket/request/target/coding/PackageRequestTargetUrlCodingStrategy.java\nindex 9519fe8..1808f3a 100644\n--- a/wicket/src/main/java/org/apache/wicket/request/target/coding/PackageRequestTargetUrlCodingStrategy.java\n+++ b/wicket/src/main/java/org/apache/wicket/request/target/coding/PackageRequestTargetUrlCodingStrategy.java\n@@ -39,8 +39,7 @@ import org.slf4j.LoggerFactory;\n  */\n public class PackageRequestTargetUrlCodingStrategy extends AbstractRequestTargetUrlCodingStrategy\n {\n-\tprivate static final Logger log = LoggerFactory\n-\t\t\t.getLogger(PackageRequestTargetUrlCodingStrategy.class);\n+\tprivate static final Logger log = LoggerFactory.getLogger(PackageRequestTargetUrlCodingStrategy.class);\n \n \t/** package for this mount. */\n \tprivate final PackageName packageName;\n@@ -93,7 +92,7 @@ public class PackageRequestTargetUrlCodingStrategy extends AbstractRequestTarget\n \t\ttry\n \t\t{\n \t\t\tbookmarkablePageClass = Session.get().getClassResolver().resolveClass(\n-\t\t\t\t\tbookmarkablePageClassName);\n+\t\t\t\tbookmarkablePageClassName);\n \t\t}\n \t\tcatch (Exception e)\n \t\t{\n@@ -101,7 +100,7 @@ public class PackageRequestTargetUrlCodingStrategy extends AbstractRequestTarget\n \t\t\treturn null;\n \t\t}\n \t\tPageParameters parameters = new PageParameters(decodeParameters(parametersFragment,\n-\t\t\t\trequestParameters.getParameters()));\n+\t\t\trequestParameters.getParameters()));\n \n \t\tString pageMapName = (String)parameters.remove(WebRequestCodingStrategy.PAGEMAP);\n \t\tpageMapName = WebRequestCodingStrategy.decodePageMapName(pageMapName);\n@@ -110,15 +109,14 @@ public class PackageRequestTargetUrlCodingStrategy extends AbstractRequestTarget\n \t\t// do some extra work for checking whether this is a normal request to a\n \t\t// bookmarkable page, or a request to a stateless page (in which case a\n \t\t// wicket:interface parameter should be available\n-\t\tfinal String interfaceParameter = (String)parameters\n-\t\t\t\t.remove(WebRequestCodingStrategy.INTERFACE_PARAMETER_NAME);\n+\t\tfinal String interfaceParameter = (String)parameters.remove(WebRequestCodingStrategy.INTERFACE_PARAMETER_NAME);\n \n \t\tif (interfaceParameter != null)\n \t\t{\n \t\t\tWebRequestCodingStrategy.addInterfaceParameters(interfaceParameter, requestParameters);\n \t\t\treturn new BookmarkableListenerInterfaceRequestTarget(pageMapName,\n-\t\t\t\t\tbookmarkablePageClass, parameters, requestParameters.getComponentPath(),\n-\t\t\t\t\trequestParameters.getInterfaceName(), requestParameters.getVersionNumber());\n+\t\t\t\tbookmarkablePageClass, parameters, requestParameters.getComponentPath(),\n+\t\t\t\trequestParameters.getInterfaceName(), requestParameters.getVersionNumber());\n \t\t}\n \t\telse\n \t\t{\n@@ -134,18 +132,18 @@ public class PackageRequestTargetUrlCodingStrategy extends AbstractRequestTarget\n \t\tif (!(requestTarget instanceof IBookmarkablePageRequestTarget))\n \t\t{\n \t\t\tthrow new IllegalArgumentException(\"this encoder can only be used with instances of \" +\n-\t\t\t\t\tIBookmarkablePageRequestTarget.class.getName());\n+\t\t\t\tIBookmarkablePageRequestTarget.class.getName());\n \t\t}\n \t\tAppendingStringBuffer url = new AppendingStringBuffer(40);\n \t\turl.append(getMountPath());\n \t\tIBookmarkablePageRequestTarget target = (IBookmarkablePageRequestTarget)requestTarget;\n-\t\turl.append(\"/\").append(Classes.simpleName(target.getPageClass())).append(\"/\");\n+\t\turl.append(\"/\").append(Classes.simpleName(target.getPageClass()));\n \n \t\tPageParameters pageParameters = target.getPageParameters();\n \t\tif (target.getPageMapName() != null)\n \t\t{\n-\t\t\tpageParameters.put(WebRequestCodingStrategy.PAGEMAP, WebRequestCodingStrategy\n-\t\t\t\t\t.encodePageMapName(target.getPageMapName()));\n+\t\t\tpageParameters.put(WebRequestCodingStrategy.PAGEMAP,\n+\t\t\t\tWebRequestCodingStrategy.encodePageMapName(target.getPageMapName()));\n \t\t}\n \n \t\tappendParameters(url, pageParameters);\n@@ -171,6 +169,7 @@ public class PackageRequestTargetUrlCodingStrategy extends AbstractRequestTarget\n \t/**\n \t * @see java.lang.Object#toString()\n \t */\n+\t@Override\n \tpublic String toString()\n \t{\n \t\treturn \"PackageEncoder[package=\" + packageName + \"]\";\n", 
  "project": "wicket", 
  "linesAdd": 38, 
  "nb_skipped": 0, 
  "fix_commit": "9da430fb", 
  "nb_failure": 16, 
  "id": "2065", 
  "linesRem": 31
}