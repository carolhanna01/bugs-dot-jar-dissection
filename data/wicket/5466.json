{"files": 1, "singleLine": false, "nb_error": 0, "failing_tests": ["removedComponent(org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandlerTest): expected:<Co[mponent 'foo' has been removed from page.]> but was:<Co[uld not find component 'foo' on page 'class org.apache.wicket.resource.DummyPage]>"], "nb_test": 1552, "patch": "diff --git a/wicket-core/src/main/java/org/apache/wicket/core/request/handler/ListenerInterfaceRequestHandler.java b/wicket-core/src/main/java/org/apache/wicket/core/request/handler/ListenerInterfaceRequestHandler.java\nindex 84592d7..1e24206 100644\n--- a/wicket-core/src/main/java/org/apache/wicket/core/request/handler/ListenerInterfaceRequestHandler.java\n+++ b/wicket-core/src/main/java/org/apache/wicket/core/request/handler/ListenerInterfaceRequestHandler.java\n@@ -172,65 +172,62 @@ public class ListenerInterfaceRequestHandler\n \t\t\tcomponent = null;\n \t\t}\n \n-\t\tif ((component == null && freshPage) ||\n-\t\t\t(component != null && getComponent().getPage() == page))\n+\t\tif ((component == null && !freshPage) || (component != null && component.getPage() != page))\n \t\t{\n-\t\t\tif (page instanceof Page)\n-\t\t\t{\n-\t\t\t\t// initialize the page to be able to check whether it is stateless\n-\t\t\t\t((Page)page).internalInitialize();\n-\t\t\t}\n-\t\t\tfinal boolean isStateless = page.isPageStateless();\n+\t\t\tthrow new WicketRuntimeException(\"Component '\" + getComponentPath()\n+\t\t\t\t+ \"' has been removed from page.\");\n+\t\t}\n \n-\t\t\tRedirectPolicy policy = isStateless ? RedirectPolicy.NEVER_REDIRECT\n-\t\t\t\t: RedirectPolicy.AUTO_REDIRECT;\n-\t\t\tfinal IPageProvider pageProvider = new PageProvider(page);\n+\t\tif (page instanceof Page)\n+\t\t{\n+\t\t\t// initialize the page to be able to check whether it is stateless\n+\t\t\t((Page)page).internalInitialize();\n+\t\t}\n+\t\tfinal boolean isStateless = page.isPageStateless();\n+\n+\t\tRedirectPolicy policy = isStateless\n+\t\t\t? RedirectPolicy.NEVER_REDIRECT\n+\t\t\t: RedirectPolicy.AUTO_REDIRECT;\n+\t\tfinal IPageProvider pageProvider = new PageProvider(page);\n \n-\t\t\tif (freshPage && (isStateless == false || component == null))\n+\t\tif (freshPage && (isStateless == false || component == null))\n+\t\t{\n+\t\t\t// A listener interface is invoked on an expired page.\n+\n+\t\t\t// If the page is stateful then we cannot assume that the listener interface is\n+\t\t\t// invoked on its initial state (right after page initialization) and that its\n+\t\t\t// component and/or behavior will be available. That's why the listener interface\n+\t\t\t// should be ignored and the best we can do is to re-paint the newly constructed\n+\t\t\t// page.\n+\n+\t\t\tif (LOG.isDebugEnabled())\n \t\t\t{\n-\t\t\t\t// A listener interface is invoked on an expired page.\n-\n-\t\t\t\t// If the page is stateful then we cannot assume that the listener interface is\n-\t\t\t\t// invoked on its initial state (right after page initialization) and that its\n-\t\t\t\t// component and/or behavior will be available. That's why the listener interface\n-\t\t\t\t// should be ignored and the best we can do is to re-paint the newly constructed\n-\t\t\t\t// page.\n-\n-\t\t\t\tif (LOG.isDebugEnabled())\n-\t\t\t\t{\n-\t\t\t\t\tLOG.debug(\n-\t\t\t\t\t\t\"A ListenerInterface '{}' assigned to '{}' is executed on an expired stateful page. \"\n-\t\t\t\t\t\t\t+ \"Scheduling re-create of the page and ignoring the listener interface...\",\n-\t\t\t\t\t\tlistenerInterface, getComponentPath());\n-\t\t\t\t}\n-\n-\t\t\t\tif (isAjax)\n-\t\t\t\t{\n-\t\t\t\t\tpolicy = RedirectPolicy.ALWAYS_REDIRECT;\n-\t\t\t\t}\n-\n-\t\t\t\trequestCycle.scheduleRequestHandlerAfterCurrent(new RenderPageRequestHandler(\n-\t\t\t\t\tpageProvider, policy));\n-\t\t\t\treturn;\n+\t\t\t\tLOG.debug(\n+\t\t\t\t\t\"A ListenerInterface '{}' assigned to '{}' is executed on an expired stateful page. \"\n+\t\t\t\t\t\t+ \"Scheduling re-create of the page and ignoring the listener interface...\",\n+\t\t\t\t\tlistenerInterface, getComponentPath());\n \t\t\t}\n \n-\t\t\tif (isAjax == false && listenerInterface.isRenderPageAfterInvocation())\n+\t\t\tif (isAjax)\n \t\t\t{\n-\t\t\t\t// schedule page render after current request handler is done. this can be\n-\t\t\t\t// overridden during invocation of listener\n-\t\t\t\t// method (i.e. by calling RequestCycle#setResponsePage)\n-\t\t\t\trequestCycle.scheduleRequestHandlerAfterCurrent(new RenderPageRequestHandler(\n-\t\t\t\t\tpageProvider, policy));\n+\t\t\t\tpolicy = RedirectPolicy.ALWAYS_REDIRECT;\n \t\t\t}\n \n-\t\t\tinvokeListener();\n-\n+\t\t\trequestCycle.scheduleRequestHandlerAfterCurrent(new RenderPageRequestHandler(\n+\t\t\t\tpageProvider, policy));\n+\t\t\treturn;\n \t\t}\n-\t\telse\n+\n+\t\tif (isAjax == false && listenerInterface.isRenderPageAfterInvocation())\n \t\t{\n-\t\t\tthrow new WicketRuntimeException(\"Component \" + getComponent() +\n-\t\t\t\t\" has been removed from page.\");\n+\t\t\t// schedule page render after current request handler is done. this can be\n+\t\t\t// overridden during invocation of listener\n+\t\t\t// method (i.e. by calling RequestCycle#setResponsePage)\n+\t\t\trequestCycle.scheduleRequestHandlerAfterCurrent(new RenderPageRequestHandler(\n+\t\t\t\tpageProvider, policy));\n \t\t}\n+\n+\t\tinvokeListener();\n \t}\n \n \tprivate void invokeListener()\n", "project": "wicket", "linesAdd": 44, "nb_skipped": 2, "fix_commit": "c1c1f794", "nb_failure": 1, "id": "5466", "linesRem": 47}