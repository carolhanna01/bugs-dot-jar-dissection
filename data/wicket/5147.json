{
  "files": 5, 
  "singleLine": false, 
  "nb_error": 0, 
  "failing_tests": [
    "hideableBorder(org.apache.wicket.markup.html.border.ComponentBorderTest): org/apache/wicket/markup/html/border/HideableBorderPage_ExpectedResult.html expected:<...r.HideableBorderPage[?0]\";(..)", 
    "renderHomePage_13(org.apache.wicket.markup.html.basic.SimplePageTest): org/apache/wicket/markup/html/basic/SimplePageExpectedResult_13.html expected:<....basic.SimplePage_13[?0]\";(..)", 
    "renderHomePage_1(org.apache.wicket.ajax.markup.html.ajaxLink.AjaxLinkTest): org/apache/wicket/ajax/markup/html/ajaxLink/AjaxLinkPageExpectedResult.html expected:<...jaxLink.AjaxLinkPage[?0]\";(..)", 
    "renderHomePage_2(org.apache.wicket.ajax.markup.html.ajaxLink.AjaxLinkTest): org/apache/wicket/ajax/markup/html/ajaxLink/AjaxLinkWithBorderPageExpectedResult.html expected:<...axLinkWithBorderPage[?0]\";(..)", 
    "page_2(org.apache.wicket.ajax.markup.html.ajaxLink.AjaxLinkTest): org/apache/wicket/ajax/markup/html/ajaxLink/AjaxPage2_ExpectedResult.html expected:<...l.ajaxLink.AjaxPage2[?0]\";(..)", 
    "inlinePanel_7(org.apache.wicket.markup.html.panel.PanelTest): org/apache/wicket/markup/html/panel/InlinePanelPageExpectedResult_7.html expected:<...el.InlinePanelPage_7[?0]\";(..)", 
    "inlinePanel_8(org.apache.wicket.markup.html.panel.PanelTest): org/apache/wicket/markup/html/panel/InlinePanelPageExpectedResult_8.html expected:<...el.InlinePanelPage_8[?0]\";(..)"
  ], 
  "nb_test": 1472, 
  "patch": "diff --git a/wicket-core/src/main/java/org/apache/wicket/DefaultExceptionMapper.java b/wicket-core/src/main/java/org/apache/wicket/DefaultExceptionMapper.java\nindex eea361d..81829d0 100644\n--- a/wicket-core/src/main/java/org/apache/wicket/DefaultExceptionMapper.java\n+++ b/wicket-core/src/main/java/org/apache/wicket/DefaultExceptionMapper.java\n@@ -56,7 +56,7 @@ public class DefaultExceptionMapper implements IExceptionMapper\n \t\t\tResponse response = RequestCycle.get().getResponse();\n \t\t\tif (response instanceof WebResponse)\n \t\t\t{\n-\t\t\t\t// we don't wan't to cache an exceptional reply in the browser\n+\t\t\t\t// we don't want to cache an exceptional reply in the browser\n \t\t\t\t((WebResponse)response).disableCaching();\n \t\t\t}\n \t\t\treturn internalMap(e);\n@@ -92,7 +92,7 @@ public class DefaultExceptionMapper implements IExceptionMapper\n \n \t\tif (e instanceof StalePageException)\n \t\t{\n-\t\t\t// If the page was stale, just rerender it\n+\t\t\t// If the page was stale, just re-render it\n \t\t\t// (the url should always be updated by an redirect in that case)\n \t\t\treturn new RenderPageRequestHandler(new PageProvider(((StalePageException)e).getPage()));\n \t\t}\n@@ -167,7 +167,6 @@ public class DefaultExceptionMapper implements IExceptionMapper\n \n \tprivate boolean isProcessingAjaxRequest()\n \t{\n-\n \t\tRequestCycle rc = RequestCycle.get();\n \t\tRequest request = rc.getRequest();\n \t\tif (request instanceof WebRequest)\ndiff --git a/wicket-core/src/main/java/org/apache/wicket/Page.java b/wicket-core/src/main/java/org/apache/wicket/Page.java\nindex 1467798..86c0472 100644\n--- a/wicket-core/src/main/java/org/apache/wicket/Page.java\n+++ b/wicket-core/src/main/java/org/apache/wicket/Page.java\n@@ -450,6 +450,8 @@ public abstract class Page extends MarkupContainer implements IRedirectListener,\n \n \t\tif (stateless == null)\n \t\t{\n+\t\t\tinternalInitialize();\n+\n \t\t\tif (isStateless() == false)\n \t\t\t{\n \t\t\t\tstateless = Boolean.FALSE;\ndiff --git a/wicket-core/src/main/java/org/apache/wicket/page/AbstractPageManager.java b/wicket-core/src/main/java/org/apache/wicket/page/AbstractPageManager.java\nindex 263bb62..da259e4 100644\n--- a/wicket-core/src/main/java/org/apache/wicket/page/AbstractPageManager.java\n+++ b/wicket-core/src/main/java/org/apache/wicket/page/AbstractPageManager.java\n@@ -127,10 +127,6 @@ public abstract class AbstractPageManager implements IPageManager\n \t@Override\n \tpublic void touchPage(IManageablePage page)\n \t{\n-\t\tif (!page.isPageStateless())\n-\t\t{\n-\t\t\tgetContext().bind();\n-\t\t}\n \t\tgetRequestAdapter().touch(page);\n \t}\n }\ndiff --git a/wicket-core/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java b/wicket-core/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java\nindex be577f3..f40a0c9 100644\n--- a/wicket-core/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java\n+++ b/wicket-core/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java\n@@ -431,6 +431,23 @@ public class WicketFilter implements Filter\n \t\t\t\tThreadContext.detach();\n \t\t\t}\n \t\t}\n+\t\tcatch (Exception e)\n+\t\t{\n+\t\t\t// #destroy() might not be called by the web container when #init() fails,\n+\t\t\t// so destroy now\n+\t\t\tlog.warn(\"initialization failed, destroying now\");\n+\n+\t\t\ttry\n+\t\t\t{\n+\t\t\t\tdestroy();\n+\t\t\t}\n+\t\t\tcatch (Exception destroyException)\n+\t\t\t{\n+\t\t\t\tlog.warn(\"Unable to destroy after initialization failure\", destroyException);\n+\t\t\t}\n+\n+\t\t\tthrow new ServletException(e);\n+\t\t}\n \t\tfinally\n \t\t{\n \t\t\tif (newClassLoader != previousClassLoader)\n@@ -578,7 +595,14 @@ public class WicketFilter implements Filter\n \n \t\tif (applicationFactory != null)\n \t\t{\n-\t\t\tapplicationFactory.destroy(this);\n+\t\t\ttry\n+\t\t\t{\n+\t\t\t\tapplicationFactory.destroy(this);\n+\t\t\t}\n+\t\t\tfinally\n+\t\t\t{\n+\t\t\t\tapplicationFactory = null;\n+\t\t\t}\n \t\t}\n \t}\n \n@@ -781,7 +805,7 @@ public class WicketFilter implements Filter\n \t * level \"/\" then an empty string should be used instead.\n \t * \n \t * @param filterPath\n-\t * @return\n+\t * @return canonic filter path\n \t */\n \tstatic String canonicaliseFilterPath(String filterPath)\n \t{\ndiff --git a/wicket-core/src/main/java/org/apache/wicket/request/cycle/PageRequestHandlerTracker.java b/wicket-core/src/main/java/org/apache/wicket/request/cycle/PageRequestHandlerTracker.java\nindex caa5a6d..b2390a6 100644\n--- a/wicket-core/src/main/java/org/apache/wicket/request/cycle/PageRequestHandlerTracker.java\n+++ b/wicket-core/src/main/java/org/apache/wicket/request/cycle/PageRequestHandlerTracker.java\n@@ -59,6 +59,13 @@ public class PageRequestHandlerTracker extends AbstractRequestCycleListener\n \t\tregisterLastHandler(cycle,handler);\n \t}\n \n+\t@Override\n+\tpublic void onExceptionRequestHandlerResolved(RequestCycle cycle, IRequestHandler handler, Exception exception)\n+\t{\n+\t\tsuper.onExceptionRequestHandlerResolved(cycle, handler, exception);\n+\t\tregisterLastHandler(cycle,handler);\n+\t}\n+\n \t/**\n \t * Registers pagerequesthandler when it's resolved ,keeps up with the most recent handler resolved\n \t *\n", 
  "project": "wicket", 
  "linesAdd": 37, 
  "nb_skipped": 3, 
  "fix_commit": "184e51e9", 
  "nb_failure": 7, 
  "id": "5147", 
  "linesRem": 9
}