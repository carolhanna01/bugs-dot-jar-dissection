{"nb_failure": 0, "nb_error": 2, "failing_tests": ["testResolveRelative_NoSegmentsInBase(org.apache.wicket.request.UrlTest): -1", "testResolveRelative_NoSegmentsInBase2(org.apache.wicket.request.UrlTest): -1"], "patch": "diff --git a/wicket-request/src/main/java/org/apache/wicket/request/Url.java b/wicket-request/src/main/java/org/apache/wicket/request/Url.java\nindex 2c3289b..6950de2 100755\n--- a/wicket-request/src/main/java/org/apache/wicket/request/Url.java\n+++ b/wicket-request/src/main/java/org/apache/wicket/request/Url.java\n@@ -106,7 +106,7 @@ public final class Url implements Serializable\n \t * Parses the given URL string.\n \t * \n \t * @param url\n-\t *           absolute or relative url with query string\n+\t *            absolute or relative url with query string\n \t * @return Url object\n \t */\n \tpublic static Url parse(final String url)\n@@ -118,7 +118,7 @@ public final class Url implements Serializable\n \t * Parses the given URL string.\n \t * \n \t * @param url\n-\t *           absolute or relative url with query string\n+\t *            absolute or relative url with query string\n \t * @param charset\n \t * @return Url object\n \t */\n@@ -147,7 +147,7 @@ public final class Url implements Serializable\n \t\t\tabsoluteUrl = url.substring(0, queryAt);\n \t\t\tqueryString = url.substring(queryAt + 1);\n \t\t}\n-\t\t\n+\n \t\t// get absolute / relative part of url\n \t\tString relativeUrl;\n \n@@ -157,12 +157,12 @@ public final class Url implements Serializable\n \t\tif (protocolAt != -1)\n \t\t{\n \t\t\tresult.protocol = absoluteUrl.substring(0, protocolAt).toLowerCase(Locale.US);\n-\t\t\t\n+\n \t\t\tfinal String afterProto = absoluteUrl.substring(protocolAt + 3);\n \t\t\tfinal String hostAndPort;\n \n \t\t\tfinal int relativeAt = afterProto.indexOf('/');\n-\t\t\t\n+\n \t\t\tif (relativeAt == -1)\n \t\t\t{\n \t\t\t\trelativeUrl = \"\";\n@@ -236,7 +236,7 @@ public final class Url implements Serializable\n \t * get default port number for protocol\n \t * \n \t * @param protocol\n-\t *           name of protocol\n+\t *            name of protocol\n \t * @return default port for protocol or <code>null</code> if unknown\n \t */\n \tprivate static Integer getDefaultPortForProtocol(String protocol)\n@@ -311,7 +311,7 @@ public final class Url implements Serializable\n \t */\n \tpublic Url(final List<String> segments, final Charset charset)\n \t{\n-\t\tthis(segments, Collections.<QueryParameter>emptyList(), charset);\n+\t\tthis(segments, Collections.<QueryParameter> emptyList(), charset);\n \t}\n \n \t/**\n@@ -592,8 +592,8 @@ public final class Url implements Serializable\n \t}\n \n \t/**\n-\t * render full representation of url (including protocol, host and port) \n-\t * into string representation\n+\t * render full representation of url (including protocol, host and port) into string\n+\t * representation\n \t */\n \tpublic String toAbsoluteString()\n \t{\n@@ -601,8 +601,8 @@ public final class Url implements Serializable\n \t}\n \n \t/**\n-\t * render full representation of url (including protocol, host and port) \n-\t * into string representation\n+\t * render full representation of url (including protocol, host and port) into string\n+\t * representation\n \t * \n \t * @param charset\n \t * \n@@ -613,13 +613,13 @@ public final class Url implements Serializable\n \t\tStringBuilder result = new StringBuilder();\n \n \t\t// output scheme://host:port if specified\n-\t\tif(protocol != null && Strings.isEmpty(host) == false)\n+\t\tif (protocol != null && Strings.isEmpty(host) == false)\n \t\t{\n \t\t\tresult.append(protocol);\n \t\t\tresult.append(\"://\");\n \t\t\tresult.append(host);\n-\t\t\t\n-\t\t\tif(port != null && port.equals(getDefaultPortForProtocol(protocol)) == false)\n+\n+\t\t\tif (port != null && port.equals(getDefaultPortForProtocol(protocol)) == false)\n \t\t\t{\n \t\t\t\tresult.append(':');\n \t\t\t\tresult.append(port);\n@@ -627,7 +627,7 @@ public final class Url implements Serializable\n \t\t}\n \t\t// append relative part\n \t\tresult.append(this.toString());\n-\t\n+\n \t\t// return url string\n \t\treturn result.toString();\n \t}\n@@ -880,9 +880,11 @@ public final class Url implements Serializable\n \t */\n \tpublic void resolveRelative(final Url relative)\n \t{\n-\t\t// strip the first non-folder segment\n-\t\tgetSegments().remove(getSegments().size() - 1);\n-\n+\t\tif (getSegments().size() > 0)\n+\t\t{\n+\t\t\t// strip the first non-folder segment\n+\t\t\tgetSegments().remove(getSegments().size() - 1);\n+\t\t}\n \t\t// remove all './' (current folder) from the relative url\n \t\tif (!relative.getSegments().isEmpty() && \".\".equals(relative.getSegments().get(0)))\n \t\t{\n@@ -963,13 +965,13 @@ public final class Url implements Serializable\n \t{\n \t\tthis.host = host;\n \t}\n-\t\n+\n \t/**\n-\t * return path for current url in given encoding \n+\t * return path for current url in given encoding\n \t * \n \t * @param charset\n-\t *           character set for encoding\n-\t *           \n+\t *            character set for encoding\n+\t * \n \t * @return path string\n \t */\n \tpublic String getPath(Charset charset)\n@@ -992,7 +994,7 @@ public final class Url implements Serializable\n \t}\n \n \t/**\n-\t * return path for current url in original encoding \n+\t * return path for current url in original encoding\n \t * \n \t * @return path string\n \t */\n@@ -1005,7 +1007,7 @@ public final class Url implements Serializable\n \t * return query string part of url in given encoding\n \t * \n \t * @param charset\n-\t *          character set for encoding\n+\t *            character set for encoding\n \t * \n \t * @return query string\n \t */\n", "nb_test": 52, "nb_skipped": 0, "fix_commit": "7d5b8645", "id": "4072"}