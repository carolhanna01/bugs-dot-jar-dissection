{
  "files": 3, 
  "singleLine": false, 
  "nb_error": 0, 
  "failing_tests": [
    "WebSocketTesterRequestCycleListenerTest.verifyRequestCycleListeners:106->Assert.assertThat:832->Assert.assertThat:865", 
    "Expected: is <true>", 
    "but: was <false>"
  ], 
  "nb_test": 8, 
  "patch": "diff --git a/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/AbstractWebSocketProcessor.java b/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/AbstractWebSocketProcessor.java\nindex 9eb3d5d..f7428ea 100644\n--- a/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/AbstractWebSocketProcessor.java\n+++ b/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/AbstractWebSocketProcessor.java\n@@ -23,7 +23,6 @@ import org.apache.wicket.MarkupContainer;\n import org.apache.wicket.Page;\n import org.apache.wicket.Session;\n import org.apache.wicket.ThreadContext;\n-import org.apache.wicket.event.Broadcast;\n import org.apache.wicket.markup.IMarkupResourceStreamProvider;\n import org.apache.wicket.markup.html.WebPage;\n import org.apache.wicket.page.IPageManager;\n@@ -46,17 +45,15 @@ import org.apache.wicket.protocol.ws.api.registry.IKey;\n import org.apache.wicket.protocol.ws.api.registry.IWebSocketConnectionRegistry;\n import org.apache.wicket.protocol.ws.api.registry.PageIdKey;\n import org.apache.wicket.protocol.ws.api.registry.ResourceNameKey;\n+import org.apache.wicket.request.IRequestHandler;\n import org.apache.wicket.request.Url;\n+import org.apache.wicket.request.cycle.AbstractRequestCycleListener;\n import org.apache.wicket.request.cycle.RequestCycle;\n import org.apache.wicket.request.cycle.RequestCycleContext;\n import org.apache.wicket.request.http.WebRequest;\n-import org.apache.wicket.request.resource.IResource;\n-import org.apache.wicket.request.resource.ResourceReference;\n-import org.apache.wicket.request.resource.SharedResourceReference;\n import org.apache.wicket.session.ISessionStore;\n import org.apache.wicket.util.lang.Args;\n import org.apache.wicket.util.lang.Checks;\n-import org.apache.wicket.util.lang.Classes;\n import org.apache.wicket.util.resource.IResourceStream;\n import org.apache.wicket.util.resource.StringResourceStream;\n import org.apache.wicket.util.string.Strings;\n@@ -76,7 +73,7 @@ public abstract class AbstractWebSocketProcessor implements IWebSocketProcessor\n \t/**\n \t * A pageId indicating that the endpoint is WebSocketResource\n \t */\n-\tprivate static final int NO_PAGE_ID = -1;\n+\tstatic final int NO_PAGE_ID = -1;\n \n \tprivate final WebRequest webRequest;\n \tprivate final int pageId;\n@@ -187,20 +184,9 @@ public abstract class AbstractWebSocketProcessor implements IWebSocketProcessor\n \t\t\tWebSocketResponse webResponse = new WebSocketResponse(connection);\n \t\t\ttry\n \t\t\t{\n-\t\t\t\tRequestCycle requestCycle;\n-\t\t\t\tif (oldRequestCycle == null || message instanceof IWebSocketPushMessage)\n-\t\t\t\t{\n-\t\t\t\t\tRequestCycleContext context = new RequestCycleContext(webRequest, webResponse,\n-\t\t\t\t\t\t\tapplication.getRootRequestMapper(), application.getExceptionMapperProvider().get());\n-\n-\t\t\t\t\trequestCycle = application.getRequestCycleProvider().get(context);\n-\t\t\t\t\trequestCycle.getUrlRenderer().setBaseUrl(baseUrl);\n-\t\t\t\t\tThreadContext.setRequestCycle(requestCycle);\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\trequestCycle = oldRequestCycle;\n-\t\t\t\t}\n+\t\t\t\tWebSocketRequestMapper requestMapper = new WebSocketRequestMapper(application.getRootRequestMapper());\n+\t\t\t\tRequestCycle requestCycle = createRequestCycle(requestMapper, webResponse);\n+\t\t\t\tThreadContext.setRequestCycle(requestCycle);\n \n \t\t\t\tThreadContext.setApplication(application);\n \n@@ -217,25 +203,20 @@ public abstract class AbstractWebSocketProcessor implements IWebSocketProcessor\n \t\t\t\t}\n \n \t\t\t\tIPageManager pageManager = session.getPageManager();\n-\t\t\t\ttry\n-\t\t\t\t{\n-\t\t\t\t\tPage page = getPage(pageManager);\n+\t\t\t\tPage page = getPage(pageManager);\n \n-\t\t\t\t\tWebSocketRequestHandler requestHandler = new WebSocketRequestHandler(page, connection);\n+\t\t\t\tWebSocketRequestHandler requestHandler = new WebSocketRequestHandler(page, connection);\n \n-\t\t\t\t\tWebSocketPayload payload = createEventPayload(message, requestHandler);\n+\t\t\t\tWebSocketPayload payload = createEventPayload(message, requestHandler);\n \n-\t\t\t\t\tsendPayload(payload, page);\n-\n-\t\t\t\t\tif (!(message instanceof ConnectedMessage || message instanceof ClosedMessage))\n-\t\t\t\t\t{\n-\t\t\t\t\t\trequestHandler.respond(requestCycle);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tfinally\n+\t\t\t\tif (!(message instanceof ConnectedMessage || message instanceof ClosedMessage))\n \t\t\t\t{\n-\t\t\t\t\tpageManager.commitRequest();\n+\t\t\t\t\trequestCycle.scheduleRequestHandlerAfterCurrent(requestHandler);\n \t\t\t\t}\n+\n+\t\t\t\tIRequestHandler broadcastingHandler = new WebSocketMessageBroadcastHandler(pageId, resourceName, payload);\n+\t\t\t\trequestMapper.setHandler(broadcastingHandler);\n+\t\t\t\trequestCycle.processRequestAndDetach();\n \t\t\t}\n \t\t\tcatch (Exception x)\n \t\t\t{\n@@ -261,46 +242,26 @@ public abstract class AbstractWebSocketProcessor implements IWebSocketProcessor\n \t\t}\n \t}\n \n-\t/**\n-\t * Sends the payload either to the page (and its WebSocketBehavior)\n-\t * or to the WebSocketResource with name {@linkplain #resourceName}\n-\t *\n-\t * @param payload\n-\t *          The payload with the web socket message\n-\t * @param page\n-\t *          The page that owns the WebSocketBehavior, in case of behavior usage\n-\t */\n-\tprivate void sendPayload(final WebSocketPayload payload, final Page page)\n+\tprivate RequestCycle createRequestCycle(WebSocketRequestMapper requestMapper, WebSocketResponse webResponse)\n \t{\n-\t\tfinal Runnable action = new Runnable()\n+\t\tRequestCycleContext context = new RequestCycleContext(webRequest, webResponse,\n+\t\t\t\trequestMapper, application.getExceptionMapperProvider().get());\n+\n+\t\tRequestCycle requestCycle = application.getRequestCycleProvider().get(context);\n+\t\trequestCycle.getListeners().add(application.getRequestCycleListeners());\n+\t\trequestCycle.getListeners().add(new AbstractRequestCycleListener()\n \t\t{\n \t\t\t@Override\n-\t\t\tpublic void run()\n+\t\t\tpublic void onDetach(final RequestCycle requestCycle)\n \t\t\t{\n-\t\t\t\tif (pageId != NO_PAGE_ID)\n-\t\t\t\t{\n-\t\t\t\t\tpage.send(application, Broadcast.BREADTH, payload);\n-\t\t\t\t} else\n+\t\t\t\tif (Session.exists())\n \t\t\t\t{\n-\t\t\t\t\tResourceReference reference = new SharedResourceReference(resourceName);\n-\t\t\t\t\tIResource resource = reference.getResource();\n-\t\t\t\t\tif (resource instanceof WebSocketResource)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tWebSocketResource wsResource = (WebSocketResource) resource;\n-\t\t\t\t\t\twsResource.onPayload(payload);\n-\t\t\t\t\t} else\n-\t\t\t\t\t{\n-\t\t\t\t\t\tthrow new IllegalStateException(\n-\t\t\t\t\t\t\t\tString.format(\"Shared resource with name '%s' is not a %s but %s\",\n-\t\t\t\t\t\t\t\t\t\tresourceName, WebSocketResource.class.getSimpleName(),\n-\t\t\t\t\t\t\t\t\t\tClasses.name(resource.getClass())));\n-\t\t\t\t\t}\n+\t\t\t\t\tSession.get().getPageManager().commitRequest();\n \t\t\t\t}\n \t\t\t}\n-\t\t};\n-\n-\t\tWebSocketSettings webSocketSettings = WebSocketSettings.Holder.get(application);\n-\t\twebSocketSettings.getSendPayloadExecutor().run(action);\n+\t\t});\n+\t\trequestCycle.getUrlRenderer().setBaseUrl(baseUrl);\n+\t\treturn requestCycle;\n \t}\n \n \t/**\ndiff --git a/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/WebSocketMessageBroadcastHandler.java b/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/WebSocketMessageBroadcastHandler.java\nnew file mode 100644\nindex 0000000..0529fe3\n--- /dev/null\n+++ b/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/WebSocketMessageBroadcastHandler.java\n@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.wicket.protocol.ws.api;\n+\n+import org.apache.wicket.Application;\n+import org.apache.wicket.Page;\n+import org.apache.wicket.Session;\n+import org.apache.wicket.event.Broadcast;\n+import org.apache.wicket.protocol.ws.WebSocketSettings;\n+import org.apache.wicket.protocol.ws.api.event.WebSocketPayload;\n+import org.apache.wicket.request.IRequestCycle;\n+import org.apache.wicket.request.IRequestHandler;\n+import org.apache.wicket.request.resource.IResource;\n+import org.apache.wicket.request.resource.ResourceReference;\n+import org.apache.wicket.request.resource.SharedResourceReference;\n+import org.apache.wicket.util.lang.Args;\n+import org.apache.wicket.util.lang.Classes;\n+\n+/**\n+ * An {@link org.apache.wicket.request.IRequestHandler} that broadcasts the payload to the\n+ * page/resource\n+ */\n+public class WebSocketMessageBroadcastHandler implements IRequestHandler\n+{\n+\tprivate final int pageId;\n+\tprivate final String resourceName;\n+\tprivate final WebSocketPayload<?> payload;\n+\n+\t/**\n+\t * Constructor.\n+\t *\n+\t * @param pageId\n+\t *          The id of the page if {@link org.apache.wicket.protocol.ws.api.WebSocketBehavior}\n+\t *          or {@value org.apache.wicket.protocol.ws.api.AbstractWebSocketProcessor#NO_PAGE_ID} if using a resource\n+\t * @param resourceName\n+\t *          The name of the shared {@link org.apache.wicket.protocol.ws.api.WebSocketResource}\n+\t * @param payload\n+\t *          The payload to broadcast\n+\t */\n+\tWebSocketMessageBroadcastHandler(int pageId, String resourceName, WebSocketPayload<?> payload)\n+\t{\n+\t\tthis.pageId = pageId;\n+\t\tthis.resourceName = resourceName;\n+\t\tthis.payload = Args.notNull(payload, \"payload\");\n+\t}\n+\n+\t@Override\n+\tpublic void respond(IRequestCycle requestCycle)\n+\t{\n+\t\tfinal Application application = Application.get();\n+\n+\t\tfinal Runnable action = new Runnable()\n+\t\t{\n+\t\t\t@Override\n+\t\t\tpublic void run()\n+\t\t\t{\n+\t\t\t\tif (pageId != AbstractWebSocketProcessor.NO_PAGE_ID)\n+\t\t\t\t{\n+\t\t\t\t\tPage page = (Page) Session.get().getPageManager().getPage(pageId);\n+\t\t\t\t\tpage.send(application, Broadcast.BREADTH, payload);\n+\t\t\t\t}\n+\t\t\t\telse\n+\t\t\t\t{\n+\t\t\t\t\tResourceReference reference = new SharedResourceReference(resourceName);\n+\t\t\t\t\tIResource resource = reference.getResource();\n+\t\t\t\t\tif (resource instanceof WebSocketResource)\n+\t\t\t\t\t{\n+\t\t\t\t\t\tWebSocketResource wsResource = (WebSocketResource) resource;\n+\t\t\t\t\t\twsResource.onPayload(payload);\n+\t\t\t\t\t}\n+\t\t\t\t\telse\n+\t\t\t\t\t{\n+\t\t\t\t\t\tthrow new IllegalStateException(\n+\t\t\t\t\t\t\t\tString.format(\"Shared resource with name '%s' is not a %s but %s\",\n+\t\t\t\t\t\t\t\t\t\tresourceName, WebSocketResource.class.getSimpleName(),\n+\t\t\t\t\t\t\t\t\t\tClasses.name(resource.getClass())));\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t};\n+\n+\t\tWebSocketSettings webSocketSettings = WebSocketSettings.Holder.get(application);\n+\t\twebSocketSettings.getSendPayloadExecutor().run(action);\n+\t}\n+\n+\t@Override\n+\tpublic void detach(IRequestCycle requestCycle)\n+\t{\n+\t}\n+}\ndiff --git a/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/WebSocketRequestMapper.java b/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/WebSocketRequestMapper.java\nnew file mode 100644\nindex 0000000..9899b04\n--- /dev/null\n+++ b/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/WebSocketRequestMapper.java\n@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.wicket.protocol.ws.api;\n+\n+import org.apache.wicket.request.IRequestHandler;\n+import org.apache.wicket.request.IRequestMapper;\n+import org.apache.wicket.request.Request;\n+import org.apache.wicket.request.Url;\n+\n+/**\n+ * An {@link org.apache.wicket.request.IRequestMapper} that is used to set a custom\n+ * {@link org.apache.wicket.request.IRequestHandler} that broadcasts the\n+ * {@link org.apache.wicket.protocol.ws.api.event.WebSocketPayload}\n+ */\n+class WebSocketRequestMapper implements IRequestMapper\n+{\n+\tprivate final IRequestMapper delegate;\n+\n+\tprivate IRequestHandler handler;\n+\n+\t/**\n+\t * Constructor.\n+\t *\n+\t * @param delegate\n+\t *          The application root request mapper to delegate Url creation etc.\n+\t */\n+\tpublic WebSocketRequestMapper(IRequestMapper delegate)\n+\t{\n+\t\tthis.delegate = delegate;\n+\t}\n+\n+\t@Override\n+\tpublic IRequestHandler mapRequest(Request request)\n+\t{\n+\t\treturn handler;\n+\t}\n+\n+\t@Override\n+\tpublic int getCompatibilityScore(Request request)\n+\t{\n+\t\treturn delegate.getCompatibilityScore(request);\n+\t}\n+\n+\t@Override\n+\tpublic Url mapHandler(IRequestHandler requestHandler)\n+\t{\n+\t\treturn delegate.mapHandler(requestHandler);\n+\t}\n+\n+\t/**\n+\t * Sets the custom request handler\n+\t *\n+\t * @param handler\n+\t *          The request handler that broadcasts the web socket payload\n+\t */\n+\tpublic void setHandler(IRequestHandler handler)\n+\t{\n+\t\tthis.handler = handler;\n+\t}\n+}\n", 
  "project": "wicket", 
  "linesAdd": 206, 
  "nb_skipped": 0, 
  "fix_commit": "087c0a26", 
  "nb_failure": 1, 
  "id": "5701", 
  "linesRem": 67
}