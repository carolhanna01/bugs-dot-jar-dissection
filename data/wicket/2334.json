{
  "files": 2, 
  "singleLine": false, 
  "nb_error": 2, 
  "failing_tests": [
    "testNonBookmarkablePage(org.apache.wicket.devutils.stateless.StatelessCheckerTest)", 
    "testPositive(org.apache.wicket.devutils.stateless.StatelessCheckerTest)"
  ], 
  "nb_test": 2, 
  "patch": "diff --git a/wicket-devutils/src/main/java/org/apache/wicket/devutils/debugbar/DebugBar.java b/wicket-devutils/src/main/java/org/apache/wicket/devutils/debugbar/DebugBar.java\nindex 88f1371..866340f 100644\n--- a/wicket-devutils/src/main/java/org/apache/wicket/devutils/debugbar/DebugBar.java\n+++ b/wicket-devutils/src/main/java/org/apache/wicket/devutils/debugbar/DebugBar.java\n@@ -33,11 +33,10 @@ import org.apache.wicket.markup.html.list.ListView;\n import org.apache.wicket.model.AbstractReadOnlyModel;\n \n /**\n- * The debug bar is for use during development. It allows contributors to add\n- * useful functions or data, making them readily accessible to the developer.<br />\n+ * The debug bar is for use during development. It allows contributors to add useful functions or\n+ * data, making them readily accessible to the developer.<br />\n  * <br />\n- * To use it, simply add it to your base page so that all of your pages\n- * automatically have it.<br />\n+ * To use it, simply add it to your base page so that all of your pages automatically have it.<br />\n  * \n  * <br />\n  * <code>\n@@ -49,108 +48,135 @@ import org.apache.wicket.model.AbstractReadOnlyModel;\n  * </code>\n  * \n  * <br />\n- * You can also add your own information to the bar by creating a\n- * {@link IDebugBarContributor} and registering it with the debug bar.\n+ * You can also add your own information to the bar by creating a {@link IDebugBarContributor} and\n+ * registering it with the debug bar.\n  * \n  * @author Jeremy Thomerson <jthomerson@apache.org>\n  * @see IDebugBarContributor\n  */\n-public class DebugBar extends DevUtilsPanel {\n-\n-\tprivate static final MetaDataKey<List<IDebugBarContributor>> CONTRIBS_META_KEY = new MetaDataKey<List<IDebugBarContributor>>() {\n-\t\tprivate static final long serialVersionUID = 1L;\n-\t};\n-\n-\tstatic {\n-\t\tregisterStandardContributors();\n-\t}\n-\n-\tprivate static final long serialVersionUID = 1L;\n-\n-\tpublic DebugBar(String id) {\n-\t\tsuper(id);\n-\t\tsetMarkupId(\"wicketDebugBar\");\n-\t\tsetOutputMarkupId(true);\n-\t\tadd(new AttributeModifier(\"class\", true,\n-\t\t\t\tnew AbstractReadOnlyModel<String>() {\n-\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n-\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic String getObject() {\n-\t\t\t\t\t\treturn \"wicketDebugBar\"\n-\t\t\t\t\t\t\t\t+ (DebugBar.this.hasErrorMessage() ? \"Error\"\n-\t\t\t\t\t\t\t\t\t\t: \"\");\n-\t\t\t\t\t}\n-\n-\t\t\t\t}));\n-\t\tadd(CSSPackageResource.getHeaderContribution(DebugBar.class,\n-\t\t\t\t\"wicket-debugbar.css\"));\n-\t\tadd(JavascriptPackageResource.getHeaderContribution(DebugBar.class,\n-\t\t\t\t\"wicket-debugbar.js\"));\n-\t\tadd(new Image(\"logo\", new ResourceReference(DebugBar.class,\n-\t\t\t\t\"wicket.png\")));\n-\t\tadd(new Image(\"removeImg\", new ResourceReference(DebugBar.class,\n-\t\t\t\t\"remove.png\")));\n-\t\tList<IDebugBarContributor> contributors = getContributors();\n-\t\tif (contributors.isEmpty()) {\n-\t\t\t// we do this so that if you have multiple applications running in\n-\t\t\t// the same container,\n-\t\t\t// each ends up registering its' own contributors (wicket-examples\n-\t\t\t// for example)\n-\t\t\tregisterStandardContributors();\n-\t\t\tcontributors = getContributors();\n-\t\t}\n-\t\tadd(new ListView<IDebugBarContributor>(\"contributors\", contributors) {\n-\t\t\tprivate static final long serialVersionUID = 1L;\n-\n-\t\t\t@Override\n-\t\t\tprotected void populateItem(ListItem<IDebugBarContributor> item) {\n-\t\t\t\tIDebugBarContributor contrib = item.getModelObject();\n-\t\t\t\tComponent comp = contrib.createComponent(\"contrib\", DebugBar.this);\n-\t\t\t\tif (comp == null) {\n-\t\t\t\t\t// some contributors only add information to the debug bar\n-\t\t\t\t\t//\tand don't actually create a contributed component\n-\t\t\t\t\titem.setVisibilityAllowed(false);\n-\t\t\t\t} else {\n-\t\t\t\t\titem.add(comp);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t});\n-\t}\n-\n-\t@Override\n-\tpublic boolean isVisible() {\n-\t\treturn getApplication().getDebugSettings()\n-\t\t\t\t.isDevelopmentUtilitiesEnabled();\n-\t}\n-\n-\t/**\n-\t * Register your own custom contributor that will be part of the debug bar.\n-\t * You must have the context of an application for this thread at the time\n-\t * of calling this method.\n-\t * \n-\t * @param contrib\n-\t *            custom contributor - can not be null\n-\t */\n-\tpublic static void registerContributor(IDebugBarContributor contrib) {\n-\t\tif (contrib == null) {\n-\t\t\tthrow new IllegalArgumentException(\"contrib can not be null\");\n-\t\t}\n-\n-\t\tList<IDebugBarContributor> contributors = getContributors();\n-\t\tcontributors.add(contrib);\n-\t\tApplication.get().setMetaData(CONTRIBS_META_KEY, contributors);\n-\t}\n-\n-\tprivate static List<IDebugBarContributor> getContributors() {\n-\t\tList<IDebugBarContributor> list = Application.get().getMetaData(\n-\t\t\t\tCONTRIBS_META_KEY);\n-\t\treturn list == null ? new ArrayList<IDebugBarContributor>() : list;\n-\t}\n-\n-\tprivate static void registerStandardContributors() {\n-\t\tregisterContributor(VersionDebugContributor.DEBUG_BAR_CONTRIB);\n-\t\tregisterContributor(InspectorDebugPanel.DEBUG_BAR_CONTRIB);\n-\t\tregisterContributor(SessionSizeDebugPanel.DEBUG_BAR_CONTRIB);\n-\t}\n+public class DebugBar extends DevUtilsPanel\n+{\n+\n+    private static final MetaDataKey<List<IDebugBarContributor>> CONTRIBS_META_KEY = new MetaDataKey<List<IDebugBarContributor>>()\n+    {\n+        private static final long serialVersionUID = 1L;\n+    };\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public DebugBar(String id)\n+    {\n+        super(id);\n+        setMarkupId(\"wicketDebugBar\");\n+        setOutputMarkupId(true);\n+        add(new AttributeModifier(\"class\", true, new AbstractReadOnlyModel<String>()\n+        {\n+            private static final long serialVersionUID = 1L;\n+\n+            @Override\n+            public String getObject()\n+            {\n+                return \"wicketDebugBar\" + (DebugBar.this.hasErrorMessage() ? \"Error\" : \"\");\n+            }\n+\n+        }));\n+        add(CSSPackageResource.getHeaderContribution(DebugBar.class, \"wicket-debugbar.css\"));\n+        add(JavascriptPackageResource.getHeaderContribution(DebugBar.class, \"wicket-debugbar.js\"));\n+        add(new Image(\"logo\", new ResourceReference(DebugBar.class, \"wicket.png\")));\n+        add(new Image(\"removeImg\", new ResourceReference(DebugBar.class, \"remove.png\")));\n+        List<IDebugBarContributor> contributors = getContributors();\n+        \n+        // no longer necessary, registered from DebugBarInitializer\n+        // if (contributors.isEmpty())\n+        // {\n+        // we do this so that if you have multiple applications running in\n+        // the same container,\n+        // each ends up registering its' own contributors (wicket-examples\n+        // for example)\n+        // registerStandardContributors(Application.get());\n+        // contributors = getContributors();\n+        // }\n+        add(new ListView<IDebugBarContributor>(\"contributors\", contributors)\n+        {\n+            private static final long serialVersionUID = 1L;\n+\n+            @Override\n+            protected void populateItem(ListItem<IDebugBarContributor> item)\n+            {\n+                IDebugBarContributor contrib = item.getModelObject();\n+                Component comp = contrib.createComponent(\"contrib\", DebugBar.this);\n+                if (comp == null)\n+                {\n+                    // some contributors only add information to the debug bar\n+                    // and don't actually create a contributed component\n+                    item.setVisibilityAllowed(false);\n+                }\n+                else\n+                {\n+                    item.add(comp);\n+                }\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public boolean isVisible()\n+    {\n+        return getApplication().getDebugSettings().isDevelopmentUtilitiesEnabled();\n+    }\n+\n+    /**\n+     * Register your own custom contributor that will be part of the debug bar. You must have the\n+     * context of an application for this thread at the time of calling this method.\n+     * \n+     * @param application\n+     * @param contrib\n+     *            custom contributor - can not be null\n+     */\n+    public static void registerContributor(IDebugBarContributor contrib)\n+    {\n+        registerContributor(contrib, Application.get());\n+    }\n+\n+    /**\n+     * Register your own custom contributor that will be part of the debug bar. You must have the\n+     * context of an application for this thread at the time of calling this method.\n+     * \n+     * @param application\n+     * @param contrib\n+     *            custom contributor - can not be null\n+     */\n+    public static void registerContributor(IDebugBarContributor contrib, Application application)\n+    {\n+        if (contrib == null)\n+        {\n+            throw new IllegalArgumentException(\"contrib can not be null\");\n+        }\n+\n+        List<IDebugBarContributor> contributors = getContributors(application);\n+        contributors.add(contrib);\n+        application.setMetaData(CONTRIBS_META_KEY, contributors);\n+    }\n+\n+    private static List<IDebugBarContributor> getContributors()\n+    {\n+        return getContributors(Application.get());\n+    }\n+\n+    private static List<IDebugBarContributor> getContributors(Application application)\n+    {\n+        List<IDebugBarContributor> list = application.getMetaData(CONTRIBS_META_KEY);\n+        return list == null ? new ArrayList<IDebugBarContributor>() : list;\n+    }\n+\n+\n+    /**\n+     * Called from {@link DebugBarInitializer}\n+     */\n+    static void registerStandardContributors(Application application)\n+    {\n+        registerContributor(VersionDebugContributor.DEBUG_BAR_CONTRIB, application);\n+        registerContributor(InspectorDebugPanel.DEBUG_BAR_CONTRIB, application);\n+        registerContributor(SessionSizeDebugPanel.DEBUG_BAR_CONTRIB, application);\n+    }\n }\ndiff --git a/wicket-devutils/src/main/java/org/apache/wicket/devutils/debugbar/DebugBarInitializer.java b/wicket-devutils/src/main/java/org/apache/wicket/devutils/debugbar/DebugBarInitializer.java\nnew file mode 100644\nindex 0000000..d32ea7c\n--- /dev/null\n+++ b/wicket-devutils/src/main/java/org/apache/wicket/devutils/debugbar/DebugBarInitializer.java\n@@ -0,0 +1,30 @@\n+package org.apache.wicket.devutils.debugbar;\r\n+\r\n+import org.apache.wicket.Application;\r\n+import org.apache.wicket.IInitializer;\r\n+\r\n+/**\r\n+ * Debug bar module initializer\r\n+ * \r\n+ * @author igor.vaynberg\r\n+ * \r\n+ */\r\n+public class DebugBarInitializer implements IInitializer\r\n+{\r\n+\r\n+    /** {@inheritDoc} */\r\n+    public void init(Application application)\r\n+    {\r\n+        // register standard debug contributors\r\n+        DebugBar.registerContributor(VersionDebugContributor.DEBUG_BAR_CONTRIB, application);\r\n+        DebugBar.registerContributor(InspectorDebugPanel.DEBUG_BAR_CONTRIB, application);\r\n+        DebugBar.registerContributor(SessionSizeDebugPanel.DEBUG_BAR_CONTRIB, application);\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString()\r\n+    {\r\n+        return \"DevUtils DebugBar Initializer\";\r\n+    }\r\n+\r\n+}\r\n", 
  "project": "wicket", 
  "linesAdd": 160, 
  "nb_skipped": 0, 
  "fix_commit": "96330447", 
  "nb_failure": 0, 
  "id": "2334", 
  "linesRem": 104
}