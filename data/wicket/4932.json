{
  "files": 1, 
  "singleLine": false, 
  "nb_error": 1, 
  "failing_tests": [
    "itFailsToProcessAnExpiredPageIfShouldNotRecreateMountedPagesAfterExpiry(org.apache.wicket.core.request.mapper.AbstractBookmarkableMapperTest): Unexpected exception, expected<org.apache.wicket.protocol.http.PageExpiredException> but was<java.lang.AssertionError>"
  ], 
  "nb_test": 1449, 
  "patch": "diff --git a/wicket-core/src/main/java/org/apache/wicket/core/request/mapper/AbstractBookmarkableMapper.java b/wicket-core/src/main/java/org/apache/wicket/core/request/mapper/AbstractBookmarkableMapper.java\nindex 86c64a6..56e27d4 100644\n--- a/wicket-core/src/main/java/org/apache/wicket/core/request/mapper/AbstractBookmarkableMapper.java\n+++ b/wicket-core/src/main/java/org/apache/wicket/core/request/mapper/AbstractBookmarkableMapper.java\n@@ -24,6 +24,8 @@ import org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler;\n import org.apache.wicket.core.request.handler.PageAndComponentProvider;\n import org.apache.wicket.core.request.handler.PageProvider;\n import org.apache.wicket.core.request.handler.RenderPageRequestHandler;\n+import org.apache.wicket.protocol.http.PageExpiredException;\n+import org.apache.wicket.protocol.http.WebApplication;\n import org.apache.wicket.request.IRequestHandler;\n import org.apache.wicket.request.IRequestHandlerDelegate;\n import org.apache.wicket.request.IRequestMapper;\n@@ -41,7 +43,7 @@ import org.slf4j.LoggerFactory;\n \n /**\n  * Abstract encoder for Bookmarkable, Hybrid and BookmarkableListenerInterface URLs.\n- *\n+ * \n  * @author Matej Knopp\n  */\n public abstract class AbstractBookmarkableMapper extends AbstractComponentMapper\n@@ -50,7 +52,7 @@ public abstract class AbstractBookmarkableMapper extends AbstractComponentMapper\n \n \t/**\n \t * Represents information stored in URL.\n-\t *\n+\t * \n \t * @author Matej Knopp\n \t */\n \tprotected static final class UrlInfo\n@@ -61,7 +63,7 @@ public abstract class AbstractBookmarkableMapper extends AbstractComponentMapper\n \n \t\t/**\n \t\t * Construct.\n-\t\t *\n+\t\t * \n \t\t * @param pageComponentInfo\n \t\t *            optional parameter providing the page instance and component information\n \t\t * @param pageClass\n@@ -82,7 +84,7 @@ public abstract class AbstractBookmarkableMapper extends AbstractComponentMapper\n \n \t\t/**\n \t\t * Cleans the original parameters from entries used by Wicket internals.\n-\t\t *\n+\t\t * \n \t\t * @param originalParameters\n \t\t *            the current request's non-modified parameters\n \t\t * @return all parameters but Wicket internal ones\n@@ -142,7 +144,7 @@ public abstract class AbstractBookmarkableMapper extends AbstractComponentMapper\n \n \t/**\n \t * Parse the given request to an {@link UrlInfo} instance.\n-\t *\n+\t * \n \t * @param request\n \t * @return UrlInfo instance or <code>null</code> if this encoder can not handle the request\n \t */\n@@ -151,7 +153,7 @@ public abstract class AbstractBookmarkableMapper extends AbstractComponentMapper\n \t/**\n \t * Builds URL for the given {@link UrlInfo} instance. The URL this method produces must be\n \t * parseable by the {@link #parseRequest(Request)} method.\n-\t *\n+\t * \n \t * @param info\n \t * @return Url result URL\n \t */\n@@ -163,7 +165,7 @@ public abstract class AbstractBookmarkableMapper extends AbstractComponentMapper\n \t * <p>\n \t * For generic bookmarkable encoders this method should return <code>true</code>. For explicit\n \t * (mounted) encoders this method should return <code>false</code>\n-\t *\n+\t * \n \t * @return <code>true</code> if hybrid URL requires page created bookmarkable,\n \t *         <code>false</code> otherwise.\n \t */\n@@ -177,7 +179,7 @@ public abstract class AbstractBookmarkableMapper extends AbstractComponentMapper\n \n \t/**\n \t * Creates a {@code IRequestHandler} that processes a bookmarkable request.\n-\t *\n+\t * \n \t * @param pageClass\n \t * @param pageParameters\n \t * @return a {@code IRequestHandler} capable of processing the bookmarkable request.\n@@ -194,7 +196,7 @@ public abstract class AbstractBookmarkableMapper extends AbstractComponentMapper\n \t * Creates a {@code IRequestHandler} that processes a hybrid request. When the page identified\n \t * by {@code pageInfo} was not available, the request should be treated as a bookmarkable\n \t * request.\n-\t *\n+\t * \n \t * @param pageInfo\n \t * @param pageClass\n \t * @param pageParameters\n@@ -208,12 +210,21 @@ public abstract class AbstractBookmarkableMapper extends AbstractComponentMapper\n \t\tPageProvider provider = new PageProvider(pageInfo.getPageId(), pageClass, pageParameters,\n \t\t\trenderCount);\n \t\tprovider.setPageSource(getContext());\n-\t\treturn new RenderPageRequestHandler(provider);\n+\t\tif (provider.isNewPageInstance() &&\n+\t\t\t!WebApplication.get().getPageSettings().getRecreateMountedPagesAfterExpiry())\n+\t\t{\n+\t\t\tthrow new PageExpiredException(String.format(\"Bookmarkable page id '%d' has expired.\",\n+\t\t\t\tpageInfo.getPageId()));\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\treturn new RenderPageRequestHandler(provider);\n+\t\t}\n \t}\n \n \t/**\n \t * Creates a {@code IRequestHandler} that processes a listener request.\n-\t *\n+\t * \n \t * @param pageComponentInfo\n \t * @param pageClass\n \t * @param pageParameters\n", 
  "project": "wicket", 
  "linesAdd": 22, 
  "nb_skipped": 5, 
  "fix_commit": "f20b2d70", 
  "nb_failure": 0, 
  "id": "4932", 
  "linesRem": 11
}