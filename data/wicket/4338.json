{"files": 4, "singleLine": false, "nb_error": 0, "failing_tests": ["decodePostParameters(org.apache.wicket.request.mapper.parameter.PageParametersEncoderTest): expected:<1> but was:<null>"], "nb_test": 66, "patch": "diff --git a/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoder.java b/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoder.java\nindex 2312995..5687a71 100644\n--- a/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoder.java\n+++ b/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoder.java\n@@ -16,9 +16,13 @@\n  */\n package org.apache.wicket.request.mapper.parameter;\n \n+import java.util.List;\n+\n+import org.apache.wicket.request.IRequestParameters;\n import org.apache.wicket.request.Request;\n import org.apache.wicket.request.Url;\n import org.apache.wicket.request.Url.QueryParameter;\n+import org.apache.wicket.util.string.StringValue;\n \n /**\n  * Simple encoder with direct indexed/named parameters mapping.\n@@ -47,10 +51,15 @@ public class PageParametersEncoder implements IPageParametersEncoder\n \t\t\tparameters.set(i, s);\n \t\t\t++i;\n \t\t}\n-\n-\t\tfor (QueryParameter p : request.getUrl().getQueryParameters())\n+\t\t\n+\t\tIRequestParameters requestParameters = request.getRequestParameters();\n+\t\tfor (String paramName : requestParameters.getParameterNames())\n \t\t{\n-\t\t\tparameters.add(p.getName(), p.getValue());\n+\t\t\tList<StringValue> parameterValues = requestParameters.getParameterValues(paramName);\n+\t\t\tfor (StringValue paramValue : parameterValues)\n+\t\t\t{\n+\t\t\t\tparameters.add(paramName, paramValue);\n+\t\t\t}\n \t\t}\n \n \t\treturn parameters.isEmpty() ? null : parameters;\ndiff --git a/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoder.java b/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoder.java\nindex db3ea51..f31f5c1 100644\n--- a/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoder.java\n+++ b/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoder.java\n@@ -25,9 +25,12 @@ import org.apache.wicket.util.string.Strings;\n \r\n \r\n /**\r\n+ * <p>\r\n  * Encodes page parameters into Url path fragments instead of the query string like the default\r\n  * {@link PageParametersEncoder}. The parameters are encoded in the following format:\r\n  * {@code /param1Name/param1Value/param2Name/param2Value}.\r\n+ * </p>\r\n+ * <strong>Note</strong>: Because of the nature of the encoder it doesn't support POST request parameters.\r\n  * <p>\r\n  * This used to be the default way of encoding page parameters in 1.4.x applications. Newer 1.5.x+\r\n  * applications use the query string, by default. This class facilitates backwards compatibility and\r\ndiff --git a/wicket-request/src/main/java/org/apache/wicket/request/parameter/CombinedRequestParametersAdapter.java b/wicket-request/src/main/java/org/apache/wicket/request/parameter/CombinedRequestParametersAdapter.java\nindex e895f3b..b5792cc 100755\n--- a/wicket-request/src/main/java/org/apache/wicket/request/parameter/CombinedRequestParametersAdapter.java\n+++ b/wicket-request/src/main/java/org/apache/wicket/request/parameter/CombinedRequestParametersAdapter.java\n@@ -19,10 +19,12 @@ package org.apache.wicket.request.parameter;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashSet;\n+import java.util.LinkedHashSet;\n import java.util.List;\n import java.util.Set;\n \n import org.apache.wicket.request.IRequestParameters;\n+import org.apache.wicket.util.lang.Args;\n import org.apache.wicket.util.string.StringValue;\n \n /**\n@@ -41,11 +43,7 @@ public class CombinedRequestParametersAdapter implements IRequestParameters\n \t */\n \tpublic CombinedRequestParametersAdapter(final IRequestParameters... parameters)\n \t{\n-\t\tif (parameters == null)\n-\t\t{\n-\t\t\tthrow new IllegalStateException(\"Argument 'parameters' may not be null\");\n-\t\t}\n-\t\tthis.parameters = parameters;\n+\t\tthis.parameters = Args.notNull(parameters, \"parameters\");\n \t}\n \n \t/**\n@@ -53,7 +51,7 @@ public class CombinedRequestParametersAdapter implements IRequestParameters\n \t */\n \tpublic Set<String> getParameterNames()\n \t{\n-\t\tSet<String> result = new HashSet<String>();\n+\t\tSet<String> result = new LinkedHashSet<String>();\n \t\tfor (IRequestParameters p : parameters)\n \t\t{\n \t\t\tresult.addAll(p.getParameterNames());\ndiff --git a/wicket-request/src/main/java/org/apache/wicket/request/parameter/UrlRequestParametersAdapter.java b/wicket-request/src/main/java/org/apache/wicket/request/parameter/UrlRequestParametersAdapter.java\nindex d65d1d6..bbdd1da 100755\n--- a/wicket-request/src/main/java/org/apache/wicket/request/parameter/UrlRequestParametersAdapter.java\n+++ b/wicket-request/src/main/java/org/apache/wicket/request/parameter/UrlRequestParametersAdapter.java\n@@ -18,7 +18,7 @@ package org.apache.wicket.request.parameter;\n \n import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.HashSet;\n+import java.util.LinkedHashSet;\n import java.util.List;\n import java.util.Set;\n \n@@ -55,7 +55,7 @@ public class UrlRequestParametersAdapter implements IRequestParameters\n \t */\n \tpublic Set<String> getParameterNames()\n \t{\n-\t\tSet<String> result = new HashSet<String>();\n+\t\tSet<String> result = new LinkedHashSet<String>();\n \t\tfor (QueryParameter parameter : url.getQueryParameters())\n \t\t{\n \t\t\tresult.add(parameter.getName());\n", "project": "wicket", "linesAdd": 21, "nb_skipped": 0, "fix_commit": "9decad35", "nb_failure": 1, "id": "4338", "linesRem": 11}