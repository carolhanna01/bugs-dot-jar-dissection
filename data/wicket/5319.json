{"files": 1, "singleLine": false, "nb_error": 1, "failing_tests": ["urlResourceReference(org.apache.wicket.core.request.mapper.CryptoMapperTest): Cannot render this url in FULL mode because it does not have a host set."], "nb_test": 1510, "patch": "diff --git a/wicket-core/src/main/java/org/apache/wicket/core/request/mapper/CryptoMapper.java b/wicket-core/src/main/java/org/apache/wicket/core/request/mapper/CryptoMapper.java\nindex 58e704e..91708a3 100755\n--- a/wicket-core/src/main/java/org/apache/wicket/core/request/mapper/CryptoMapper.java\n+++ b/wicket-core/src/main/java/org/apache/wicket/core/request/mapper/CryptoMapper.java\n@@ -42,8 +42,7 @@ import org.slf4j.LoggerFactory;\n  * in the encrypted URL. If the segment does not match the expected checksum, then the segment is\r\n  * deemed a plain text sibling of the corresponding segment in the encrypted URL, and all subsequent\r\n  * segments are considered plain text children of the current segment.\r\n- *\r\n- *\r\n+ * \r\n  * @author igor.vaynberg\r\n  * @author Jesse Long\r\n  * @author svenmeier\r\n@@ -57,7 +56,7 @@ public class CryptoMapper implements IRequestMapper\n \r\n \t/**\r\n \t * Construct.\r\n-\t *\r\n+\t * \r\n \t * @param wrappedMapper\r\n \t *            the non-crypted request mapper\r\n \t * @param application\r\n@@ -70,7 +69,7 @@ public class CryptoMapper implements IRequestMapper\n \r\n \t/**\r\n \t * Construct.\r\n-\t *\r\n+\t * \r\n \t * @param wrappedMapper\r\n \t *            the non-crypted request mapper\r\n \t * @param cryptProvider\r\n@@ -98,6 +97,12 @@ public class CryptoMapper implements IRequestMapper\n \t\t\treturn null;\r\n \t\t}\r\n \r\n+\t\tif (url.isFull())\r\n+\t\t{\r\n+\t\t\t// do not encrypt full urls\r\n+\t\t\treturn url;\r\n+\t\t}\r\n+\r\n \t\treturn encryptUrl(url);\r\n \t}\r\n \r\n@@ -117,7 +122,7 @@ public class CryptoMapper implements IRequestMapper\n \r\n \t\tif (handler != null)\r\n \t\t{\r\n-\t\t    handler = new RequestSettingRequestHandler(decryptedRequest, handler);\r\n+\t\t\thandler = new RequestSettingRequestHandler(decryptedRequest, handler);\r\n \t\t}\r\n \r\n \t\treturn handler;\r\n@@ -163,8 +168,8 @@ public class CryptoMapper implements IRequestMapper\n \tprotected Url decryptUrl(final Request request, final Url encryptedUrl)\r\n \t{\r\n \t\t/*\r\n-\t\t * If the encrypted URL has no segments it is the home page URL,\r\n-\t\t * and does not need decrypting.\r\n+\t\t * If the encrypted URL has no segments it is the home page URL, and does not need\r\n+\t\t * decrypting.\r\n \t\t */\r\n \t\tif (encryptedUrl.getSegments().isEmpty())\r\n \t\t{\r\n@@ -177,8 +182,8 @@ public class CryptoMapper implements IRequestMapper\n \t\ttry\r\n \t\t{\r\n \t\t\t/*\r\n-\t\t\t * The first encrypted segment contains an encrypted version of the\r\n-\t\t\t * entire plain text url.\r\n+\t\t\t * The first encrypted segment contains an encrypted version of the entire plain text\r\n+\t\t\t * url.\r\n \t\t\t */\r\n \t\t\tString encryptedUrlString = encryptedSegments.get(0);\r\n \t\t\tif (Strings.isEmpty(encryptedUrlString))\r\n@@ -210,17 +215,16 @@ public class CryptoMapper implements IRequestMapper\n \t\t\t\tif (!next.equals(encryptedSegment))\r\n \t\t\t\t{\r\n \t\t\t\t\t/*\r\n-\t\t\t\t\t * This segment received from the browser is not the same as the\r\n-\t\t\t\t\t * expected segment generated by the HashSegmentGenerator. Hence it,\r\n-\t\t\t\t\t * and all subsequent segments are considered plain text siblings of the\r\n-\t\t\t\t\t * original encrypted url.\r\n+\t\t\t\t\t * This segment received from the browser is not the same as the expected\r\n+\t\t\t\t\t * segment generated by the HashSegmentGenerator. Hence it, and all subsequent\r\n+\t\t\t\t\t * segments are considered plain text siblings of the original encrypted url.\r\n \t\t\t\t\t */\r\n \t\t\t\t\tbreak;\r\n \t\t\t\t}\r\n \r\n \t\t\t\t/*\r\n-\t\t\t\t * This segments matches the expected checksum, so we add the corresponding\r\n-\t\t\t\t * segment from the original URL.\r\n+\t\t\t\t * This segments matches the expected checksum, so we add the corresponding segment\r\n+\t\t\t\t * from the original URL.\r\n \t\t\t\t */\r\n \t\t\t\turl.getSegments().add(originalUrl.getSegments().get(segNo - 1));\r\n \t\t\t}\r\n@@ -278,7 +282,7 @@ public class CryptoMapper implements IRequestMapper\n \r\n \t\t/**\r\n \t\t * Generate the next segment\r\n-\t\t *\r\n+\t\t * \r\n \t\t * @return segment\r\n \t\t */\r\n \t\tpublic String next()\r\n", "project": "wicket", "linesAdd": 20, "nb_skipped": 2, "fix_commit": "c863b032", "nb_failure": 0, "id": "5319", "linesRem": 16}