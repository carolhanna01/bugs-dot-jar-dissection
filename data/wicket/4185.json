{"files": 1, "singleLine": false, "nb_error": 0, "failing_tests": ["isPageInstanceCreatedOnClassLinks(org.apache.wicket.request.handler.ListenerInterfaceRequestHandlerTest): Handler should not report a page instance is available"], "nb_test": 1239, "patch": "diff --git a/wicket-core/src/main/java/org/apache/wicket/request/handler/ListenerInterfaceRequestHandler.java b/wicket-core/src/main/java/org/apache/wicket/request/handler/ListenerInterfaceRequestHandler.java\nindex a4b5817..0c497d5 100644\n--- a/wicket-core/src/main/java/org/apache/wicket/request/handler/ListenerInterfaceRequestHandler.java\n+++ b/wicket-core/src/main/java/org/apache/wicket/request/handler/ListenerInterfaceRequestHandler.java\n@@ -249,8 +249,16 @@ public class ListenerInterfaceRequestHandler\n \n \tpublic final boolean isPageInstanceCreated()\n \t{\n-\t\t// this request handler always operates on a created page instance\n-\t\treturn true;\n+\t\t// FIXME wicket.next remove the workaround for page providers that don't implement the\n+\t\t// interface\n+\t\tif (!(pageComponentProvider instanceof IIntrospectablePageProvider))\n+\t\t{\n+\t\t\tLOG.warn(\n+\t\t\t\t\"{} used by this application does not implement {}, the request handler is falling back on using incorrect behavior\",\n+\t\t\t\tIPageProvider.class, IIntrospectablePageProvider.class);\n+\t\t\treturn !pageComponentProvider.isNewPageInstance();\n+\t\t}\n+\t\treturn ((IIntrospectablePageProvider)pageComponentProvider).hasPageInstance();\n \t}\n \n \tpublic final String getComponentPath()\n", "project": "wicket", "linesAdd": 10, "nb_skipped": 3, "fix_commit": "5fd03973", "nb_failure": 1, "id": "4185", "linesRem": 2}