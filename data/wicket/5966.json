{
  "files": 1, 
  "singleLine": false, 
  "nb_error": 0, 
  "failing_tests": [
    "ResourceUtilsTest.getLocaleFromFilename:52->Assert.assertThat:923->Assert.assertThat:956", 
    "Expected: is \"some.min.ext\"", 
    "but: was \"some_fr_CA.min.ext\""
  ], 
  "nb_test": 188, 
  "patch": "diff --git a/wicket-util/src/main/java/org/apache/wicket/util/resource/ResourceUtils.java b/wicket-util/src/main/java/org/apache/wicket/util/resource/ResourceUtils.java\nindex edcd96c..ac1d025 100644\n--- a/wicket-util/src/main/java/org/apache/wicket/util/resource/ResourceUtils.java\n+++ b/wicket-util/src/main/java/org/apache/wicket/util/resource/ResourceUtils.java\n@@ -34,7 +34,8 @@ public class ResourceUtils\n \t/** The default postfix for minified names (ex: /css/mystyle.min.css) **/\r\n \tpublic static final String MIN_POSTFIX_DEFAULT = \"min\";\r\n \t/** Regular expression patter to extract the locale from the filename (ex: de_DE) **/\r\n-\tprivate static final Pattern LOCALE_PATTERN = Pattern.compile(\"_([a-z]{2})(_([A-Z]{2})(_([^_]+))?)?$\");\r\n+\tprivate static final Pattern LOCALE_MIN_PATTERN = Pattern\r\n+\t\t.compile(\"_([a-z]{2})(_([A-Z]{2})(_([^_\\\\.]+))?)?(\\\\.min)?$\");\r\n \t/** Stores standard ISO country codes from {@code java.util.Locale} **/\r\n \tprivate final static Set<String> isoCountries = new HashSet<>(\r\n \t\tArrays.asList(Locale.getISOCountries()));\r\n@@ -77,7 +78,12 @@ public class ResourceUtils\n \t}\r\n \t\r\n \t/**\r\n-\t * Extract the locale from the filename\r\n+\t * Extract the locale from the filename taking into account possible minimized resource name.\r\n+\t * \r\n+\t * E.g. {@code file_us_EN.min.js} will correctly determine a locale of {@code us_EN} by\r\n+\t * stripping the {@code .min} from the filename, the filename returned will be\r\n+\t * {@code file.min.js}, if you want the {@code .min} to be removed as well, use\r\n+\t * {@link #getLocaleFromMinifiedFilename(String)} instead.\r\n \t * \r\n \t * @param path\r\n \t *            The file path\r\n@@ -86,7 +92,8 @@ public class ResourceUtils\n \tpublic static PathLocale getLocaleFromFilename(String path)\r\n \t{\r\n \t\tString extension = \"\";\r\n-\t\tint pos = path.lastIndexOf('.');\r\n+\r\n+\t\tfinal int pos = path.lastIndexOf('.');\r\n \t\tif (pos != -1)\r\n \t\t{\r\n \t\t\textension = path.substring(pos);\r\n@@ -94,12 +101,13 @@ public class ResourceUtils\n \t\t}\r\n \r\n \t\tString filename = Strings.lastPathComponent(path, '/');\r\n-\t\tMatcher matcher = LOCALE_PATTERN.matcher(filename);\r\n+\t\tMatcher matcher = LOCALE_MIN_PATTERN.matcher(filename);\r\n \t\tif (matcher.find())\r\n \t\t{\r\n \t\t\tString language = matcher.group(1);\r\n \t\t\tString country = matcher.group(3);\r\n \t\t\tString variant = matcher.group(5);\r\n+\t\t\tString min = matcher.group(6);\r\n \r\n \t\t\t// did we find a language?\r\n \t\t\tif (language != null)\r\n@@ -124,8 +132,9 @@ public class ResourceUtils\n \r\n \t\t\tif (language != null)\r\n \t\t\t{\r\n-\t\t\t\tpos = path.length() - filename.length() + matcher.start();\r\n-\t\t\t\tString basePath = path.substring(0, pos) + extension;\r\n+\t\t\t\tint languagePos = path.length() - filename.length() + matcher.start();\r\n+\t\t\t\tString basePath = path.substring(0, languagePos) + (min == null ? \"\" : min) +\r\n+\t\t\t\t\textension;\r\n \r\n \t\t\t\tLocale locale = new Locale(language, country != null ? country : \"\",\r\n \t\t\t\t\tvariant != null ? variant : \"\");\r\n", 
  "project": "wicket", 
  "linesAdd": 15, 
  "nb_skipped": 2, 
  "fix_commit": "d547fcd4", 
  "nb_failure": 1, 
  "id": "5966", 
  "linesRem": 6
}