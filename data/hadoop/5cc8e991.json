{
  "project": "hadoop",
  "jira_id": "8606",
  "commit": "5cc8e991",
  "classification": {
    "singleLine": false
  },
  "patch": "diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java\nindex 9b13627288..15c2a896e6 100644\n--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java\n+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java\n@@ -18,6 +18,7 @@\n \n package org.apache.hadoop.yarn.server.resourcemanager;\n \n+import com.google.common.annotations.VisibleForTesting;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.apache.hadoop.conf.Configuration;\n@@ -417,7 +418,8 @@ public QueueLimitCalculator getNodeManagerQueueLimitCalculator() {\n     return nodeMonitor.getThresholdCalculator();\n   }\n \n-  private synchronized List<RemoteNode> getLeastLoadedNodes() {\n+  @VisibleForTesting\n+  synchronized List<RemoteNode> getLeastLoadedNodes() {\n     long currTime = System.currentTimeMillis();\n     if ((currTime - lastCacheUpdateTime > cacheRefreshInterval)\n         || (cachedNodes == null)) {\ndiff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java\nindex 0b7e87cc0b..f14d440bbb 100644\n--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java\n+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java\n@@ -757,6 +757,7 @@ protected void serviceInit(Configuration configuration) throws Exception {\n       }\n \n       masterService = createApplicationMasterService();\n+      createAndRegisterOpportunisticDispatcher(masterService);\n       addService(masterService) ;\n       rmContext.setApplicationMasterService(masterService);\n \n@@ -807,6 +809,23 @@ protected void serviceInit(Configuration configuration) throws Exception {\n       super.serviceInit(conf);\n     }\n \n+    private void createAndRegisterOpportunisticDispatcher(\n+        ApplicationMasterService service) {\n+      if (!isOpportunisticSchedulingEnabled(conf)) {\n+        return;\n+      }\n+      EventDispatcher oppContainerAllocEventDispatcher = new EventDispatcher(\n+          (OpportunisticContainerAllocatorAMService) service,\n+          OpportunisticContainerAllocatorAMService.class.getName());\n+      // Add an event dispatcher for the\n+      // OpportunisticContainerAllocatorAMService to handle node\n+      // additions, updates and removals. Since the SchedulerEvent is currently\n+      // a super set of theses, we register interest for it.\n+      addService(oppContainerAllocEventDispatcher);\n+      rmDispatcher\n+          .register(SchedulerEventType.class, oppContainerAllocEventDispatcher);\n+    }\n+\n     @Override\n     protected void serviceStart() throws Exception {\n       RMStateStore rmStore = rmContext.getStateStore();\n@@ -1335,8 +1354,7 @@ protected ClientRMService createClientRMService() {\n \n   protected ApplicationMasterService createApplicationMasterService() {\n     Configuration config = this.rmContext.getYarnConfiguration();\n-    if (YarnConfiguration.isOpportunisticContainerAllocationEnabled(config)\n-        || YarnConfiguration.isDistSchedulingEnabled(config)) {\n+    if (isOpportunisticSchedulingEnabled(conf)) {\n       if (YarnConfiguration.isDistSchedulingEnabled(config) &&\n           !YarnConfiguration\n               .isOpportunisticContainerAllocationEnabled(config)) {\n@@ -1348,16 +1366,6 @@ protected ApplicationMasterService createApplicationMasterService() {\n           oppContainerAllocatingAMService =\n           new OpportunisticContainerAllocatorAMService(this.rmContext,\n               scheduler);\n-      EventDispatcher oppContainerAllocEventDispatcher =\n-          new EventDispatcher(oppContainerAllocatingAMService,\n-              OpportunisticContainerAllocatorAMService.class.getName());\n-      // Add an event dispatcher for the\n-      // OpportunisticContainerAllocatorAMService to handle node\n-      // additions, updates and removals. Since the SchedulerEvent is currently\n-      // a super set of theses, we register interest for it.\n-      addService(oppContainerAllocEventDispatcher);\n-      rmDispatcher.register(SchedulerEventType.class,\n-          oppContainerAllocEventDispatcher);\n       this.rmContext.setContainerQueueLimitCalculator(\n           oppContainerAllocatingAMService.getNodeManagerQueueLimitCalculator());\n       return oppContainerAllocatingAMService;\n@@ -1373,6 +1381,11 @@ protected RMSecretManagerService createRMSecretManagerService() {\n     return new RMSecretManagerService(conf, rmContext);\n   }\n \n+  private boolean isOpportunisticSchedulingEnabled(Configuration conf) {\n+    return YarnConfiguration.isOpportunisticContainerAllocationEnabled(conf)\n+        || YarnConfiguration.isDistSchedulingEnabled(conf);\n+  }\n+\n   /**\n    * Create RMDelegatedNodeLabelsUpdater based on configuration.\n    */\n",
  "files": 2,
  "linesAdd": 27,
  "linesRem": 13,
  "failing_tests": [],
  "nb_test": 0,
  "nb_failure": 0,
  "nb_error": 0,
  "nb_skipped": 0
}