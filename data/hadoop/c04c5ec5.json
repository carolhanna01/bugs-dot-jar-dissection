{
  "project": "hadoop",
  "jira_id": "13352",
  "commit": "c04c5ec5",
  "classification": {
    "singleLine": false
  },
  "patch": "diff --git a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java\nindex 9d2fae6147..8199c9b8c2 100644\n--- a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java\n+++ b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java\n@@ -136,6 +136,11 @@ public final class HttpServer2 implements FilterContainer {\n   static final String STATE_DESCRIPTION_ALIVE = \" - alive\";\n   static final String STATE_DESCRIPTION_NOT_LIVE = \" - not live\";\n   private final SignerSecretProvider secretProvider;\n+  private XFrameOption xFrameOption;\n+  private boolean xFrameOptionIsEnabled;\n+  private static final String X_FRAME_VALUE = \"xFrameOption\";\n+  private static final String X_FRAME_ENABLED = \"X_FRAME_ENABLED\";\n+\n \n   /**\n    * Class to construct instances of HTTP server with specific options.\n@@ -168,6 +173,9 @@ public static class Builder {\n     private String authFilterConfigurationPrefix = \"hadoop.http.authentication.\";\n     private String excludeCiphers;\n \n+    private boolean xFrameEnabled;\n+    private XFrameOption xFrameOption = XFrameOption.SAMEORIGIN;\n+\n     public Builder setName(String name){\n       this.name = name;\n       return this;\n@@ -276,6 +284,30 @@ public Builder excludeCiphers(String pExcludeCiphers) {\n       return this;\n     }\n \n+    /**\n+     * Adds the ability to control X_FRAME_OPTIONS on HttpServer2.\n+     * @param xFrameEnabled - True enables X_FRAME_OPTIONS false disables it.\n+     * @return Builder.\n+     */\n+    public Builder configureXFrame(boolean xFrameEnabled) {\n+      this.xFrameEnabled = xFrameEnabled;\n+      return this;\n+    }\n+\n+    /**\n+     * Sets a valid X-Frame-option that can be used by HttpServer2.\n+     * @param option - String DENY, SAMEORIGIN or ALLOW-FROM are the only valid\n+     *               options. Any other value will throw IllegalArgument\n+     *               Exception.\n+     * @return  Builder.\n+     */\n+    public Builder setXFrameOption(String option) {\n+      this.xFrameOption = XFrameOption.getEnum(option);\n+      return this;\n+    }\n+\n+\n+\n     public HttpServer2 build() throws IOException {\n       Preconditions.checkNotNull(name, \"name is not set\");\n       Preconditions.checkState(!endpoints.isEmpty(), \"No endpoints specified\");\n@@ -342,6 +374,9 @@ private HttpServer2(final Builder b) throws IOException {\n     this.webServer = new Server();\n     this.adminsAcl = b.adminsAcl;\n     this.webAppContext = createWebAppContext(b.name, b.conf, adminsAcl, appDir);\n+    this.xFrameOptionIsEnabled = b.xFrameEnabled;\n+    this.xFrameOption = b.xFrameOption;\n+\n     try {\n       this.secretProvider =\n           constructSecretProvider(b, webAppContext.getServletContext());\n@@ -398,7 +433,11 @@ private void initializeWebServer(String name, String hostName,\n \n     addDefaultApps(contexts, appDir, conf);\n \n-    addGlobalFilter(\"safety\", QuotingInputFilter.class.getName(), null);\n+    Map<String, String> xFrameParams = new HashMap<>();\n+    xFrameParams.put(X_FRAME_ENABLED,\n+        String.valueOf(this.xFrameOptionIsEnabled));\n+    xFrameParams.put(X_FRAME_VALUE,  this.xFrameOption.toString());\n+    addGlobalFilter(\"safety\", QuotingInputFilter.class.getName(), xFrameParams);\n     final FilterInitializer[] initializers = getFilterInitializers(conf);\n     if (initializers != null) {\n       conf = new Configuration(conf);\n@@ -1119,7 +1158,7 @@ public void doGet(HttpServletRequest request, HttpServletResponse response)\n    * sets X-FRAME-OPTIONS in the header to mitigate clickjacking attacks.\n    */\n   public static class QuotingInputFilter implements Filter {\n-    private static final XFrameOption X_FRAME_OPTION = XFrameOption.SAMEORIGIN;\n+\n     private FilterConfig config;\n \n     public static class RequestQuoter extends HttpServletRequestWrapper {\n@@ -1239,7 +1278,11 @@ public void doFilter(ServletRequest request,\n       } else if (mime.startsWith(\"application/xml\")) {\n         httpResponse.setContentType(\"text/xml; charset=utf-8\");\n       }\n-      httpResponse.addHeader(\"X-FRAME-OPTIONS\", X_FRAME_OPTION.toString());\n+\n+      if(Boolean.valueOf(this.config.getInitParameter(X_FRAME_ENABLED))) {\n+        httpResponse.addHeader(\"X-FRAME-OPTIONS\",\n+            this.config.getInitParameter(X_FRAME_VALUE));\n+      }\n       chain.doFilter(quoted, httpResponse);\n     }\n \n@@ -1274,5 +1317,23 @@ public enum XFrameOption {\n     public String toString() {\n       return this.name;\n     }\n+\n+    /**\n+     * We cannot use valueOf since the AllowFrom enum differs from its value\n+     * Allow-From. This is a helper method that does exactly what valueof does,\n+     * but allows us to handle the AllowFrom issue gracefully.\n+     *\n+     * @param value - String must be DENY, SAMEORIGIN or ALLOW-FROM.\n+     * @return XFrameOption or throws IllegalException.\n+     */\n+    private static XFrameOption getEnum(String value) {\n+      Preconditions.checkState(value != null && !value.isEmpty());\n+      for (XFrameOption xoption : values()) {\n+        if (value.equals(xoption.toString())) {\n+          return xoption;\n+        }\n+      }\n+      throw new IllegalArgumentException(\"Unexpected value in xFrameOption.\");\n+    }\n   }\n }\n",
  "files": 1,
  "linesAdd": 64,
  "linesRem": 3,
  "failing_tests": [],
  "nb_test": 0,
  "nb_failure": 0,
  "nb_error": 0,
  "nb_skipped": 0
}