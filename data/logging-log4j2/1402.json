{"files": 1, "singleLine": false, "nb_error": 1, "failing_tests": ["RollingFilePropertiesTest.testPropertiesConfiguration:45 \u00bb NullPointer"], "nb_test": 1181, "patch": "diff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationBuilder.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationBuilder.java\nindex 51bdcca..2c70234 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationBuilder.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationBuilder.java\n@@ -120,24 +120,56 @@ public class PropertiesConfigurationBuilder extends ConfigurationBuilderFactory\n             }\n         }\n \n-        final Map<String, Properties> filters = PropertiesUtil.partitionOnCommonPrefixes(\n-            PropertiesUtil.extractSubset(rootProperties, \"filter\"));\n-        for (final Map.Entry<String, Properties> entry : filters.entrySet()) {\n-            builder.add(createFilter(entry.getKey().trim(), entry.getValue()));\n+        String filterProp = rootProperties.getProperty(\"filters\");\n+        if (filterProp != null) {\n+            String[] filterNames = filterProp.split(\",\");\n+            for (String filterName : filterNames) {\n+                String name = filterName.trim();\n+                builder.add(createFilter(name, PropertiesUtil.extractSubset(rootProperties, \"filter.\" + name)));\n+            }\n+        } else {\n+\n+            final Map<String, Properties> filters = PropertiesUtil\n+                    .partitionOnCommonPrefixes(PropertiesUtil.extractSubset(rootProperties, \"filter\"));\n+            for (final Map.Entry<String, Properties> entry : filters.entrySet()) {\n+                builder.add(createFilter(entry.getKey().trim(), entry.getValue()));\n+            }\n         }\n \n-        final Map<String, Properties> appenders = PropertiesUtil.partitionOnCommonPrefixes(\n-            PropertiesUtil.extractSubset(rootProperties, \"appender\"));\n-        for (final Map.Entry<String, Properties> entry : appenders.entrySet()) {\n-            builder.add(createAppender(entry.getKey().trim(), entry.getValue()));\n+        String appenderProp = rootProperties.getProperty(\"appenders\");\n+        if (appenderProp != null) {\n+            String[] appenderNames = appenderProp.split(\",\");\n+            for (String appenderName : appenderNames) {\n+                String name = appenderName.trim();\n+                builder.add(createAppender(appenderName.trim(),\n+                        PropertiesUtil.extractSubset(rootProperties, \"appender.\" + name)));\n+            }\n+        } else {\n+            final Map<String, Properties> appenders = PropertiesUtil\n+                    .partitionOnCommonPrefixes(PropertiesUtil.extractSubset(rootProperties, \"appender\"));\n+            for (final Map.Entry<String, Properties> entry : appenders.entrySet()) {\n+                builder.add(createAppender(entry.getKey().trim(), entry.getValue()));\n+            }\n         }\n \n-        final Map<String, Properties> loggers = PropertiesUtil.partitionOnCommonPrefixes(\n-            PropertiesUtil.extractSubset(rootProperties, \"logger\"));\n-        for (final Map.Entry<String, Properties> entry : loggers.entrySet()) {\n-            final String name = entry.getKey().trim();\n-            if (!name.equals(LoggerConfig.ROOT)) {\n-                builder.add(createLogger(name, entry.getValue()));\n+        String loggerProp = rootProperties.getProperty(\"loggers\");\n+        if (loggerProp != null) {\n+            String[] loggerNames = loggerProp.split(\",\");\n+            for (String loggerName : loggerNames) {\n+                String name = loggerName.trim();\n+                if (!name.equals(LoggerConfig.ROOT)) {\n+                    builder.add(createLogger(name, PropertiesUtil.extractSubset(rootProperties, \"logger.\" +\n+                            name)));\n+                }\n+            }\n+        } else {\n+            final Map<String, Properties> loggers = PropertiesUtil\n+                    .partitionOnCommonPrefixes(PropertiesUtil.extractSubset(rootProperties, \"logger\"));\n+            for (final Map.Entry<String, Properties> entry : loggers.entrySet()) {\n+                final String name = entry.getKey().trim();\n+                if (!name.equals(LoggerConfig.ROOT)) {\n+                    builder.add(createLogger(name, entry.getValue()));\n+                }\n             }\n         }\n \n", "project": "logging-log4j2", "linesAdd": 46, "nb_skipped": 3, "fix_commit": "7792679c", "nb_failure": 0, "id": "1402", "linesRem": 14}