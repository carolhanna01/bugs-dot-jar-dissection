{
  "files": 1, 
  "singleLine": false, 
  "nb_error": 1, 
  "failing_tests": [
    "TypeExtractorTest.testDuplicateValueNested:1486 \u00bb InvalidTypes Type of TypeVar..."
  ], 
  "nb_test": 456, 
  "patch": "diff --git a/flink-java/src/main/java/org/apache/flink/api/java/typeutils/TypeExtractor.java b/flink-java/src/main/java/org/apache/flink/api/java/typeutils/TypeExtractor.java\nindex d5f3619..55f6b1f 100644\n--- a/flink-java/src/main/java/org/apache/flink/api/java/typeutils/TypeExtractor.java\n+++ b/flink-java/src/main/java/org/apache/flink/api/java/typeutils/TypeExtractor.java\n@@ -421,12 +421,9 @@ public class TypeExtractor {\n \t\t\tType[] tupleElements = ((ParameterizedType) inType).getActualTypeArguments();\n \t\t\t// go thru all tuple elements and search for type variables\n \t\t\tfor(int i = 0; i < tupleElements.length; i++) {\n-\t\t\t\tif(tupleElements[i] instanceof TypeVariable) {\n-\t\t\t\t\tinType = materializeTypeVariable(returnTypeHierarchy, (TypeVariable<?>) tupleElements[i]);\n-\t\t\t\t\tinfo = findCorrespondingInfo(returnTypeVar, inType, ((TupleTypeInfo<?>) inTypeInfo).getTypeAt(i));\n-\t\t\t\t\tif(info != null) {\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\t}\n+\t\t\t\tinfo = createTypeInfoFromInput(returnTypeVar, returnTypeHierarchy, tupleElements[i], ((TupleTypeInfo<?>) inTypeInfo).getTypeAt(i));\n+\t\t\t\tif(info != null) {\n+\t\t\t\t\tbreak;\n \t\t\t\t}\n \t\t\t}\n \t\t}\n", 
  "project": "flink", 
  "linesAdd": 3, 
  "nb_skipped": 1, 
  "fix_commit": "27e40205", 
  "nb_failure": 0, 
  "id": "1133", 
  "linesRem": 6
}