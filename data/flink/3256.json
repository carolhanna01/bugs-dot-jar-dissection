{"nb_failure": 1, "nb_error": 0, "failing_tests": ["ExecutionGraphRestartTest.testConstraintsAfterRestart:143->restartAfterFailure:405 expected:<RUNNING> but was:<FAILING>"], "patch": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/ExecutionGraph.java b/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/ExecutionGraph.java\nindex 9085483..a03f0bf 100755\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/ExecutionGraph.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/ExecutionGraph.java\n@@ -51,6 +51,7 @@ import org.apache.flink.runtime.jobgraph.JobStatus;\n import org.apache.flink.runtime.jobgraph.JobVertexID;\n import org.apache.flink.runtime.jobgraph.ScheduleMode;\n import org.apache.flink.runtime.jobmanager.RecoveryMode;\n+import org.apache.flink.runtime.jobmanager.scheduler.CoLocationGroup;\n import org.apache.flink.runtime.jobmanager.scheduler.Scheduler;\n import org.apache.flink.runtime.messages.ExecutionGraphMessages;\n import org.apache.flink.runtime.taskmanager.TaskExecutionState;\n@@ -76,6 +77,8 @@ import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n+import java.util.Collection;\n+import java.util.HashSet;\n import java.util.NoSuchElementException;\n import java.util.UUID;\n import java.util.concurrent.Callable;\n@@ -147,7 +150,7 @@ public class ExecutionGraph implements Serializable {\n \n \t/** All vertices, in the order in which they were created **/\n \tprivate final List<ExecutionJobVertex> verticesInCreationOrder;\n-\n+\t\n \t/** All intermediate results that are part of this graph */\n \tprivate final ConcurrentHashMap<IntermediateDataSetID, IntermediateResult> intermediateResults;\n \n@@ -719,7 +722,7 @@ public class ExecutionGraph implements Serializable {\n \t\t\t\t\t\t\tres.getId(), res, previousDataSet));\n \t\t\t\t}\n \t\t\t}\n-\n+\t\t\t\n \t\t\tthis.verticesInCreationOrder.add(ejv);\n \t\t}\n \t}\n@@ -849,7 +852,16 @@ public class ExecutionGraph implements Serializable {\n \n \t\t\t\tthis.currentExecutions.clear();\n \n+\t\t\t\tCollection<CoLocationGroup> colGroups = new HashSet<>();\n+\t\t\t\t\n \t\t\t\tfor (ExecutionJobVertex jv : this.verticesInCreationOrder) {\n+\t\t\t\t\t\n+\t\t\t\t\tCoLocationGroup cgroup = jv.getCoLocationGroup();\n+\t\t\t\t\tif(cgroup != null && !colGroups.contains(cgroup)){\n+\t\t\t\t\t\tcgroup.resetConstraints();\n+\t\t\t\t\t\tcolGroups.add(cgroup);\n+\t\t\t\t\t}\n+\t\t\t\t\t\n \t\t\t\t\tjv.resetForNewExecution();\n \t\t\t\t}\n \ndiff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/ExecutionJobVertex.java b/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/ExecutionJobVertex.java\nindex 93ae7c1..bc368ab 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/ExecutionJobVertex.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/ExecutionJobVertex.java\n@@ -362,9 +362,6 @@ public class ExecutionJobVertex implements Serializable {\n \t\t\tif (slotSharingGroup != null) {\n \t\t\t\tslotSharingGroup.clearTaskAssignment();\n \t\t\t}\n-\t\t\tif (coLocationGroup != null) {\n-\t\t\t\tcoLocationGroup.resetConstraints();\n-\t\t\t}\n \t\t\t\n \t\t\t// reset vertices one by one. if one reset fails, the \"vertices in final state\"\n \t\t\t// fields will be consistent to handle triggered cancel calls\n", "nb_test": 943, "nb_skipped": 1, "fix_commit": "44061882", "id": "3256"}