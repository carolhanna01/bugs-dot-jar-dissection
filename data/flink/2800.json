{
  "files": 1, 
  "singleLine": false, 
  "nb_error": 1, 
  "failing_tests": [
    "KryoClearedBufferTest.testOutputBufferedBeingClearedInCaseOfException:80 \u00bb EOF"
  ], 
  "nb_test": 1063, 
  "patch": "diff --git a/flink-java/src/main/java/org/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializer.java b/flink-java/src/main/java/org/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializer.java\nindex f825fc6..8549e26 100644\n--- a/flink-java/src/main/java/org/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializer.java\n+++ b/flink-java/src/main/java/org/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializer.java\n@@ -58,7 +58,7 @@ import java.util.Objects;\n  * @param <T> The type to be serialized.\n  */\n public class KryoSerializer<T> extends TypeSerializer<T> {\n-\t\n+\n \tprivate static final long serialVersionUID = 3L;\n \n \t// ------------------------------------------------------------------------\n@@ -82,7 +82,7 @@ public class KryoSerializer<T> extends TypeSerializer<T> {\n \t\n \tprivate transient Input input;\n \tprivate transient Output output;\n-\t\n+\n \t// ------------------------------------------------------------------------\n \n \tpublic KryoSerializer(Class<T> type, ExecutionConfig executionConfig){\n@@ -182,11 +182,22 @@ public class KryoSerializer<T> extends TypeSerializer<T> {\n \t\t\tpreviousOut = target;\n \t\t}\n \n+\t\t// Sanity check: Make sure that the output is cleared/has been flushed by the last call\n+\t\t// otherwise data might be written multiple times in case of a previous EOFException\n+\t\tif (output.position() != 0) {\n+\t\t\tthrow new IllegalStateException(\"The Kryo Output still contains data from a previous \" +\n+\t\t\t\t\"serialize call. It has to be flushed or cleared at the end of the serialize call.\");\n+\t\t}\n+\n \t\ttry {\n \t\t\tkryo.writeClassAndObject(output, record);\n \t\t\toutput.flush();\n \t\t}\n \t\tcatch (KryoException ke) {\n+\t\t\t// make sure that the Kryo output buffer is cleared in case that we can recover from\n+\t\t\t// the exception (e.g. EOFException which denotes buffer full)\n+\t\t\toutput.clear();\n+\n \t\t\tThrowable cause = ke.getCause();\n \t\t\tif (cause instanceof EOFException) {\n \t\t\t\tthrow (EOFException) cause;\n@@ -212,7 +223,7 @@ public class KryoSerializer<T> extends TypeSerializer<T> {\n \t\t} catch (KryoException ke) {\n \t\t\tThrowable cause = ke.getCause();\n \n-\t\t\tif(cause instanceof EOFException) {\n+\t\t\tif (cause instanceof EOFException) {\n \t\t\t\tthrow (EOFException) cause;\n \t\t\t} else {\n \t\t\t\tthrow ke;\n", 
  "project": "flink", 
  "linesAdd": 14, 
  "nb_skipped": 0, 
  "fix_commit": "b654e989", 
  "nb_failure": 0, 
  "id": "2800", 
  "linesRem": 3
}