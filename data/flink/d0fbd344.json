{
  "project": "flink",
  "jira_id": "15062",
  "commit": "d0fbd344",
  "classification": {
    "singleLine": false
  },
  "patch": "diff --git a/flink-formats/flink-orc/src/main/java/org/apache/flink/orc/vector/AbstractOrcColumnVector.java b/flink-formats/flink-orc/src/main/java/org/apache/flink/orc/vector/AbstractOrcColumnVector.java\nindex 3d68bc61648..61511f98bd8 100644\n--- a/flink-formats/flink-orc/src/main/java/org/apache/flink/orc/vector/AbstractOrcColumnVector.java\n+++ b/flink-formats/flink-orc/src/main/java/org/apache/flink/orc/vector/AbstractOrcColumnVector.java\n@@ -113,7 +113,7 @@ public abstract class AbstractOrcColumnVector implements\n \t\t\tcase DATE:\n \t\t\t\treturn createLongVector(batchSize, dateToInternal((Date) value));\n \t\t\tcase TIMESTAMP_WITHOUT_TIME_ZONE:\n-\t\t\t\treturn createTimestampVector(batchSize, (LocalDateTime) value);\n+\t\t\t\treturn createTimestampVector(batchSize, value);\n \t\t\tdefault:\n \t\t\t\tthrow new UnsupportedOperationException(\"Unsupported type: \" + type);\n \t\t}\n@@ -176,20 +176,15 @@ public abstract class AbstractOrcColumnVector implements\n \t\treturn dcv;\n \t}\n \n-\tprivate static TimestampColumnVector createTimestampVector(int batchSize, LocalDateTime value) {\n+\tprivate static TimestampColumnVector createTimestampVector(int batchSize, Object value) {\n \t\tTimestampColumnVector lcv = new TimestampColumnVector(batchSize);\n \t\tif (value == null) {\n \t\t\tlcv.noNulls = false;\n \t\t\tlcv.isNull[0] = true;\n \t\t\tlcv.isRepeating = true;\n \t\t} else {\n-\t\t\tlong epochDay = value.toLocalDate().toEpochDay();\n-\t\t\tlong nanoOfDay = value.toLocalTime().toNanoOfDay();\n-\n-\t\t\tlong millisecond = epochDay * 24 * 60 * 60 * 1000 + nanoOfDay / 1_000_000;\n-\t\t\tint nanoOfSecond = (int) (nanoOfDay % 1_000_000_000);\n-\t\t\tTimestamp timestamp = new Timestamp(millisecond);\n-\t\t\ttimestamp.setNanos(nanoOfSecond);\n+\t\t\tTimestamp timestamp = value instanceof LocalDateTime ?\n+\t\t\t\tTimestamp.valueOf((LocalDateTime) value) : (Timestamp) value;\n \t\t\tlcv.fill(timestamp);\n \t\t\tlcv.isNull[0] = false;\n \t\t}\ndiff --git a/flink-formats/flink-orc/src/main/java/org/apache/flink/orc/vector/OrcTimestampColumnVector.java b/flink-formats/flink-orc/src/main/java/org/apache/flink/orc/vector/OrcTimestampColumnVector.java\nindex dec2515f9fb..6917e1183da 100644\n--- a/flink-formats/flink-orc/src/main/java/org/apache/flink/orc/vector/OrcTimestampColumnVector.java\n+++ b/flink-formats/flink-orc/src/main/java/org/apache/flink/orc/vector/OrcTimestampColumnVector.java\n@@ -22,6 +22,8 @@ import org.apache.flink.table.dataformat.SqlTimestamp;\n \n import org.apache.hadoop.hive.ql.exec.vector.TimestampColumnVector;\n \n+import java.sql.Timestamp;\n+\n /**\n  * This column vector is used to adapt hive's TimestampColumnVector to\n  * Flink's TimestampColumnVector.\n@@ -39,8 +41,8 @@ public class OrcTimestampColumnVector extends AbstractOrcColumnVector implements\n \t@Override\n \tpublic SqlTimestamp getTimestamp(int i, int precision) {\n \t\tint index = vector.isRepeating ? 0 : i;\n-\t\treturn SqlTimestamp.fromEpochMillis(\n-\t\t\t\tvector.time[index],\n-\t\t\t\tSqlTimestamp.isCompact(precision) ? 0 : vector.nanos[index] % 1_000_000);\n+\t\tTimestamp timestamp = new Timestamp(vector.time[index]);\n+\t\ttimestamp.setNanos(vector.nanos[index]);\n+\t\treturn SqlTimestamp.fromTimestamp(timestamp);\n \t}\n }\n",
  "files": 2,
  "linesAdd": 9,
  "linesRem": 12,
  "failing_tests": ["org.apache.flink.orc.OrcColumnarRowSplitReaderTest.testReadFileWithTypes"],
  "nb_test": 36,
  "nb_failure": 1,
  "nb_error": 0,
  "nb_skipped": 0
}