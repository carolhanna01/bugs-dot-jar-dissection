{"files": 1, "singleLine": false, "nb_error": 0, "failing_tests": ["UnionReplacementTest.testUnionReplacement:46 The Pact compiler is unable to compile this plan correctly."], "nb_test": 64, "patch": "diff --git a/stratosphere-compiler/src/main/java/eu/stratosphere/compiler/PactCompiler.java b/stratosphere-compiler/src/main/java/eu/stratosphere/compiler/PactCompiler.java\nindex bf3d6af..5a0a3e1 100644\n--- a/stratosphere-compiler/src/main/java/eu/stratosphere/compiler/PactCompiler.java\n+++ b/stratosphere-compiler/src/main/java/eu/stratosphere/compiler/PactCompiler.java\n@@ -1195,7 +1195,7 @@ public class PactCompiler {\n \tprivate static final class BinaryUnionReplacer implements Visitor<PlanNode> {\n \t\t\n \t\tprivate final Set<PlanNode> seenBefore = new HashSet<PlanNode>();\n-\t\t\n+\n \t\t@Override\n \t\tpublic boolean preVisit(PlanNode visitable) {\n \t\t\tif (this.seenBefore.add(visitable)) {\n@@ -1217,43 +1217,20 @@ public class PactCompiler {\n \t\t\t\tfinal Channel in2 = unionNode.getInput2();\n \t\t\t\n \t\t\t\tPlanNode newUnionNode;\n-\t\t\t\t\n-\t\t\t\t// if any input is cached, we keep this as a binary union and do not collapse it into a\n-\t\t\t\t// n-ary union\n-//\t\t\t\tif (in1.getTempMode().isCached() || in2.getTempMode().isCached()) {\n-//\t\t\t\t\t// replace this node by an explicit operator\n-//\t\t\t\t\tChannel cached, pipelined;\n-//\t\t\t\t\tif (in1.getTempMode().isCached()) {\n-//\t\t\t\t\t\tcached = in1;\n-//\t\t\t\t\t\tpipelined = in2;\n-//\t\t\t\t\t} else {\n-//\t\t\t\t\t\tcached = in2;\n-//\t\t\t\t\t\tpipelined = in1;\n-//\t\t\t\t\t}\n-//\t\t\t\t\t\n-//\t\t\t\t\tnewUnionNode = new DualInputPlanNode(unionNode.getOriginalOptimizerNode(), cached, pipelined,\n-//\t\t\t\t\t\tDriverStrategy.UNION_WITH_CACHED);\n-//\t\t\t\t\tnewUnionNode.initProperties(unionNode.getGlobalProperties(), new LocalProperties());\n-//\t\t\t\t\t\n-//\t\t\t\t\tin1.setTarget(newUnionNode);\n-//\t\t\t\t\tin2.setTarget(newUnionNode);\n-//\t\t\t\t} else {\n-\t\t\t\t\t// collect the union inputs to collapse this operator with \n-\t\t\t\t\t// its collapsed predecessors. check whether an input is materialized to prevent\n-\t\t\t\t\t// collapsing\n-\t\t\t\t\tList<Channel> inputs = new ArrayList<Channel>();\n-\t\t\t\t\tcollect(in1, inputs);\n-\t\t\t\t\tcollect(in2, inputs);\n-\t\t\t\t\t\n-\t\t\t\t\tnewUnionNode = new NAryUnionPlanNode(unionNode.getOptimizerNode(), inputs, unionNode.getGlobalProperties());\n-\t\t\t\t\t\n-\t\t\t\t\t// adjust the input channels to have their target point to the new union node\n-\t\t\t\t\tfor (Channel c : inputs) {\n-\t\t\t\t\t\tc.setTarget(newUnionNode);\n-\t\t\t\t\t}\n-//\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tunionNode.getOutgoingChannels().get(0).swapUnionNodes(newUnionNode);\n+\n+\t\t\t\tList<Channel> inputs = new ArrayList<Channel>();\n+\t\t\t\tcollect(in1, inputs);\n+\t\t\t\tcollect(in2, inputs);\n+\n+\t\t\t\tnewUnionNode = new NAryUnionPlanNode(unionNode.getOptimizerNode(), inputs, unionNode.getGlobalProperties());\n+\n+\t\t\t\tfor (Channel c : inputs) {\n+\t\t\t\t\tc.setTarget(newUnionNode);\n+\t\t\t\t}\n+\n+\t\t\t\tfor(Channel channel : unionNode.getOutgoingChannels()){\n+\t\t\t\t\tchannel.swapUnionNodes(newUnionNode);\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t\t\n", "project": "flink", "linesAdd": 15, "nb_skipped": 0, "fix_commit": "32a003d5", "nb_failure": 1, "id": "996", "linesRem": 38}