{
  "project": "ambari",
  "jira_id": "16129",
  "commit": "bff239c0",
  "classification": {
    "singleLine": false
  },
  "patch": "diff --git a/ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelper.java b/ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelper.java\nindex eb45c9ec4f..7833e01492 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelper.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelper.java\n@@ -22,10 +22,52 @@ import java.util.Set;\n  */\n public interface LoggingRequestHelper {\n \n+  /**\n+   * Sends a search query request to the LogSearch server\n+   *\n+   * @param queryParameters the query parameters to pass to LogSearch\n+   *\n+   * @return a LogQueryResponse, containing the results of the search\n+   */\n   public LogQueryResponse sendQueryRequest(Map<String, String> queryParameters);\n \n+  /**\n+   * Sends a request to obtain the log file name for a given component, on\n+   *   a given host\n+   *\n+   * @param componentName the component name\n+   * @param hostName the host name\n+   *\n+   * @return a Set of Strings that include the log file names associated\n+   *         with this component/host combination\n+   */\n   public Set<String> sendGetLogFileNamesRequest(String componentName, String hostName);\n \n+  /**\n+   * Sends a request to obtain the log level counts for a given component on\n+   *   a given host\n+   *\n+   * @param componentName the component name\n+   * @param hostName the host name\n+   *\n+   * @return a LogLevelQueryResponse, containing the log level counts for this\n+   *         component/host combination\n+   */\n   public LogLevelQueryResponse sendLogLevelQueryRequest(String componentName, String hostName);\n \n+  /**\n+   * Appends the required LogSearch query parameters to a base URI\n+   *\n+   * @param baseURI the base URI for this request, typically the URI to the\n+   *                Ambari Integration searchEngine component\n+   *\n+   * @param componentName the component name\n+   * @param hostName the host name\n+   *\n+   * @return a URI String that refers to the tail results of\n+   *         the log file associated with this component/host\n+   *         combination\n+   */\n+  public String createLogFileTailURI(String baseURI, String componentName, String hostName);\n+\n }\ndiff --git a/ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java b/ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java\nindex c1afce01ab..d8c71e2465 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java\n@@ -68,6 +68,14 @@ public class LoggingRequestHelperImpl implements LoggingRequestHelper {\n \n   private static final String LOGSEARCH_ADMIN_CREDENTIAL_NAME = \"logsearch.admin.credential\";\n \n+  private static final String COMPONENT_QUERY_PARAMETER_NAME = \"component_name\";\n+\n+  private static final String HOST_QUERY_PARAMETER_NAME = \"host_name\";\n+\n+  private static final String DEFAULT_PAGE_SIZE = \"50\";\n+\n+  private static final String PAGE_SIZE_QUERY_PARAMETER_NAME = \"pageSize\";\n+\n   private static AtomicInteger errorLogCounterForLogSearchConnectionExceptions = new AtomicInteger(0);\n \n   private final String hostName;\n@@ -180,8 +188,8 @@ public class LoggingRequestHelperImpl implements LoggingRequestHelper {\n     // TODO, this current method will be a temporary workaround\n     // TODO, until the new LogSearch API method is available to handle this request\n \n-    queryParameters.put(\"host\", hostName);\n-    queryParameters.put(\"components_name\",componentName);\n+    queryParameters.put(HOST_QUERY_PARAMETER_NAME, hostName);\n+    queryParameters.put(COMPONENT_QUERY_PARAMETER_NAME,componentName);\n     // ask for page size of 1, since we really only want a single entry to\n     // get the file path name\n     queryParameters.put(\"pageSize\", \"1\");\n@@ -229,6 +237,24 @@ public class LoggingRequestHelperImpl implements LoggingRequestHelper {\n     return null;\n   }\n \n+  /**\n+   * Generates the log file tail URI, using the LogSearch server's\n+   * query parameters.\n+   *\n+   * @param baseURI the base URI for this request, typically the URI to the\n+   *                Ambari Integration searchEngine component\n+   *\n+   * @param componentName the component name\n+   * @param hostName the host name\n+   *\n+   * @return\n+   */\n+  @Override\n+  public String createLogFileTailURI(String baseURI, String componentName, String hostName) {\n+    return baseURI + \"?\" + COMPONENT_QUERY_PARAMETER_NAME + \"=\" + componentName + \"&\" + HOST_QUERY_PARAMETER_NAME + \"=\" + hostName\n+      + \"&\" + PAGE_SIZE_QUERY_PARAMETER_NAME + \"=\" + DEFAULT_PAGE_SIZE;\n+  }\n+\n   private static ObjectReader createObjectReader(Class type) {\n     // setup the Jackson mapper/reader to read in the data structure\n     ObjectMapper mapper = createJSONObjectMapper();\n@@ -263,8 +289,8 @@ public class LoggingRequestHelperImpl implements LoggingRequestHelper {\n     Map<String, String> queryParameters = new HashMap<String, String>();\n     // set the query parameters to limit this level count\n     // request to the specific component on the specified host\n-    queryParameters.put(\"host\", hostName);\n-    queryParameters.put(\"components_name\",componentName);\n+    queryParameters.put(HOST_QUERY_PARAMETER_NAME, hostName);\n+    queryParameters.put(COMPONENT_QUERY_PARAMETER_NAME,componentName);\n \n     // add any query strings specified\n     for (String key : queryParameters.keySet()) {\ndiff --git a/ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingSearchPropertyProvider.java b/ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingSearchPropertyProvider.java\nindex f80bc6de84..ff7e7f5a96 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingSearchPropertyProvider.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingSearchPropertyProvider.java\n@@ -46,14 +46,6 @@ public class LoggingSearchPropertyProvider implements PropertyProvider {\n \n   private static final String PATH_TO_SEARCH_ENGINE = \"/logging/searchEngine\";\n \n-  private static final String DEFAULT_PAGE_SIZE = \"50\";\n-\n-  private static final String COMPONENT_QUERY_PARAMETER_NAME = \"components_name\";\n-\n-  private static final String HOST_QUERY_PARAMETER_NAME = \"host\";\n-\n-  private static final String PAGE_SIZE_QUERY_PARAMETER_NAME = \"pageSize\";\n-\n   private static AtomicInteger errorLogCounterForLogSearchConnectionExceptions = new AtomicInteger(0);\n \n   private final LoggingRequestHelperFactory requestHelperFactory;\n@@ -113,7 +103,7 @@ public class LoggingSearchPropertyProvider implements PropertyProvider {\n             for (String fileName : logFileNames) {\n               // generate the URIs that can be used by clients to obtain search results/tail log results/etc\n               final String searchEngineURI = controller.getAmbariServerURI(getFullPathToSearchEngine(clusterName));\n-              final String logFileTailURI = createLogFileTailURI(searchEngineURI, mappedComponentNameForLogSearch, hostName);\n+              final String logFileTailURI = requestHelper.createLogFileTailURI(searchEngineURI, mappedComponentNameForLogSearch, hostName);\n               // all log files are assumed to be service types for now\n               listOfFileDefinitions.add(new LogFileDefinitionInfo(fileName, LogFileType.SERVICE, searchEngineURI, logFileTailURI));\n             }\n@@ -175,11 +165,6 @@ public class LoggingSearchPropertyProvider implements PropertyProvider {\n     return CLUSTERS_PATH + \"/\" + clusterName + PATH_TO_SEARCH_ENGINE;\n   }\n \n-  protected static String createLogFileTailURI(String searchEngineURI, String componentName, String hostName) {\n-    return searchEngineURI + \"?\" + COMPONENT_QUERY_PARAMETER_NAME + \"=\" + componentName + \"&\" + HOST_QUERY_PARAMETER_NAME + \"=\" + hostName\n-      + \"&\" + PAGE_SIZE_QUERY_PARAMETER_NAME + \"=\" + DEFAULT_PAGE_SIZE;\n-  }\n-\n   @Override\n   public Set<String> checkPropertyIds(Set<String> propertyIds) {\n     return Collections.emptySet();\n",
  "files": 3,
  "linesAdd": 73,
  "linesRem": 18,
  "failing_tests": [],
  "nb_test": 0,
  "nb_failure": 0,
  "nb_error": 0,
  "nb_skipped": 0
}