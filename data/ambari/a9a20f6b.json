{
  "project": "ambari",
  "jira_id": "14377",
  "commit": "a9a20f6b",
  "classification": {
    "singleLine": false
  },
  "patch": "diff --git a/ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/HiveKerberosConfigAction.java b/ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/HiveKerberosConfigAction.java\ndeleted file mode 100644\nindex 57b513572a..0000000000\n--- a/ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/HiveKerberosConfigAction.java\n+++ /dev/null\n@@ -1,115 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.ambari.server.serveraction.upgrades;\n-\n-import java.util.Map;\n-import java.util.concurrent.ConcurrentMap;\n-\n-import org.apache.ambari.server.AmbariException;\n-import org.apache.ambari.server.actionmanager.HostRoleStatus;\n-import org.apache.ambari.server.agent.CommandReport;\n-import org.apache.ambari.server.serveraction.AbstractServerAction;\n-import org.apache.ambari.server.state.Cluster;\n-import org.apache.ambari.server.state.Clusters;\n-import org.apache.ambari.server.state.Config;\n-\n-import com.google.inject.Inject;\n-\n-/**\n- * The {@link HiveKerberosConfigAction} is used to ensure that the following\n- * settings are correctly set when upgrading a Keberized Hive Server:\n- * <ul>\n- * <li>hive.zookeeper.quorum</li>\n- * <li>hive.cluster.delegation.token.store.zookeeper.connectString</li>\n- * </ul>\n- *\n- * This is typically only needed when upgrading from a version which does not\n- * have these properties. The upgrade merge logic can't do complex calculations,\n- * such as the ZK quorum.\n- * <p/>\n- * The above properties will only be set if {@code cluster-env/security_enabled}\n- * is {@code true}.\n- */\n-public class HiveKerberosConfigAction extends AbstractServerAction {\n-  protected static final String HIVE_SITE_CONFIG_TYPE = \"hive-site\";\n-  protected static final String CLUSTER_ENV_CONFIG_TYPE = \"cluster-env\";\n-\n-  protected static final String CLUSTER_ENV_SECURITY_ENABLED = \"security_enabled\";\n-  protected static final String HIVE_SITE_ZK_QUORUM = \"hive.zookeeper.quorum\";\n-  protected static final String HIVE_SITE_ZK_CONNECT_STRING = \"hive.cluster.delegation.token.store.zookeeper.connectString\";\n-\n-  /**\n-   * Used for retrieving the cluster (and eventually the desired configuration).\n-   */\n-  @Inject\n-  private Clusters m_clusters;\n-\n-  /**\n-   * {@inheritDoc}\n-   */\n-  @Override\n-  public CommandReport execute(ConcurrentMap<String, Object> requestSharedDataContext)\n-      throws AmbariException, InterruptedException {\n-\n-    String clusterName = getExecutionCommand().getClusterName();\n-    Cluster cluster = m_clusters.getCluster(clusterName);\n-\n-    Config clusterEnv = cluster.getDesiredConfigByType(CLUSTER_ENV_CONFIG_TYPE);\n-\n-    if (null == clusterEnv) {\n-      return createCommandReport(0, HostRoleStatus.COMPLETED, \"{}\",\n-          String.format(\n-              \"The %s configuration type was not found; unable to determine whether Hive is Kerberized\",\n-              CLUSTER_ENV_CONFIG_TYPE),\n-          \"\");\n-    }\n-\n-    // gets the security_enabled property; if it doesn't exist or is blank,\n-    // Boolean will be false (no need for extra null check)\n-    Map<String, String> clusterEnvProperties = clusterEnv.getProperties();\n-    boolean securityEnabled = Boolean.parseBoolean(clusterEnvProperties.get(CLUSTER_ENV_SECURITY_ENABLED));\n-\n-    if (!securityEnabled) {\n-      return createCommandReport(0, HostRoleStatus.COMPLETED, \"{}\",\n-          \"Hive is not Kerberized, skipping Kerberos-specific configuration properties\", \"\");\n-    }\n-\n-    Config hiveSite = cluster.getDesiredConfigByType(HIVE_SITE_CONFIG_TYPE);\n-    if (hiveSite == null) {\n-      return createCommandReport(0, HostRoleStatus.COMPLETED, \"{}\",\n-          String.format(\n-              \"The %s configuration type was not found; unable to set Hive configuration properties\",\n-              CLUSTER_ENV_CONFIG_TYPE),\n-          \"\");\n-    }\n-\n-    String zookeeperQuorum = ZooKeeperQuorumCalculator.getZooKeeperQuorumString(cluster);\n-\n-    Map<String, String> hiveSiteProperties = hiveSite.getProperties();\n-    hiveSiteProperties.put(HIVE_SITE_ZK_QUORUM, zookeeperQuorum);\n-    hiveSiteProperties.put(HIVE_SITE_ZK_CONNECT_STRING, zookeeperQuorum);\n-\n-    hiveSite.setProperties(hiveSiteProperties);\n-    hiveSite.persist(false);\n-\n-    return createCommandReport(0, HostRoleStatus.COMPLETED, \"{}\",\n-        String.format(\"Successfully set %s and %s in %s\", HIVE_SITE_ZK_QUORUM,\n-            HIVE_SITE_ZK_CONNECT_STRING, HIVE_SITE_CONFIG_TYPE),\n-        \"\");\n-  }\n-}\n",
  "files": 0,
  "linesAdd": 1,
  "linesRem": 116,
  "failing_tests": [],
  "nb_test": 0,
  "nb_failure": 0,
  "nb_error": 0,
  "nb_skipped": 0
}