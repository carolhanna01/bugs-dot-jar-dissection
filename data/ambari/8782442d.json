{
  "project": "ambari",
  "jira_id": "1688",
  "commit": "8782442d",
  "classification": {
    "singleLine": false
  },
  "patch": "diff --git a/ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java b/ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java\nindex def147db81..9c78706126 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java\n@@ -323,21 +323,22 @@ public class ActionDBAccessorImpl implements ActionDBAccessor {\n   @Override\n   public List<Long> getRequestsByStatus(RequestStatus status) {\n     boolean match = true;\n+    boolean checkAllTasks = false;\n     Set<HostRoleStatus> statuses = new HashSet<HostRoleStatus>();\n     if (status == RequestStatus.IN_PROGRESS) {\n       statuses.addAll( Arrays.asList(HostRoleStatus.PENDING,\n           HostRoleStatus.IN_PROGRESS, HostRoleStatus.QUEUED));\n     } else if (status == RequestStatus.COMPLETED) {\n       match = false;\n+      checkAllTasks = true;\n       statuses.addAll( Arrays.asList(HostRoleStatus.PENDING,\n           HostRoleStatus.IN_PROGRESS, HostRoleStatus.QUEUED,\n           HostRoleStatus.ABORTED, HostRoleStatus.FAILED,\n-          HostRoleStatus.FAILED, HostRoleStatus.TIMEDOUT));\n+          HostRoleStatus.TIMEDOUT));\n     } else if (status == RequestStatus.FAILED) {\n       statuses.addAll( Arrays.asList(HostRoleStatus.ABORTED,\n-          HostRoleStatus.FAILED, HostRoleStatus.FAILED,\n-          HostRoleStatus.TIMEDOUT));\n+          HostRoleStatus.FAILED, HostRoleStatus.TIMEDOUT));\n     }\n-    return hostRoleCommandDAO.getRequestsByTaskStatus(statuses, match);\n+    return hostRoleCommandDAO.getRequestsByTaskStatus(statuses, match, checkAllTasks);\n   }\n }\ndiff --git a/ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java b/ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java\nindex 38fab71b74..fa77589d8b 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java\n@@ -282,7 +282,7 @@ public class Configuration {\n \n   public String getBootSetupAgentScript() {\n     return properties.getProperty(BOOTSTRAP_SETUP_AGENT_SCRIPT,\n-        \"/usr/lib/python2.7/site-packages/ambari_server/setupAgent.py\");\n+        \"/usr/lib/python2.6/site-packages/ambari_server/setupAgent.py\");\n   }\n \n   public String getBootSetupAgentPassword() {\ndiff --git a/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java b/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java\nindex 56c7be5a96..1abcb1da2d 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java\n@@ -3497,7 +3497,7 @@ public class AmbariManagementControllerImpl implements\n       RequestStatusRequest request) throws AmbariException{\n     Set<RequestStatusResponse> response = new HashSet<RequestStatusResponse>();\n     if (request.getRequestId() == null) {\n-      RequestStatus requestStatus = RequestStatus.IN_PROGRESS;\n+      RequestStatus requestStatus = null;\n       if (request.getRequestStatus() != null) {\n         requestStatus = RequestStatus.valueOf(request.getRequestStatus());\n       }\ndiff --git a/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java b/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java\nindex b4a3dc1e7e..094dca91d3 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java\n@@ -100,6 +100,9 @@ class RequestResourceProvider extends AbstractControllerResourceProvider {\n       setResourceProperty(resource, REQUEST_CLUSTER_NAME_PROPERTY_ID, clusterName, requestedIds);\n       setResourceProperty(resource, REQUEST_ID_PROPERTY_ID, response.getRequestId(), requestedIds);\n       setResourceProperty(resource, REQUEST_CONTEXT_ID, response.getRequestContext(), requestedIds);\n+      if (requestStatusRequest.getRequestStatus() != null) {\n+        setResourceProperty(resource, REQUEST_STATUS_PROPERTY_ID, requestStatusRequest.getRequestStatus(), requestedIds);\n+      }\n       resources.add(resource);\n     }\n     return resources;\ndiff --git a/ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java b/ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java\nindex d9c5ee9228..313042b5d1 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java\n@@ -148,18 +148,45 @@ public class HostRoleCommandDAO {\n \n   @Transactional\n   public List<Long> getRequestsByTaskStatus(\n-      Collection<HostRoleStatus> statuses, boolean match) {\n-    String queryStr = \"SELECT DISTINCT command.requestId \"\n-        + \" FROM HostRoleCommandEntity command WHERE \"\n-        + \" command.status\";\n+      Collection<HostRoleStatus> statuses, boolean match, boolean checkAllTasks) {\n+    List<Long> results = null;\n+    StringBuilder queryStr = new StringBuilder();\n+    Integer resultsLimit = null;\n+    queryStr.append(\"SELECT DISTINCT command.requestId \").append(\n+        \"FROM HostRoleCommandEntity command \");\n+    if (statuses != null && !statuses.isEmpty()) {\n+      queryStr.append(\"WHERE \");\n+\n+      if (checkAllTasks) {\n+        queryStr.append(\"command.requestId \");\n         if (!match) {\n-      queryStr += \" NOT\";\n+          queryStr.append(\"NOT \");\n+        }\n+        queryStr.append(\"IN (\").append(\"SELECT c.requestId \")\n+            .append(\"FROM HostRoleCommandEntity c \")\n+            .append(\"WHERE c.requestId = command.requestId \")\n+            .append(\"AND c.status IN ?1) \");\n+      } else {\n+        queryStr.append(\"command.status \");\n+        if (!match) {\n+          queryStr.append(\"NOT \");\n         }\n-    queryStr += \" IN ?1\"\n-        + \" ORDER BY command.requestId DESC\";\n-    TypedQuery<Long> query = entityManagerProvider.get().createQuery(queryStr,\n+        queryStr.append(\"IN ?1 \");\n+      }\n+      resultsLimit = 20;\n+    }\n+    queryStr.append(\"ORDER BY command.requestId DESC\");\n+    TypedQuery<Long> query = entityManagerProvider.get().createQuery(queryStr.toString(),\n         Long.class);\n-    return daoUtils.selectList(query, statuses);\n+    if (resultsLimit != null) {\n+      query.setMaxResults(resultsLimit);\n+    }\n+    if (statuses != null && !statuses.isEmpty()) {\n+      results = daoUtils.selectList(query, statuses);\n+    } else {\n+      results = daoUtils.selectList(query);\n+    }\n+    return results;\n   }\n \n }\n",
  "files": 5,
  "linesAdd": 46,
  "linesRem": 15,
  "failing_tests": [],
  "nb_test": 943,
  "nb_failure": 0,
  "nb_error": 1,
  "nb_skipped": 1
}