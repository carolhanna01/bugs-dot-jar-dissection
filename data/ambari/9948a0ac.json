{
  "project": "ambari",
  "jira_id": "1685",
  "commit": "9948a0ac",
  "classification": {
    "singleLine": false
  },
  "patch": "diff --git a/ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java b/ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java\nindex 38fab71b74..fa77589d8b 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java\n@@ -282,7 +282,7 @@ public class Configuration {\n \n   public String getBootSetupAgentScript() {\n     return properties.getProperty(BOOTSTRAP_SETUP_AGENT_SCRIPT,\n-        \"/usr/lib/python2.7/site-packages/ambari_server/setupAgent.py\");\n+        \"/usr/lib/python2.6/site-packages/ambari_server/setupAgent.py\");\n   }\n \n   public String getBootSetupAgentPassword() {\ndiff --git a/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java b/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java\nindex 3d10e240ea..4b51d56f78 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java\n@@ -256,24 +256,27 @@ public interface AmbariManagementController {\n    *\n    * @throws AmbariException thrown if the resource cannot be updated\n    */\n-  public RequestStatusResponse updateServices(Set<ServiceRequest> requests, Map<String, String> requestProperties)\n-      throws AmbariException;\n+  public RequestStatusResponse updateServices(Set<ServiceRequest> requests,\n+      Map<String, String> requestProperties, boolean runSmokeTest) throws AmbariException;\n \n   /**\n    * Update the component identified by the given request object with the\n    * values carried by the given request object.\n    *\n    *\n+   *\n    * @param requests    the request object which defines which component to\n    *                   update and the values to set\n    *\n    * @param requestProperties\n+   * @param runSmokeTest\n    * @return a track action response\n    *\n    * @throws AmbariException thrown if the resource cannot be updated\n    */\n   public RequestStatusResponse updateComponents(\n-      Set<ServiceComponentRequest> requests, Map<String, String> requestProperties) throws AmbariException;\n+      Set<ServiceComponentRequest> requests, Map<String, String> requestProperties,\n+      boolean runSmokeTest) throws AmbariException;\n \n   /**\n    * Update the host identified by the given request object with the\n@@ -292,16 +295,18 @@ public interface AmbariManagementController {\n    * values carried by the given request object.\n    *\n    *\n+   *\n    * @param requests    the request object which defines which host component to\n    *                   update and the values to set\n    *\n    * @param requestProperties\n+   * @param runSmokeTest\n    * @return a track action response\n    *\n    * @throws AmbariException thrown if the resource cannot be updated\n    */\n   public RequestStatusResponse updateHostComponents(\n-      Set<ServiceComponentHostRequest> requests, Map<String, String> requestProperties) throws AmbariException;\n+      Set<ServiceComponentHostRequest> requests, Map<String, String> requestProperties, boolean runSmokeTest) throws AmbariException;\n   \n   /**\n    * Updates the users specified.\ndiff --git a/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java b/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java\nindex 1abcb1da2d..4c520141bf 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java\n@@ -1533,7 +1533,7 @@ public class AmbariManagementControllerImpl implements\n \n       LOG.info(\"Creating stages for upgrade.\");\n       List<Stage> stages = doStageCreation(cluster, changedServices, changedComps, changedScHosts,\n-          requestParameters, requestProperties.get(REQUEST_CONTEXT_PROPERTY));\n+          requestParameters, requestProperties.get(REQUEST_CONTEXT_PROPERTY), false);\n \n       if (stages == null || stages.isEmpty()) {\n         return null;\n@@ -1716,7 +1716,7 @@ public class AmbariManagementControllerImpl implements\n       Map<State, List<Service>> changedServices,\n       Map<State, List<ServiceComponent>> changedComps,\n       Map<String, Map<State, List<ServiceComponentHost>>> changedScHosts,\n-      Map<String, String> requestParameters, String requestContext)\n+      Map<String, String> requestParameters, String requestContext, boolean runSmokeTest)\n           throws AmbariException {\n \n     // TODO handle different transitions?\n@@ -1746,7 +1746,7 @@ public class AmbariManagementControllerImpl implements\n           continue;\n         }\n         for (Service s : entry.getValue()) {\n-          if (State.INSTALLED == s.getDesiredState()) {\n+          if (runSmokeTest && (State.INSTALLED == s.getDesiredState())) {\n             smokeTestServices.add(s.getName());\n           }\n         }\n@@ -1789,7 +1789,7 @@ public class AmbariManagementControllerImpl implements\n         changedComponentCount.entrySet()) {\n       String serviceName = entry.getKey();\n       // smoke test service if more than one component is started\n-      if (entry.getValue().size() > 1) {\n+      if (runSmokeTest && (entry.getValue().size() > 1)) {\n         smokeTestServices.add(serviceName);\n         continue;\n       }\n@@ -1801,7 +1801,7 @@ public class AmbariManagementControllerImpl implements\n         ComponentInfo compInfo = ambariMetaInfo.getComponentCategory(\n             stackId.getStackName(), stackId.getStackVersion(), serviceName,\n             componentName);\n-        if (compInfo.isMaster()) {\n+        if (runSmokeTest && compInfo.isMaster()) {\n           smokeTestServices.add(serviceName);\n         }\n \n@@ -2217,8 +2217,8 @@ public class AmbariManagementControllerImpl implements\n \n   @Override\n   public synchronized RequestStatusResponse updateServices(\n-      Set<ServiceRequest> requests, Map<String, String> requestProperties)\n-      throws AmbariException {\n+      Set<ServiceRequest> requests, Map<String, String> requestProperties,\n+      boolean runSmokeTest) throws AmbariException {\n \n     if (requests.isEmpty()) {\n       LOG.warn(\"Received an empty requests set\");\n@@ -2493,8 +2493,9 @@ public class AmbariManagementControllerImpl implements\n \n     Cluster cluster = clusters.getCluster(clusterNames.iterator().next());\n \n-    List<Stage> stages = doStageCreation(cluster, changedServices,\n-        changedComps, changedScHosts, null, requestProperties.get(REQUEST_CONTEXT_PROPERTY));\n+    List<Stage> stages = doStageCreation(cluster, changedServices, changedComps,\n+        changedScHosts, null, requestProperties.get(REQUEST_CONTEXT_PROPERTY),\n+        runSmokeTest);\n     persistStages(stages);\n     updateServiceStates(changedServices, changedComps, changedScHosts);\n     if (stages == null || stages.isEmpty()) {\n@@ -2506,7 +2507,7 @@ public class AmbariManagementControllerImpl implements\n \n   @Override\n   public synchronized RequestStatusResponse updateComponents(Set<ServiceComponentRequest> requests,\n-                                                             Map<String, String> requestProperties)\n+                                                             Map<String, String> requestProperties, boolean runSmokeTest)\n                                                              throws AmbariException {\n \n     if (requests.isEmpty()) {\n@@ -2773,7 +2774,7 @@ public class AmbariManagementControllerImpl implements\n     Cluster cluster = clusters.getCluster(clusterNames.iterator().next());\n \n     List<Stage> stages = doStageCreation(cluster, null,\n-        changedComps, changedScHosts, null, requestProperties.get(REQUEST_CONTEXT_PROPERTY));\n+        changedComps, changedScHosts, null, requestProperties.get(REQUEST_CONTEXT_PROPERTY), runSmokeTest);\n     persistStages(stages);\n     updateServiceStates(null, changedComps, changedScHosts);\n     if (stages == null || stages.isEmpty()) {\n@@ -2855,7 +2856,7 @@ public class AmbariManagementControllerImpl implements\n \n   @Override\n   public synchronized RequestStatusResponse updateHostComponents(Set<ServiceComponentHostRequest> requests,\n-                                                                 Map<String, String> requestProperties)\n+                                                                 Map<String, String> requestProperties, boolean runSmokeTest)\n                                                                  throws AmbariException {\n \n     if (requests.isEmpty()) {\n@@ -3147,7 +3148,7 @@ public class AmbariManagementControllerImpl implements\n       requestParameters.put(Configuration.UPGRADE_FROM_STACK, gson.toJson(fromStackVersion));\n     }\n     List<Stage> stages = doStageCreation(cluster, null, null, changedScHosts, requestParameters,\n-        requestProperties.get(REQUEST_CONTEXT_PROPERTY));\n+        requestProperties.get(REQUEST_CONTEXT_PROPERTY), runSmokeTest);\n     persistStages(stages);\n     updateServiceStates(null, null, changedScHosts);\n     if (stages == null || stages.isEmpty()) {\ndiff --git a/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractControllerResourceProvider.java b/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractControllerResourceProvider.java\nindex 97732df158..86eb99399d 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractControllerResourceProvider.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractControllerResourceProvider.java\n@@ -19,6 +19,10 @@\n package org.apache.ambari.server.controller.internal;\n \n import org.apache.ambari.server.controller.AmbariManagementController;\n+import org.apache.ambari.server.controller.predicate.ArrayPredicate;\n+import org.apache.ambari.server.controller.predicate.ComparisonPredicate;\n+import org.apache.ambari.server.controller.predicate.EqualsPredicate;\n+import org.apache.ambari.server.controller.spi.Predicate;\n import org.apache.ambari.server.controller.spi.Resource;\n import org.apache.ambari.server.controller.spi.ResourceProvider;\n \n@@ -119,4 +123,28 @@ public abstract class AbstractControllerResourceProvider extends AbstractResourc\n         throw new IllegalArgumentException(\"Unknown type \" + type);\n     }\n   }\n+\n+  /**\n+   * Extracting given query_paramater value from the predicate(parsed http body)\n+   * @param queryParameterId\n+   * @param predicate\n+   * @return\n+   */\n+  protected static Object getQueryParameterValue(String queryParameterId, Predicate predicate) {\n+\n+    if (predicate instanceof ArrayPredicate) {\n+      ArrayPredicate arrayPredicate  = (ArrayPredicate) predicate;\n+      for (Predicate predicateItem : arrayPredicate.getPredicates()) {\n+        if (predicateItem instanceof ComparisonPredicate) {\n+          EqualsPredicate equalsPredicate =\n+              (EqualsPredicate) predicateItem;\n+          if (queryParameterId.equals(equalsPredicate.getPropertyId())) {\n+            return equalsPredicate.getValue();\n+          }\n+        }\n+      }\n+\n+    }\n+    return null;\n+  }\n }\ndiff --git a/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ComponentResourceProvider.java b/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ComponentResourceProvider.java\nindex 921b0089c1..e88d8c360f 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ComponentResourceProvider.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ComponentResourceProvider.java\n@@ -46,6 +46,9 @@ class ComponentResourceProvider extends AbstractControllerResourceProvider {\n   protected static final String COMPONENT_STATE_PROPERTY_ID           = PropertyHelper.getPropertyId(\"ServiceComponentInfo\", \"state\");\n   protected static final String COMPONENT_DESIRED_CONFIGS_PROPERTY_ID = PropertyHelper.getPropertyId(\"ServiceComponentInfo\", \"desired_configs\");\n \n+  //Parameters from the predicate\n+  private static final String QUERY_PARAMETERS_RUN_SMOKE_TEST_ID =\n+      \"params/run_smoke_test\";\n \n   private static Set<String> pkPropertyIds =\n       new HashSet<String>(Arrays.asList(new String[]{\n@@ -151,10 +154,13 @@ class ComponentResourceProvider extends AbstractControllerResourceProvider {\n       requests.add(compRequest);\n     }\n \n+    final boolean runSmokeTest = \"true\".equals(getQueryParameterValue(\n+        QUERY_PARAMETERS_RUN_SMOKE_TEST_ID, predicate)) ? true : false;\n+\n     RequestStatusResponse response = modifyResources(new Command<RequestStatusResponse>() {\n       @Override\n       public RequestStatusResponse invoke() throws AmbariException {\n-        return getManagementController().updateComponents(requests, request.getRequestInfoProperties());\n+        return getManagementController().updateComponents(requests, request.getRequestInfoProperties(), runSmokeTest);\n       }\n     });\n \ndiff --git a/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java b/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java\nindex 415e4593f3..9412f2c7b6 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java\n@@ -63,6 +63,10 @@ class HostComponentResourceProvider extends AbstractControllerResourceProvider {\n   protected static final String HOST_COMPONENT_DESIRED_STACK_ID_PROPERTY_ID\n       = PropertyHelper.getPropertyId(\"HostRoles\", \"desired_stack_id\");\n \n+  //Parameters from the predicate\n+  private static final String QUERY_PARAMETERS_RUN_SMOKE_TEST_ID =\n+      \"params/run_smoke_test\";\n+\n   private static Set<String> pkPropertyIds =\n       new HashSet<String>(Arrays.asList(new String[]{\n           HOST_COMPONENT_CLUSTER_NAME_PROPERTY_ID,\n@@ -165,6 +169,9 @@ class HostComponentResourceProvider extends AbstractControllerResourceProvider {\n     final Set<ServiceComponentHostRequest> requests = new HashSet<ServiceComponentHostRequest>();\n     RequestStatusResponse response = null;\n \n+    final boolean runSmokeTest = \"true\".equals(getQueryParameterValue(\n+        QUERY_PARAMETERS_RUN_SMOKE_TEST_ID, predicate)) ? true : false;\n+\n     Iterator<Map<String,Object>> iterator = request.getProperties().iterator();\n     if (iterator.hasNext()) {\n       for (Map<String, Object> propertyMap : getPropertyMaps(request.getProperties().iterator().next(), predicate)) {\n@@ -173,7 +180,7 @@ class HostComponentResourceProvider extends AbstractControllerResourceProvider {\n       response = modifyResources(new Command<RequestStatusResponse>() {\n         @Override\n         public RequestStatusResponse invoke() throws AmbariException {\n-          return getManagementController().updateHostComponents(requests, request.getRequestInfoProperties());\n+          return getManagementController().updateHostComponents(requests, request.getRequestInfoProperties(), runSmokeTest);\n         }\n       });\n \ndiff --git a/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java b/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java\nindex ab488a4f4d..af2e8636d3 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java\n@@ -45,6 +45,9 @@ class ServiceResourceProvider extends AbstractControllerResourceProvider {\n   protected static final String SERVICE_SERVICE_STATE_PROPERTY_ID   = PropertyHelper.getPropertyId(\"ServiceInfo\", \"state\");\n   protected static final String SERVICE_DESIRED_CONFIGS_PROPERTY_ID = PropertyHelper.getPropertyId(\"ServiceInfo\", \"desired_configs\");\n \n+  //Parameters from the predicate\n+  private static final String QUERY_PARAMETERS_RUN_SMOKE_TEST_ID =\n+      \"params/run_smoke_test\";\n \n   private static Set<String> pkPropertyIds =\n       new HashSet<String>(Arrays.asList(new String[]{\n@@ -138,10 +141,14 @@ class ServiceResourceProvider extends AbstractControllerResourceProvider {\n       for (Map<String, Object> propertyMap : getPropertyMaps(iterator.next(), predicate)) {\n         requests.add(getRequest(propertyMap));\n       }\n+\n+      final boolean runSmokeTest = \"true\".equals(getQueryParameterValue(\n+          QUERY_PARAMETERS_RUN_SMOKE_TEST_ID, predicate)) ? true : false;\n+\n       response = modifyResources(new Command<RequestStatusResponse>() {\n         @Override\n         public RequestStatusResponse invoke() throws AmbariException {\n-          return getManagementController().updateServices(requests, request.getRequestInfoProperties());\n+          return getManagementController().updateServices(requests, request.getRequestInfoProperties(), runSmokeTest);\n         }\n       });\n     }\n",
  "files": 7,
  "linesAdd": 75,
  "linesRem": 21,
  "failing_tests": [],
  "nb_test": 0,
  "nb_failure": 0,
  "nb_error": 0,
  "nb_skipped": 0
}