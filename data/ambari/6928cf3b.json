{
  "project": "ambari",
  "jira_id": "2622",
  "commit": "6928cf3b",
  "classification": {
    "singleLine": false
  },
  "patch": "diff --git a/ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java b/ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java\nindex fb81f03c20..42b603d8fd 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java\n@@ -434,7 +434,7 @@ public class Configuration {\n \n   public String getBootSetupAgentScript() {\n     return properties.getProperty(BOOTSTRAP_SETUP_AGENT_SCRIPT,\n-        \"/usr/lib/python2.7/site-packages/ambari_server/setupAgent.py\");\n+        \"/usr/lib/python2.6/site-packages/ambari_server/setupAgent.py\");\n   }\n \n   public String getBootSetupAgentPassword() {\n@@ -662,6 +663,15 @@ public class Configuration {\n     ldapServerProperties.setGroupSearchFilter(properties.getProperty(\n         LDAP_GROUP_SEARCH_FILTER_KEY, LDAP_GROUP_SEARCH_FILTER_DEFAULT));\n \n+    if (properties.containsKey(LDAP_GROUP_BASE_KEY) ||\n+        properties.containsKey(LDAP_GROUP_OBJECT_CLASS_KEY) ||\n+        properties.containsKey(LDAP_GROUP_MEMEBERSHIP_ATTR_KEY) ||\n+        properties.containsKey(LDAP_GROUP_NAMING_ATTR_KEY) ||\n+        properties.containsKey(LDAP_ADMIN_GROUP_MAPPING_RULES_KEY) ||\n+        properties.containsKey(LDAP_GROUP_SEARCH_FILTER_KEY)) {\n+      ldapServerProperties.setGroupMappingEnabled(true);\n+    }\n+\n     return ldapServerProperties;\n   }\n \ndiff --git a/ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java b/ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java\nindex aa8f7a3ed2..fe6d571549 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthoritiesPopulator.java\n@@ -19,6 +19,7 @@ package org.apache.ambari.server.security.authorization;\n \n import com.google.inject.Inject;\n import com.google.inject.persist.Transactional;\n+import org.apache.ambari.server.AmbariException;\n import org.apache.ambari.server.configuration.Configuration;\n import org.apache.ambari.server.orm.dao.RoleDAO;\n import org.apache.ambari.server.orm.dao.UserDAO;\n@@ -55,28 +56,22 @@ public class AmbariLdapAuthoritiesPopulator implements LdapAuthoritiesPopulator\n   }\n \n   @Override\n-  @Transactional\n   public Collection<? extends GrantedAuthority> getGrantedAuthorities(DirContextOperations userData, String username) {\n     log.info(\"Get roles for user \" + username + \" from local DB\");\n \n-    UserEntity user = null;\n+    UserEntity user;\n \n     user = userDAO.findLdapUserByName(username);\n \n     if (user == null) {\n       log.info(\"User \" + username + \" not present in local DB - creating\");\n \n-      UserEntity newUser = new UserEntity();\n-      newUser.setLdapUser(true);\n-      newUser.setUserName(username);\n-\n-      //Adding a default \"user\" role\n-      addRole(newUser, configuration.getConfigsMap().\n-          get(Configuration.USER_ROLE_NAME_KEY));\n-    }\n-\n+      createLdapUser(username);\n       user = userDAO.findLdapUserByName(username);\n+    }\n \n+    //don't remove admin role from user if group mapping was not configured\n+    if (configuration.getLdapServerProperties().isGroupMappingEnabled()) {\n       //Adding an \"admin\" user role if user is a member of ambari administrators\n       // LDAP group\n       Boolean isAdmin =\n@@ -89,11 +84,28 @@ public class AmbariLdapAuthoritiesPopulator implements LdapAuthoritiesPopulator\n         removeRole(user, configuration.getConfigsMap().\n             get(Configuration.ADMIN_ROLE_NAME_KEY));\n       }\n+    }\n \n-    user = userDAO.findLdapUserByName(username);\n     return authorizationHelper.convertRolesToAuthorities(user.getRoleEntities());\n   }\n \n+  /**\n+   * Creates record in local DB for LDAP user\n+   * @param username - name of user to create\n+   */\n+  @Transactional\n+  void createLdapUser(String username) {\n+    UserEntity newUser = new UserEntity();\n+    newUser.setLdapUser(true);\n+    newUser.setUserName(username);\n+\n+    userDAO.create(newUser);\n+\n+    //Adding a default \"user\" role\n+    addRole(newUser, configuration.getConfigsMap().\n+        get(Configuration.USER_ROLE_NAME_KEY));\n+  }\n+\n   /**\n    * Adds role to user's role entities\n    * Adds user to roleName's user entities\n@@ -101,7 +113,8 @@ public class AmbariLdapAuthoritiesPopulator implements LdapAuthoritiesPopulator\n    * @param user - the user entity to be modified\n    * @param roleName - the role to add to user's roleEntities\n    */\n-  private void addRole(UserEntity user, String roleName) {\n+  @Transactional\n+  void addRole(UserEntity user, String roleName) {\n     log.info(\"Using default role name \" + roleName);\n \n     RoleEntity roleEntity = roleDAO.findByName(roleName);\n@@ -133,7 +146,8 @@ public class AmbariLdapAuthoritiesPopulator implements LdapAuthoritiesPopulator\n    * @param user\n    * @param roleName\n    */\n-  private void removeRole(UserEntity user, String roleName) {\n+  @Transactional\n+  void removeRole(UserEntity user, String roleName) {\n     UserEntity userEntity = userDAO.findByPK(user.getUserId());\n     RoleEntity roleEntity = roleDAO.findByName(roleName);\n \ndiff --git a/ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AuthorizationHelper.java b/ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AuthorizationHelper.java\nindex f63c67391c..b67a843cc1 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AuthorizationHelper.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AuthorizationHelper.java\n@@ -25,9 +25,7 @@ import org.springframework.security.core.authority.SimpleGrantedAuthority;\n import org.springframework.security.core.context.SecurityContext;\n import org.springframework.security.core.context.SecurityContextHolder;\n \n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.List;\n+import java.util.*;\n \n @Singleton\n /**\n@@ -39,7 +37,7 @@ public class AuthorizationHelper {\n    * Converts collection of RoleEntities to collection of GrantedAuthorities\n    */\n   public Collection<GrantedAuthority> convertRolesToAuthorities(Collection<RoleEntity> roleEntities) {\n-    List<GrantedAuthority> authorities = new ArrayList<GrantedAuthority>(roleEntities.size());\n+    Set<GrantedAuthority> authorities = new HashSet<GrantedAuthority>(roleEntities.size());\n \n     for (RoleEntity roleEntity : roleEntities) {\n       authorities.add(new SimpleGrantedAuthority(roleEntity.getRoleName().toUpperCase()));\ndiff --git a/ambari-server/src/main/java/org/apache/ambari/server/security/authorization/LdapServerProperties.java b/ambari-server/src/main/java/org/apache/ambari/server/security/authorization/LdapServerProperties.java\nindex 2c55dc64d3..8f9eb81c33 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/security/authorization/LdapServerProperties.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/security/authorization/LdapServerProperties.java\n@@ -44,8 +44,9 @@ public class LdapServerProperties {\n   private String groupMembershipAttr;\n   private String groupNamingAttr;\n   private String adminGroupMappingRules;\n-  private String groupSearchFilter;\n+  private boolean groupMappingEnabled;\n \n+  private String groupSearchFilter;\n   private static final String userSearchFilter = \"({attribute}={0})\";\n \n   public List<String> getLdapUrls() {\n@@ -187,6 +188,14 @@ public class LdapServerProperties {\n     this.groupSearchFilter = groupSearchFilter;\n   }\n \n+  public boolean isGroupMappingEnabled() {\n+    return groupMappingEnabled;\n+  }\n+\n+  public void setGroupMappingEnabled(boolean groupMappingEnabled) {\n+    this.groupMappingEnabled = groupMappingEnabled;\n+  }\n+\n   @Override\n   public boolean equals(Object obj) {\n     if (this == obj) return true;\ndiff --git a/ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java b/ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java\nindex 2b39d4335c..90ee80cd3f 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java\n@@ -205,10 +205,12 @@ public class Users {\n   public synchronized void addRoleToUser(User user, String role)\n       throws AmbariException {\n \n-    if (userDAO.findLdapUserByName(user.getUserName()) != null) {\n+    if (configuration.getLdapServerProperties().isGroupMappingEnabled() &&\n+        userDAO.findLdapUserByName(user.getUserName()) != null) {\n       LOG.warn(\"Trying to add a role to the LDAP user\"\n           + \", user=\" + user.getUserName());\n-      throw new AmbariException(\"Roles are not editable for LDAP users\");\n+      throw new AmbariException(\"Ldap group mapping is enabled, \" +\n+          \"roles for LDAP users should be managed on LDAP server\");\n     }\n \n     UserEntity userEntity = userDAO.findByPK(user.getUserId());\n@@ -239,10 +241,12 @@ public class Users {\n   public synchronized void removeRoleFromUser(User user, String role)\n       throws AmbariException {\n \n-    if (userDAO.findLdapUserByName(user.getUserName()) != null) {\n+    if (configuration.getLdapServerProperties().isGroupMappingEnabled() &&\n+        userDAO.findLdapUserByName(user.getUserName()) != null) {\n       LOG.warn(\"Trying to add a role to the LDAP user\"\n           + \", user=\" + user.getUserName());\n-      throw new AmbariException(\"Roles are not editable for LDAP users\");\n+      throw new AmbariException(\"Ldap group mapping is enabled, \" +\n+          \"roles for LDAP users should be managed on LDAP server\");\n     }\n \n     UserEntity userEntity = userDAO.findByPK(user.getUserId());\n",
  "files": 5,
  "linesAdd": 58,
  "linesRem": 24,
  "failing_tests": [],
  "nb_test": 0,
  "nb_failure": 0,
  "nb_error": 0,
  "nb_skipped": 0
}