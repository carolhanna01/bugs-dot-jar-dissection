{
  "project": "ambari",
  "jira_id": "16093",
  "commit": "12c43397",
  "classification": {
    "singleLine": false
  },
  "patch": "diff --git a/ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java b/ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java\nindex a5cd3699e5..3fac6554f8 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java\n@@ -46,6 +46,7 @@ import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Set;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n /**\n  * Convenience class to handle the connection details of a LogSearch query request.\n@@ -67,6 +68,8 @@ public class LoggingRequestHelperImpl implements LoggingRequestHelper {\n \n   private static final String LOGSEARCH_ADMIN_CREDENTIAL_NAME = \"logsearch.admin.credential\";\n \n+  private static AtomicInteger errorLogCounterForLogSearchConnectionExceptions = new AtomicInteger(0);\n+\n   private final String hostName;\n \n   private final String portNumber;\n@@ -112,7 +115,8 @@ public class LoggingRequestHelperImpl implements LoggingRequestHelper {\n       return logQueryResponseReader.readValue(stringReader);\n \n     } catch (Exception e) {\n-      LOG.error(\"Error occurred while trying to connect to the LogSearch service...\", e);\n+      Utils.logErrorMessageWithThrowableWithCounter(LOG, errorLogCounterForLogSearchConnectionExceptions,\n+        \"Error occurred while trying to connect to the LogSearch service...\", e);\n     }\n \n     return null;\n@@ -217,7 +222,8 @@ public class LoggingRequestHelperImpl implements LoggingRequestHelper {\n       return logQueryResponseReader.readValue(stringReader);\n \n     } catch (Exception e) {\n-      LOG.error(\"Error occurred while trying to connect to the LogSearch service...\", e);\n+      Utils.logErrorMessageWithThrowableWithCounter(LOG, errorLogCounterForLogSearchConnectionExceptions,\n+        \"Error occurred while trying to connect to the LogSearch service...\", e);\n     }\n \n     return null;\n@@ -291,10 +297,10 @@ public class LoggingRequestHelperImpl implements LoggingRequestHelper {\n       if (credential == null) {\n         LOG.debug(\"LogSearch credentials could not be obtained from store.\");\n       } else {\n-        LOG.error(\"LogSearch credentials were not of the correct type, this is likely an error in configuration, credential type is = \" + credential.getClass().getName());\n+        LOG.debug(\"LogSearch credentials were not of the correct type, this is likely an error in configuration, credential type is = \" + credential.getClass().getName());\n       }\n     } catch (AmbariException ambariException) {\n-      LOG.error(\"Error encountered while trying to obtain LogSearch admin credentials.\", ambariException);\n+      LOG.debug(\"Error encountered while trying to obtain LogSearch admin credentials.\", ambariException);\n     }\n \n     return null;\ndiff --git a/ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingSearchPropertyProvider.java b/ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingSearchPropertyProvider.java\nindex e2da4c8e50..f80bc6de84 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingSearchPropertyProvider.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingSearchPropertyProvider.java\n@@ -36,6 +36,7 @@ import java.util.Collections;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Set;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n public class LoggingSearchPropertyProvider implements PropertyProvider {\n \n@@ -53,6 +54,8 @@ public class LoggingSearchPropertyProvider implements PropertyProvider {\n \n   private static final String PAGE_SIZE_QUERY_PARAMETER_NAME = \"pageSize\";\n \n+  private static AtomicInteger errorLogCounterForLogSearchConnectionExceptions = new AtomicInteger(0);\n+\n   private final LoggingRequestHelperFactory requestHelperFactory;\n \n   private final ControllerFactory controllerFactory;\n@@ -126,7 +129,8 @@ public class LoggingSearchPropertyProvider implements PropertyProvider {\n             // add the logging metadata for this host component\n             resource.setProperty(\"logging\", loggingInfo);\n           } else {\n-            LOG.error(\"Error occurred while making request to LogSearch service, unable to populate logging properties on this resource\");\n+            Utils.logErrorMessageWithCounter(LOG, errorLogCounterForLogSearchConnectionExceptions,\n+              \"Error occurred while making request to LogSearch service, unable to populate logging properties on this resource\");\n           }\n         }\n       }\n",
  "files": 2,
  "linesAdd": 14,
  "linesRem": 5,
  "failing_tests": [],
  "nb_test": 0,
  "nb_failure": 0,
  "nb_error": 0,
  "nb_skipped": 0
}