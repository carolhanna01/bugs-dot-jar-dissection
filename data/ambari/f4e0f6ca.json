{
  "project": "ambari",
  "jira_id": "4302",
  "commit": "f4e0f6ca",
  "classification": {
    "singleLine": false
  },
  "patch": "diff --git a/ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java b/ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java\nindex 6e6571f31c..6af54c02df 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java\n@@ -504,7 +504,7 @@ public class Configuration {\n \n   public String getBootSetupAgentScript() {\n     return properties.getProperty(BOOTSTRAP_SETUP_AGENT_SCRIPT,\n-        \"/usr/lib/python2.7/site-packages/ambari_server/setupAgent.py\");\n+        \"/usr/lib/python2.6/site-packages/ambari_server/setupAgent.py\");\n   }\n \n   public String getBootSetupAgentPassword() {\ndiff --git a/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java b/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java\nindex 0ac7e6a718..6548be8a8d 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java\n@@ -44,6 +44,7 @@ import org.apache.ambari.server.state.ServiceComponentHostEvent;\n import org.apache.ambari.server.state.ServiceInfo;\n import org.apache.ambari.server.state.ServiceOsSpecific;\n import org.apache.ambari.server.state.StackId;\n+import org.apache.ambari.server.state.State;\n import org.apache.ambari.server.state.svccomphost.ServiceComponentHostOpInProgressEvent;\n import org.apache.ambari.server.utils.StageUtils;\n import org.slf4j.Logger;\n@@ -241,15 +242,6 @@ public class AmbariCustomCommandExecutionHelper {\n       execCmd.setClusterHostInfo(\n           StageUtils.getClusterHostInfo(clusters.getHostsForCluster(clusterName), cluster));\n \n-      if (hostLevelParams == null) {\n-        hostLevelParams = new TreeMap<String, String>();\n-      }\n-      hostLevelParams.put(JDK_LOCATION, amc.getJdkResourceUrl());\n-      hostLevelParams.put(JAVA_HOME, amc.getJavaHome());\n-      hostLevelParams.put(JDK_NAME, amc.getJDKName());\n-      hostLevelParams.put(JCE_NAME, amc.getJCEName());\n-      hostLevelParams.put(STACK_NAME, stackId.getStackName());\n-      hostLevelParams.put(STACK_VERSION, stackId.getStackVersion());\n       hostLevelParams.put(CUSTOM_COMMAND, commandName);\n       execCmd.setHostLevelParams(hostLevelParams);\n \n@@ -387,13 +377,6 @@ public class AmbariCustomCommandExecutionHelper {\n     if (hostLevelParams == null) {\n       hostLevelParams = new TreeMap<String, String>();\n     }\n-    hostLevelParams.put(JDK_LOCATION, amc.getJdkResourceUrl());\n-    hostLevelParams.put(JAVA_HOME, amc.getJavaHome());\n-    hostLevelParams.put(JDK_NAME, amc.getJDKName());\n-    hostLevelParams.put(JCE_NAME, amc.getJCEName());\n-    hostLevelParams.put(STACK_NAME, stackId.getStackName());\n-    hostLevelParams.put(STACK_VERSION, stackId.getStackVersion());\n-    hostLevelParams.putAll(amc.getRcaParameters());\n     execCmd.setHostLevelParams(hostLevelParams);\n \n     Map<String, String> commandParams = new TreeMap<String, String>();\n@@ -500,6 +483,14 @@ public class AmbariCustomCommandExecutionHelper {\n       throw new AmbariException(\"Component \" + slaveCompType + \" is not supported for decommissioning.\");\n     }\n \n+    // Decommission only if the sch is in state STARTED or INSTALLED\n+    for (ServiceComponentHost sch : svcComponents.get(slaveCompType).getServiceComponentHosts().values()) {\n+      if (excludedHosts.contains(sch.getHostName()) && sch.getState() != State.STARTED) {\n+        throw new AmbariException(\"Component \" + slaveCompType + \" on host \" + sch.getHostName() + \" cannot be \" +\n+            \"decommissioned as its not in STARTED state. Aborting the whole request.\");\n+      }\n+    }\n+\n     // Set/reset decommissioned flag on all components\n     for (ServiceComponentHost sch : svcComponents.get(slaveCompType).getServiceComponentHosts().values()) {\n       if (excludedHosts.contains(sch.getHostName())) {\ndiff --git a/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java b/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java\nindex 570e57499c..a9b63648c2 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java\n@@ -1277,11 +1276,10 @@ public class AmbariManagementControllerImpl implements\n               + \", serviceCheckRole=\" + smokeTestRole);\n           continue;\n         }\n-        Configuration configuration = injector.getInstance(Configuration.class);\n+\n         customCommandExecutionHelper.addServiceCheckAction(stage, clientHost,\n             smokeTestRole, nowTimestamp, serviceName,\n-            null, null, null);\n-\n+            null, null, createDefaultHostParams(cluster));\n       }\n \n       RoleCommandOrder rco = getRoleCommandOrder(cluster);\n@@ -1293,6 +1291,19 @@ public class AmbariManagementControllerImpl implements\n     return null;\n   }\n \n+  private TreeMap<String, String> createDefaultHostParams(Cluster cluster) {\n+    StackId stackId = cluster.getDesiredStackVersion();\n+    TreeMap<String, String> hostLevelParams = new TreeMap<String, String>();\n+    hostLevelParams.put(JDK_LOCATION, getJdkResourceUrl());\n+    hostLevelParams.put(JAVA_HOME, getJavaHome());\n+    hostLevelParams.put(JDK_NAME, getJDKName());\n+    hostLevelParams.put(JCE_NAME, getJCEName());\n+    hostLevelParams.put(STACK_NAME, stackId.getStackName());\n+    hostLevelParams.put(STACK_VERSION, stackId.getStackVersion());\n+    hostLevelParams.putAll(getRcaParameters());\n+    return hostLevelParams;\n+  }\n+\n   private void persistStages(List<Stage> stages) throws AmbariException {\n     if (stages != null && !stages.isEmpty()) {\n       persistRequest(requestFactory.createNewFromStages(stages));\n@@ -2044,11 +2055,8 @@ public class AmbariManagementControllerImpl implements\n     String clusterHostInfoJson = StageUtils.getGson().toJson(clusterHostInfo);\n     Stage stage = createNewStage(cluster, actionManager.getNextRequestId(), requestContext, clusterHostInfoJson);\n \n-    Map<String, String> params = new TreeMap<String, String>();\n-    // TODO : Update parameter population to be done only here\n-    params.put(JDK_LOCATION, this.jdkResourceUrl);\n-    params.put(STACK_VERSION, cluster.getDesiredStackVersion().getStackVersion());\n-    params.putAll(getRcaParameters());\n+\n+    Map<String, String> params = createDefaultHostParams(cluster);\n \n     if (actionRequest.isCommand()) {\n       customCommandExecutionHelper.addAction(actionRequest, stage, params);\ndiff --git a/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java b/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java\nindex d1ad1a9bb9..dbc81a2b62 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java\n@@ -73,8 +73,8 @@ public class HostComponentResourceProvider extends AbstractControllerResourcePro\n       = PropertyHelper.getPropertyId(\"HostRoles\", \"actual_configs\");\n   protected static final String HOST_COMPONENT_STALE_CONFIGS_PROPERTY_ID\n       = PropertyHelper.getPropertyId(\"HostRoles\", \"stale_configs\");\n-  protected static final String HOST_COMPONENT_ADMIN_STATE_PROPERTY_ID\n-      = PropertyHelper.getPropertyId(\"HostRoles\", \"admin_state\");\n+  protected static final String HOST_COMPONENT_DESIRED_ADMIN_STATE_PROPERTY_ID\n+      = PropertyHelper.getPropertyId(\"HostRoles\", \"desired_admin_state\");\n   //Component name mappings\n   private static final Map<String, PropertyProvider> HOST_COMPONENT_PROPERTIES_PROVIDER = new HashMap<String, PropertyProvider>();\n   private static final int HOST_COMPONENT_HTTP_PROPERTY_REQUEST_CONNECT_TIMEOUT = 1500;   //milliseconds\n@@ -193,7 +193,7 @@ public class HostComponentResourceProvider extends AbstractControllerResourcePro\n       setResourceProperty(resource, HOST_COMPONENT_STALE_CONFIGS_PROPERTY_ID,\n           Boolean.valueOf(response.isStaleConfig()), requestedIds);\n       if (response.getAdminState() != null) {\n-        setResourceProperty(resource, HOST_COMPONENT_ADMIN_STATE_PROPERTY_ID,\n+        setResourceProperty(resource, HOST_COMPONENT_DESIRED_ADMIN_STATE_PROPERTY_ID,\n             response.getAdminState(), requestedIds);\n       }\n \n@@ -302,9 +302,9 @@ public class HostComponentResourceProvider extends AbstractControllerResourcePro\n       serviceComponentHostRequest.setStaleConfig(\n           properties.get(HOST_COMPONENT_STALE_CONFIGS_PROPERTY_ID).toString().toLowerCase());\n     }\n-    if (properties.get(HOST_COMPONENT_ADMIN_STATE_PROPERTY_ID) != null) {\n+    if (properties.get(HOST_COMPONENT_DESIRED_ADMIN_STATE_PROPERTY_ID) != null) {\n       serviceComponentHostRequest.setAdminState(\n-          properties.get(HOST_COMPONENT_ADMIN_STATE_PROPERTY_ID).toString());\n+          properties.get(HOST_COMPONENT_DESIRED_ADMIN_STATE_PROPERTY_ID).toString());\n     }\n \n     return serviceComponentHostRequest;\n",
  "files": 4,
  "linesAdd": 32,
  "linesRem": 30,
  "failing_tests": [],
  "nb_test": 1249,
  "nb_failure": 1,
  "nb_error": 0,
  "nb_skipped": 8
}