{
  "project": "ambari",
  "jira_id": "1642",
  "commit": "d7e7b8df",
  "classification": {
    "singleLine": false
  },
  "patch": "diff --git a/ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java b/ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java\nindex 38fab71b74..fa77589d8b 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java\n@@ -282,7 +282,7 @@ public class Configuration {\n \n   public String getBootSetupAgentScript() {\n     return properties.getProperty(BOOTSTRAP_SETUP_AGENT_SCRIPT,\n-        \"/usr/lib/python2.7/site-packages/ambari_server/setupAgent.py\");\n+        \"/usr/lib/python2.6/site-packages/ambari_server/setupAgent.py\");\n   }\n \n   public String getBootSetupAgentPassword() {\ndiff --git a/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java b/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java\nindex 9e285f31f7..63641c89a5 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java\n@@ -30,19 +30,7 @@ import java.util.Map;\n import java.util.Map.Entry;\n import java.util.Set;\n import java.util.TreeMap;\n-\n-import org.apache.ambari.server.AmbariException;\n-import org.apache.ambari.server.ClusterNotFoundException;\n-import org.apache.ambari.server.DuplicateResourceException;\n-import org.apache.ambari.server.HostNotFoundException;\n-import org.apache.ambari.server.ObjectNotFoundException;\n-import org.apache.ambari.server.ParentObjectNotFoundException;\n-import org.apache.ambari.server.Role;\n-import org.apache.ambari.server.RoleCommand;\n-import org.apache.ambari.server.ServiceComponentHostNotFoundException;\n-import org.apache.ambari.server.ServiceComponentNotFoundException;\n-import org.apache.ambari.server.ServiceNotFoundException;\n-import org.apache.ambari.server.StackAccessException;\n+import org.apache.ambari.server.*;\n import org.apache.ambari.server.actionmanager.ActionManager;\n import org.apache.ambari.server.actionmanager.HostRoleCommand;\n import org.apache.ambari.server.actionmanager.RequestStatus;\n@@ -57,32 +45,9 @@ import org.apache.ambari.server.security.authorization.User;\n import org.apache.ambari.server.security.authorization.Users;\n import org.apache.ambari.server.serveraction.ServerAction;\n import org.apache.ambari.server.stageplanner.RoleGraph;\n-import org.apache.ambari.server.state.Cluster;\n-import org.apache.ambari.server.state.Clusters;\n-import org.apache.ambari.server.state.ComponentInfo;\n-import org.apache.ambari.server.state.Config;\n-import org.apache.ambari.server.state.ConfigFactory;\n-import org.apache.ambari.server.state.DesiredConfig;\n-import org.apache.ambari.server.state.Host;\n-import org.apache.ambari.server.state.OperatingSystemInfo;\n-import org.apache.ambari.server.state.PropertyInfo;\n-import org.apache.ambari.server.state.RepositoryInfo;\n-import org.apache.ambari.server.state.Service;\n-import org.apache.ambari.server.state.ServiceComponent;\n-import org.apache.ambari.server.state.ServiceComponentFactory;\n-import org.apache.ambari.server.state.ServiceComponentHost;\n-import org.apache.ambari.server.state.ServiceComponentHostEvent;\n-import org.apache.ambari.server.state.ServiceComponentHostFactory;\n-import org.apache.ambari.server.state.ServiceFactory;\n-import org.apache.ambari.server.state.ServiceInfo;\n-import org.apache.ambari.server.state.StackId;\n-import org.apache.ambari.server.state.StackInfo;\n-import org.apache.ambari.server.state.State;\n-import org.apache.ambari.server.state.svccomphost.ServiceComponentHostInstallEvent;\n-import org.apache.ambari.server.state.svccomphost.ServiceComponentHostOpInProgressEvent;\n-import org.apache.ambari.server.state.svccomphost.ServiceComponentHostStartEvent;\n-import org.apache.ambari.server.state.svccomphost.ServiceComponentHostStopEvent;\n-import org.apache.ambari.server.state.svccomphost.ServiceComponentHostUpgradeEvent;\n+import org.apache.ambari.server.state.*;\n+import org.apache.ambari.server.state.fsm.InvalidStateTransitionException;\n+import org.apache.ambari.server.state.svccomphost.*;\n import org.apache.ambari.server.utils.StageUtils;\n import org.apache.commons.lang.StringUtils;\n import org.slf4j.Logger;\n@@ -648,16 +613,7 @@ public class AmbariManagementControllerImpl implements\n         new HashMap<String, Map<String, Map<String, Set<String>>>>();\n     Set<String> duplicates = new HashSet<String>();\n     for (ServiceComponentHostRequest request : requests) {\n-      if (request.getClusterName() == null\n-          || request.getClusterName().isEmpty()\n-          || request.getComponentName() == null\n-          || request.getComponentName().isEmpty()\n-          || request.getHostname() == null\n-          || request.getHostname().isEmpty()) {\n-        throw new IllegalArgumentException(\"Invalid arguments,\"\n-            + \" clustername, componentname and hostname should not be null\"\n-            + \" when trying to create a hostcomponent\");\n-      }\n+      validateServiceComponentHostRequest(request);\n \n       Cluster cluster;\n       try {\n@@ -667,25 +623,8 @@ public class AmbariManagementControllerImpl implements\n             \"Attempted to add a host_component to a cluster which doesn't exist: \", e);\n       }\n \n-      if (request.getServiceName() == null\n-          || request.getServiceName().isEmpty()) {\n-        StackId stackId = cluster.getDesiredStackVersion();\n-        String serviceName =\n-            ambariMetaInfo.getComponentToService(stackId.getStackName(),\n-                stackId.getStackVersion(), request.getComponentName());\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Looking up service name for component\"\n-              + \", componentName=\" + request.getComponentName()\n-              + \", serviceName=\" + serviceName);\n-        }\n-        if (serviceName == null\n-            || serviceName.isEmpty()) {\n-          throw new AmbariException(\"Could not find service for component\"\n-              + \", componentName=\" + request.getComponentName()\n-              + \", clusterName=\" + cluster.getClusterName()\n-              + \", stackInfo=\" + stackId.getStackId());\n-        }\n-        request.setServiceName(serviceName);\n+      if (StringUtils.isEmpty(request.getServiceName())) {\n+        request.setServiceName(findServiceName(cluster, request.getComponentName()));\n       }\n \n       if (LOG.isDebugEnabled()) {\n@@ -1439,7 +1378,6 @@ public class AmbariManagementControllerImpl implements\n     // Set the current version value if its not already set\n     if (currentVersion == null) {\n       cluster.setCurrentStackVersion(desiredVersion);\n-      cluster.refresh();\n       currentVersion = cluster.getCurrentStackVersion();\n     }\n \n@@ -2115,7 +2053,8 @@ public class AmbariManagementControllerImpl implements\n             || oldState == State.STOP_FAILED\n             || oldState == State.UPGRADE_FAILED\n             || oldState == State.UPGRADING\n-            || oldState == State.STOPPING) {\n+            || oldState == State.STOPPING\n+            || oldState == State.MAINTENANCE) {\n           return true;\n         }\n         break;\n@@ -2139,6 +2078,10 @@ public class AmbariManagementControllerImpl implements\n             || oldState == State.WIPEOUT_FAILED) {\n           return true;\n         }\n+      case MAINTENANCE:\n+        if (oldState == State.INSTALLED) {\n+          return true;\n+        }\n     }\n     return false;\n   }\n@@ -2366,6 +2309,19 @@ public class AmbariManagementControllerImpl implements\n         }\n         for (ServiceComponentHost sch : sc.getServiceComponentHosts().values()){\n           State oldSchState = sch.getState();\n+          if (oldSchState == State.MAINTENANCE) {\n+            //Ignore host components updates in this state\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\"Ignoring ServiceComponentHost\"\n+                  + \", clusterName=\" + request.getClusterName()\n+                  + \", serviceName=\" + s.getName()\n+                  + \", componentName=\" + sc.getName()\n+                  + \", hostname=\" + sch.getHostName()\n+                  + \", currentState=\" + oldSchState\n+                  + \", newDesiredState=\" + newState);\n+            }\n+            continue;\n+          }\n           if (newState == oldSchState) {\n             sch.setDesiredState(newState);\n             if (LOG.isDebugEnabled()) {\n@@ -2652,6 +2608,18 @@ public class AmbariManagementControllerImpl implements\n \n       for (ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {\n         State oldSchState = sch.getState();\n+        if (oldSchState == State.MAINTENANCE) {\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Ignoring ServiceComponentHost\"\n+                + \", clusterName=\" + request.getClusterName()\n+                + \", serviceName=\" + s.getName()\n+                + \", componentName=\" + sc.getName()\n+                + \", hostname=\" + sch.getHostName()\n+                + \", currentState=\" + oldSchState\n+                + \", newDesiredState=\" + newState);\n+          }\n+          continue;\n+        }\n         if (newState == oldSchState) {\n           sch.setDesiredState(newState);\n           if (LOG.isDebugEnabled()) {\n@@ -2835,41 +2803,18 @@ public class AmbariManagementControllerImpl implements\n     Map<String, Map<String, Map<String, Set<String>>>> hostComponentNames =\n         new HashMap<String, Map<String, Map<String, Set<String>>>>();\n     Set<State> seenNewStates = new HashSet<State>();\n-\n+    boolean processingUpgradeRequest = false;\n+    int numberOfRequestsProcessed = 0;\n+    StackId fromStackVersion = new StackId();\n+    Map<ServiceComponentHost, State> directTransitionScHosts = new HashMap<ServiceComponentHost, State>();\n     for (ServiceComponentHostRequest request : requests) {\n-      if (request.getClusterName() == null\n-          || request.getClusterName().isEmpty()\n-          || request.getComponentName() == null\n-          || request.getComponentName().isEmpty()\n-          || request.getHostname() == null\n-          || request.getHostname().isEmpty()) {\n-        throw new IllegalArgumentException(\"Invalid arguments\"\n-            + \", cluster name, component name and host name should be\"\n-            + \" provided to update host components\");\n-      }\n+      numberOfRequestsProcessed++;\n+      validateServiceComponentHostRequest(request);\n \n       Cluster cluster = clusters.getCluster(request.getClusterName());\n \n-      if (request.getServiceName() == null\n-          || request.getServiceName().isEmpty()) {\n-        StackId stackId = cluster.getDesiredStackVersion();\n-        String serviceName =\n-            ambariMetaInfo.getComponentToService(stackId.getStackName(),\n-                stackId.getStackVersion(), request.getComponentName());\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Looking up service name for component\"\n-              + \", componentName=\" + request.getComponentName()\n-              + \", serviceName=\" + serviceName);\n-        }\n-\n-        if (serviceName == null\n-            || serviceName.isEmpty()) {\n-          throw new AmbariException(\"Could not find service for component\"\n-              + \", componentName=\" + request.getComponentName()\n-              + \", clusterName=\" + cluster.getClusterName()\n-              + \", stackInfo=\" + stackId.getStackId());\n-        }\n-        request.setServiceName(serviceName);\n+      if (StringUtils.isEmpty(request.getServiceName())) {\n+        request.setServiceName(findServiceName(cluster, request.getComponentName()));\n       }\n \n       if (LOG.isDebugEnabled()) {\n@@ -3017,6 +2962,33 @@ public class AmbariManagementControllerImpl implements\n             + \", currentState=\" + oldSchState\n             + \", newDesiredState=\" + newState);\n       }\n+\n+      if (isDirectTransition(oldSchState, newState)) {\n+\n+//        if (newState == State.DELETED) {\n+//          if (!sch.canBeRemoved()) {\n+//            throw new AmbariException(\"Servicecomponenthost cannot be removed\"\n+//                + \", clusterName=\" + cluster.getClusterName()\n+//                + \", clusterId=\" + cluster.getClusterId()\n+//                + \", serviceName=\" + sch.getServiceName()\n+//                + \", componentName=\" + sch.getServiceComponentName()\n+//                + \", hostname=\" + sch.getHostName()\n+//                + \", currentState=\" + oldSchState\n+//                + \", newDesiredState=\" + newState);\n+//          }\n+//        }\n+\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Handling direct transition update to ServiceComponentHost\"\n+              + \", clusterName=\" + request.getClusterName()\n+              + \", serviceName=\" + s.getName()\n+              + \", componentName=\" + sc.getName()\n+              + \", hostname=\" + sch.getHostName()\n+              + \", currentState=\" + oldSchState\n+              + \", newDesiredState=\" + newState);\n+        }\n+        directTransitionScHosts.put(sch, newState);\n+      } else {\n         if (!changedScHosts.containsKey(sc.getName())) {\n           changedScHosts.put(sc.getName(),\n               new HashMap<State, List<ServiceComponentHost>>());\n@@ -3036,6 +3008,7 @@ public class AmbariManagementControllerImpl implements\n         }\n         changedScHosts.get(sc.getName()).get(newState).add(sch);\n       }\n+    }\n \n     if (seenNewStates.size() > 1) {\n       // FIXME should we handle this scenario\n@@ -3061,12 +3034,42 @@ public class AmbariManagementControllerImpl implements\n \n           if (!updated.isEmpty()) {\n             sch.updateDesiredConfigs(updated);\n-            sch.persist();\n           }\n         }\n       }\n     }\n \n+    // Perform direct transitions (without task generation)\n+    for (Entry<ServiceComponentHost, State> entry : directTransitionScHosts.entrySet()) {\n+      ServiceComponentHost componentHost = entry.getKey();\n+      State newState = entry.getValue();\n+      long timestamp = System.currentTimeMillis();\n+      ServiceComponentHostEvent event;\n+      componentHost.setDesiredState(newState);\n+      switch (newState) {\n+        case MAINTENANCE:\n+          event = new ServiceComponentHostMaintenanceEvent(\n+              componentHost.getServiceComponentName(),\n+              componentHost.getHostName(),\n+              timestamp);\n+          break;\n+        case INSTALLED:\n+          event = new ServiceComponentHostRestoreEvent(\n+              componentHost.getServiceComponentName(),\n+              componentHost.getHostName(),\n+              timestamp);\n+          break;\n+        default:\n+          throw new AmbariException(\"Direct transition from \" + componentHost.getState() + \" to \" + newState + \" not supported\");\n+      }\n+      try {\n+        componentHost.handleEvent(event);\n+      } catch (InvalidStateTransitionException e) {\n+        //Should not occur, must be covered by previous checks\n+        throw new AmbariException(\"Internal error - not supported transition\", e);\n+      }\n+    }\n+\n     Cluster cluster = clusters.getCluster(clusterNames.iterator().next());\n \n     Map<String, String> requestParameters = null;\n@@ -3085,6 +3088,56 @@ public class AmbariManagementControllerImpl implements\n     return getRequestStatusResponse(stages.get(0).getRequestId());\n   }\n \n+  private void validateServiceComponentHostRequest(ServiceComponentHostRequest request) {\n+    if (request.getClusterName() == null\n+        || request.getClusterName().isEmpty()\n+        || request.getComponentName() == null\n+        || request.getComponentName().isEmpty()\n+        || request.getHostname() == null\n+        || request.getHostname().isEmpty()) {\n+      throw new IllegalArgumentException(\"Invalid arguments\"\n+          + \", cluster name, component name and host name should be\"\n+          + \" provided\");\n+    }\n+  }\n+\n+  private String findServiceName(Cluster cluster, String componentName) throws AmbariException {\n+    StackId stackId = cluster.getDesiredStackVersion();\n+    String serviceName =\n+        ambariMetaInfo.getComponentToService(stackId.getStackName(),\n+            stackId.getStackVersion(), componentName);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Looking up service name for component\"\n+          + \", componentName=\" + componentName\n+          + \", serviceName=\" + serviceName);\n+    }\n+\n+    if (serviceName == null\n+        || serviceName.isEmpty()) {\n+      throw new AmbariException(\"Could not find service for component\"\n+          + \", componentName=\" + componentName\n+          + \", clusterName=\" + cluster.getClusterName()\n+          + \", stackInfo=\" + stackId.getStackId());\n+    }\n+    return serviceName;\n+  }\n+\n+  private boolean isDirectTransition(State oldState, State newState) {\n+    switch (newState) {\n+      case INSTALLED:\n+        if (oldState == State.MAINTENANCE) {\n+          return true;\n+        }\n+        break;\n+      case MAINTENANCE:\n+        if (oldState == State.INSTALLED) {\n+          return true;\n+        }\n+        break;\n+    }\n+    return false;\n+  }\n+\n   private boolean checkIfUpgradeRequestAndValidate(ServiceComponentHostRequest request, Cluster cluster, Service s,\n                                                    ServiceComponent sc, ServiceComponentHost sch)\n       throws AmbariException {\n@@ -3231,8 +3284,66 @@ public class AmbariManagementControllerImpl implements\n \n   @Override\n   public RequestStatusResponse deleteHostComponents(\n-      Set<ServiceComponentHostRequest> request) throws AmbariException {\n-    throw new AmbariException(\"Delete host components not supported\");\n+      Set<ServiceComponentHostRequest> requests) throws AmbariException {\n+\n+    Map<ServiceComponent, Set<ServiceComponentHost>> safeToRemoveSCHs = new HashMap<ServiceComponent, Set<ServiceComponentHost>>();\n+\n+    for (ServiceComponentHostRequest request : requests) {\n+\n+      validateServiceComponentHostRequest(request);\n+\n+      Cluster cluster = clusters.getCluster(request.getClusterName());\n+\n+      if (StringUtils.isEmpty(request.getServiceName())) {\n+        request.setServiceName(findServiceName(cluster, request.getComponentName()));\n+      }\n+\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Received a createHostComponent DELETE request request\"\n+            + \", clusterName=\" + request.getClusterName()\n+            + \", serviceName=\" + request.getServiceName()\n+            + \", componentName=\" + request.getComponentName()\n+            + \", hostname=\" + request.getHostname()\n+            + \", request=\" + request);\n+      }\n+\n+      Service service = cluster.getService(request.getServiceName());\n+\n+      ServiceComponent component = service.getServiceComponent(request.getComponentName());\n+\n+      ServiceComponentHost componentHost = component.getServiceComponentHost(request.getHostname());\n+\n+      if (!componentHost.canBeRemoved()) {\n+        throw new AmbariException(\"Host Component cannot be removed\"\n+            + \", clusterName=\" + request.getClusterName()\n+            + \", serviceName=\" + request.getServiceName()\n+            + \", componentName=\" + request.getComponentName()\n+            + \", hostname=\" + request.getHostname()\n+            + \", request=\" + request);\n+      }\n+\n+\n+      //Only allow removing master components in MAINTENANCE state without stages generation\n+      if (component.isClientComponent() ||\n+          componentHost.getState() != State.MAINTENANCE) {\n+        throw new AmbariException(\"Only master component in MAINTENANCE state can be removed\");\n+      }\n+\n+      if (!safeToRemoveSCHs.containsKey(component)) {\n+        safeToRemoveSCHs.put(component, new HashSet<ServiceComponentHost>());\n+      }\n+\n+      safeToRemoveSCHs.get(component).add(componentHost);\n+\n+    }\n+\n+    for (Entry<ServiceComponent, Set<ServiceComponentHost>> entry : safeToRemoveSCHs.entrySet()) {\n+      for (ServiceComponentHost componentHost : entry.getValue()) {\n+        entry.getKey().deleteServiceComponentHosts(componentHost.getHostName());\n+      }\n+    }\n+\n+    return null;\n   }\n \n   @Override\ndiff --git a/ambari-server/src/main/java/org/apache/ambari/server/state/DesiredConfig.java b/ambari-server/src/main/java/org/apache/ambari/server/state/DesiredConfig.java\nindex 605d41658e..1b4bb6830b 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/state/DesiredConfig.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/state/DesiredConfig.java\n@@ -1,4 +1,4 @@\n-/**\n+/*\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n  * distributed with this work for additional information\ndiff --git a/ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentHostEvent.java b/ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentHostEvent.java\nindex baa80523f6..f16a6359ba 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentHostEvent.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentHostEvent.java\n@@ -135,6 +135,10 @@ public abstract class ServiceComponentHostEvent\n         return new ServiceComponentHostWipeoutEvent(serviceComponentName, hostName, opTimestamp);\n       case HOST_SVCCOMP_UPGRADE:\n         return new ServiceComponentHostUpgradeEvent(serviceComponentName, hostName, opTimestamp, stackId);\n+      case HOST_SVCCOMP_MAINTENANCE:\n+        return new ServiceComponentHostMaintenanceEvent(serviceComponentName, hostName, opTimestamp);\n+      case HOST_SVCCOMP_RESTORE:\n+        return new ServiceComponentHostRestoreEvent(serviceComponentName, hostName, opTimestamp);\n     }\n     return null;\n   }\ndiff --git a/ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentHostEventType.java b/ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentHostEventType.java\nindex 3c0268e9f7..d58c9a036e 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentHostEventType.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentHostEventType.java\n@@ -58,5 +58,14 @@ public enum ServiceComponentHostEventType {\n   /**\n    * Triggering a host component upgrade.\n    */\n-  HOST_SVCCOMP_UPGRADE\n+  HOST_SVCCOMP_UPGRADE,\n+  /**\n+   * Putting host component into maintenance state\n+   */\n+  HOST_SVCCOMP_MAINTENANCE,\n+  /**\n+   * Recovering host component from maintenance state\n+   */\n+  HOST_SVCCOMP_RESTORE\n+\n }\ndiff --git a/ambari-server/src/main/java/org/apache/ambari/server/state/State.java b/ambari-server/src/main/java/org/apache/ambari/server/state/State.java\nindex 477f3b91f7..f1669ec8e4 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/state/State.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/state/State.java\n@@ -82,7 +82,11 @@ public enum State {\n   /**\n    * Upgrade has failed.\n    */\n-  UPGRADE_FAILED(15);\n+  UPGRADE_FAILED(15),\n+  /**\n+   * Disabled master's backup state\n+   */\n+  MAINTENANCE(16);\n \n   private final int state;\n \n@@ -101,6 +105,7 @@ public enum State {\n       case INSTALLED:\n       case STARTED:\n       case UNINSTALLED:\n+      case MAINTENANCE:\n         return true;\n       default:\n         return false;\n@@ -157,6 +162,7 @@ public enum State {\n       case INSTALL_FAILED:\n       case UPGRADE_FAILED:\n       case UNINSTALLED:\n+      case MAINTENANCE:\n         return true;\n       default:\n         return false;\ndiff --git a/ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java b/ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java\nindex b85f974075..5ed2c8b63d 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java\n@@ -314,6 +314,19 @@ public class ServiceComponentHostImpl implements ServiceComponentHost {\n          ServiceComponentHostEventType.HOST_SVCCOMP_WIPEOUT,\n          new ServiceComponentHostOpStartedTransition())\n \n+      .addTransition(State.INSTALLED,\n+          State.MAINTENANCE,\n+          ServiceComponentHostEventType.HOST_SVCCOMP_MAINTENANCE,\n+          new ServiceComponentHostOpCompletedTransition())\n+      .addTransition(State.MAINTENANCE,\n+          State.MAINTENANCE,\n+          ServiceComponentHostEventType.HOST_SVCCOMP_MAINTENANCE,\n+          new ServiceComponentHostOpCompletedTransition())\n+      .addTransition(State.MAINTENANCE,\n+          State.INSTALLED,\n+          ServiceComponentHostEventType.HOST_SVCCOMP_RESTORE,\n+          new ServiceComponentHostOpCompletedTransition())\n+\n      .installTopology();\n \n   private static final StateMachineFactory\n@@ -1265,7 +1278,7 @@ public class ServiceComponentHostImpl implements ServiceComponentHost {\n   }\n \n   @Override\n-  public void delete() throws AmbariException {\n+  public void delete() {\n     try {\n       writeLock.lock();\n       if (persisted) {\n",
  "files": 7,
  "linesAdd": 252,
  "linesRem": 109,
  "failing_tests": [],
  "nb_test": 0,
  "nb_failure": 0,
  "nb_error": 0,
  "nb_skipped": 0
}