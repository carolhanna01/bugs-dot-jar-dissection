{
  "project": "ambari",
  "jira_id": "1754",
  "commit": "6ddb4dba",
  "classification": {
    "singleLine": false
  },
  "patch": "diff --git a/ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java b/ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java\nindex 058678d67d..41c9a1bf3d 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java\n@@ -36,6 +36,7 @@ import org.apache.ambari.server.state.svccomphost.ServiceComponentHostOpFailedEv\n import org.apache.ambari.server.state.svccomphost.ServiceComponentHostOpInProgressEvent;\n import org.apache.ambari.server.state.svccomphost.ServiceComponentHostOpSucceededEvent;\n import org.apache.ambari.server.utils.StageUtils;\n+import org.apache.ambari.server.utils.VersionUtils;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n \n@@ -384,6 +385,21 @@ public class HeartBeatHandler {\n     String hostname = register.getHostname();\n     long now = System.currentTimeMillis();\n \n+    String agentVersion = register.getAgentVersion();\n+    String serverVersion = ambariMetaInfo.getServerVersion();\n+    if (!VersionUtils.areVersionsCompatible(serverVersion, agentVersion)) {\n+      LOG.warn(\"Received registration request from host with non compatible\"\n+              + \" agent version\"\n+              + \", hostname=\" + hostname\n+              + \", agentVersion=\" + agentVersion\n+              + \", serverVersion=\" + serverVersion);\n+      throw new AmbariException(\"Cannot register host with non compatible\"\n+              + \" agent version\"\n+              + \", hostname=\" + hostname\n+              + \", agentVersion=\" + agentVersion\n+              + \", serverVersion=\" + serverVersion);\n+    }\n+\n     String agentOsType = getOsType(register.getHardwareProfile().getOS(),\n         register.getHardwareProfile().getOSRelease());\n     if (!ambariMetaInfo.areOsTypesCompatible(\ndiff --git a/ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java b/ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java\nindex cab351edc3..49e948332b 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java\n@@ -25,7 +25,9 @@ import org.apache.ambari.server.AmbariException;\n import org.apache.ambari.server.ObjectNotFoundException;\n import org.apache.ambari.server.StackAccessException;\n import org.apache.ambari.server.configuration.Configuration;\n+import org.apache.ambari.server.resources.ResourceManager;\n import org.apache.ambari.server.state.*;\n+import org.apache.ambari.server.state.Stack;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.w3c.dom.*;\n@@ -37,12 +39,7 @@ import javax.xml.parsers.ParserConfigurationException;\n import java.io.File;\n import java.io.FilenameFilter;\n import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;\n \n /**\n  * ServiceInfo responsible getting information about cluster.\n@@ -50,8 +47,10 @@ import java.util.Set;\n @Singleton\n public class AmbariMetaInfo {\n \n+    private String serverVersion = \"undefined\";\n     private List<StackInfo> stacksResult = new ArrayList<StackInfo>();\n     private File stackRoot;\n+    private File serverVersionFile;\n     private final static Logger LOG = LoggerFactory\n             .getLogger(AmbariMetaInfo.class);\n     \n@@ -105,12 +104,15 @@ public class AmbariMetaInfo {\n     @Inject\n     public AmbariMetaInfo(Configuration conf) throws Exception {\n       String stackPath = conf.getMetadataPath();\n+      String serverVersionFilePath = conf.getServerVersionFilePath();\n       this.stackRoot = new File(stackPath);\n+      this.serverVersionFile = new File(serverVersionFilePath);\n     }\n \n     @Inject\n-    public AmbariMetaInfo(File stackRoot) throws Exception {\n+    public AmbariMetaInfo(File stackRoot, File serverVersionFile) throws Exception {\n       this.stackRoot = stackRoot;\n+      this.serverVersionFile = serverVersionFile;\n     }\n \n \n@@ -121,6 +123,7 @@ public class AmbariMetaInfo {\n      */\n     @Inject\n     public void init() throws Exception {\n+        readServerVersion();\n         getConfigurationInformation(stackRoot);\n     }\n \n@@ -588,6 +591,14 @@ public class AmbariMetaInfo {\n   }\n \n \n+    private void readServerVersion() throws  Exception{\n+      File versionFile = this.serverVersionFile;\n+      String t = (new File(\".\")).getAbsolutePath();\n+      if (! versionFile.exists()) {\n+        throw new AmbariException(\"Server version file does not exist\");\n+      }\n+      serverVersion = new Scanner(versionFile).useDelimiter(\"\\\\Z\").next();\n+    }\n \n     private void getConfigurationInformation(File stackRoot) throws Exception {\n \n@@ -676,6 +687,10 @@ public class AmbariMetaInfo {\n         }\n     }\n \n+  public String getServerVersion() {\n+    return serverVersion;\n+  }\n+\n   private StackInfo getStackInfo(File stackVersionFolder) {\n \n     StackInfo stackInfo = new StackInfo();\ndiff --git a/ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java b/ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java\nindex aabd93232a..42b1f82a71 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java\n@@ -67,6 +67,8 @@ public class Configuration {\n   public static final String PASSPHRASE_KEY = \"security.server.passphrase\";\n   public static final String RESOURCES_DIR_KEY = \"resources.dir\";\n   public static final String METADETA_DIR_PATH = \"metadata.path\";\n+  public static final String SERVER_VERSION_FILE = \"server.version.file\";\n+  public static final String SERVER_VERSION_KEY = \"version\";\n \n \n   public static final String CLIENT_SECURITY_KEY = \"client.security\";\n@@ -302,7 +304,7 @@ public class Configuration {\n \n   public String getBootSetupAgentScript() {\n     return properties.getProperty(BOOTSTRAP_SETUP_AGENT_SCRIPT,\n-        \"/usr/lib/python2.7/site-packages/ambari_server/setupAgent.py\");\n+        \"/usr/lib/python2.6/site-packages/ambari_server/setupAgent.py\");\n   }\n \n   public String getBootSetupAgentPassword() {\n@@ -358,6 +360,10 @@ public class Configuration {\n     return properties.getProperty(METADETA_DIR_PATH);\n   }\n \n+  public String getServerVersionFilePath() {\n+    return properties.getProperty(SERVER_VERSION_FILE);\n+  }\n+\n   /**\n    * Check to see if the API should be authenticated or not\n    * @return false if not, true if the authentication is enabled.\ndiff --git a/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java b/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java\nindex b66ca88eed..9aa33aa4f4 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java\n@@ -36,6 +36,7 @@ import org.apache.ambari.server.bootstrap.BootStrapImpl;\n import org.apache.ambari.server.configuration.Configuration;\n import org.apache.ambari.server.orm.GuiceJpaInitializer;\n import org.apache.ambari.server.orm.PersistenceType;\n+import org.apache.ambari.server.orm.dao.MetainfoDAO;\n import org.apache.ambari.server.resources.ResourceManager;\n import org.apache.ambari.server.resources.api.rest.GetResource;\n import org.apache.ambari.server.security.CertificateManager;\n@@ -96,6 +97,8 @@ public class AmbariServer {\n   Injector injector;\n   @Inject\n   AmbariMetaInfo ambariMetaInfo;\n+  @Inject\n+  MetainfoDAO metainfoDAO;\n \n   public String getServerOsType() {\n     return configs.getServerOsType();\n@@ -114,6 +117,8 @@ public class AmbariServer {\n     server = new Server();\n     serverForAgent = new Server();\n \n+    checkDBVersion();\n+\n     try {\n       ClassPathXmlApplicationContext parentSpringAppContext =\n           new ClassPathXmlApplicationContext();\n@@ -371,6 +376,21 @@ public class AmbariServer {\n     }\n   }\n \n+  protected void checkDBVersion() throws AmbariException {\n+    LOG.info(\"Checking DB store version\");\n+    String databaseVersion = metainfoDAO.findByKey(Configuration.SERVER_VERSION_KEY).getMetainfoValue();\n+    String serverVersion = ambariMetaInfo.getServerVersion();\n+    if (! databaseVersion.equals(serverVersion)) {\n+      String error = \"Current database store version is not compatible with \" +\n+              \"current server version\"\n+              + \", serverVersion=\" + serverVersion\n+              + \", databaseVersion=\" + databaseVersion;\n+      LOG.warn(error);\n+      throw new AmbariException(error);\n+    }\n+    LOG.info(\"DB store version is compatible\");\n+  }\n+\n   public void stop() throws Exception {\n     try {\n       server.stop();\n",
  "files": 4,
  "linesAdd": 65,
  "linesRem": 8,
  "failing_tests": [],
  "nb_test": 0,
  "nb_failure": 0,
  "nb_error": 0,
  "nb_skipped": 0
}