{
  "project": "ambari",
  "jira_id": "21798",
  "commit": "65ddaed6",
  "classification": {
    "singleLine": false
  },
  "patch": "diff --git a/ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog252.java b/ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog252.java\nindex b83ba643ec..1b706d6b79 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog252.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog252.java\n@@ -19,6 +19,7 @@ package org.apache.ambari.server.upgrade;\n \n import java.sql.SQLException;\n import java.util.Arrays;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n@@ -37,9 +38,12 @@ import org.apache.ambari.server.state.Config;\n import org.apache.ambari.server.state.ConfigHelper;\n import org.apache.ambari.server.state.PropertyInfo;\n import org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer;\n+import org.apache.ambari.server.state.kerberos.KerberosComponentDescriptor;\n import org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor;\n import org.apache.ambari.server.state.kerberos.KerberosDescriptor;\n import org.apache.ambari.server.state.kerberos.KerberosDescriptorFactory;\n+import org.apache.ambari.server.state.kerberos.KerberosServiceDescriptor;\n+import org.apache.commons.collections.MapUtils;\n import org.apache.commons.lang.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -236,15 +240,52 @@ public class UpgradeCatalog252 extends AbstractUpgradeCatalog {\n         final KerberosDescriptor kerberosDescriptor = new KerberosDescriptorFactory().createInstance(data);\n \n         if (kerberosDescriptor != null) {\n+          boolean updated = false;\n+\n           // Find and remove configuration specifications for <code>livy-conf/livy.superusers</code>\n           // in SPARK since this logic has been moved to the relevant stack/service advisors\n-          boolean updatedSpark = removeConfigurationSpecification(kerberosDescriptor.getService(\"SPARK\"), \"livy-conf\", \"livy.superusers\");\n+          if(removeConfigurationSpecifications(kerberosDescriptor.getService(\"SPARK\"),\n+              Collections.<String, Collection<String>>singletonMap(\"livy-conf\", Collections.singleton(\"livy.superusers\")))) {\n+            updated = true;\n+          }\n \n           // Find and remove configuration specifications for <code>livy-conf2/livy.superusers</code>\n           // in SPARK2 since this logic has been moved to the relevant stack/service advisors\n-          boolean updatedSpark2 = removeConfigurationSpecification(kerberosDescriptor.getService(\"SPARK2\"), \"livy2-conf\", \"livy.superusers\");\n+          if(removeConfigurationSpecifications(kerberosDescriptor.getService(\"SPARK2\"),\n+              Collections.<String, Collection<String>>singletonMap(\"livy2-conf\", Collections.singleton(\"livy.superusers\")))) {\n+            updated = true;\n+          }\n+\n+          // Find and remove configuration specifications for the following configurations in KNOX/KNOX_GATEWAY\n+          // since they are invalid due to static \"knox\" embedded in the property name:\n+          // * oozie-site/oozie.service.ProxyUserService.proxyuser.knox.groups\n+          // * oozie-site/oozie.service.ProxyUserService.proxyuser.knox.hosts\n+          // * webhcat-site/webhcat.proxyuser.knox.groups\n+          // * webhcat-site/webhcat.proxyuser.knox.hosts\n+          // * core-site/hadoop.proxyuser.knox.groups\n+          // * core-site/hadoop.proxyuser.knox.hosts\n+          // * falcon-runtime.properties/*.falcon.service.ProxyUserService.proxyuser.knox.groups\n+          // * falcon-runtime.properties/*.falcon.service.ProxyUserService.proxyuser.knox.hosts\n+          KerberosServiceDescriptor knoxKerberosDescriptor = kerberosDescriptor.getService(\"KNOX\");\n+          if(knoxKerberosDescriptor != null) {\n+            KerberosComponentDescriptor knoxGatewayKerberosDescriptor = knoxKerberosDescriptor.getComponent(\"KNOX_GATEWAY\");\n+            if (knoxGatewayKerberosDescriptor != null) {\n+              Map<String, Collection<String>> configsToRemove = new HashMap<>();\n+              configsToRemove.put(\"oozie-site\",\n+                  Arrays.asList(\"oozie.service.ProxyUserService.proxyuser.knox.groups\", \"oozie.service.ProxyUserService.proxyuser.knox.hosts\"));\n+              configsToRemove.put(\"webhcat-site\",\n+                  Arrays.asList(\"webhcat.proxyuser.knox.groups\", \"webhcat.proxyuser.knox.hosts\"));\n+              configsToRemove.put(\"core-site\",\n+                  Arrays.asList(\"hadoop.proxyuser.knox.groups\", \"hadoop.proxyuser.knox.hosts\"));\n+              configsToRemove.put(\"falcon-runtime.properties\",\n+                  Arrays.asList(\"*.falcon.service.ProxyUserService.proxyuser.knox.groups\", \"*.falcon.service.ProxyUserService.proxyuser.knox.hosts\"));\n+              if (removeConfigurationSpecifications(knoxGatewayKerberosDescriptor, configsToRemove)) {\n+                updated = true;\n+              }\n+            }\n+          }\n \n-          if (updatedSpark || updatedSpark2) {\n+          if (updated) {\n             artifactEntity.setArtifactData(kerberosDescriptor.toMap());\n             artifactDAO.merge(artifactEntity);\n           }\n@@ -354,24 +395,40 @@ public class UpgradeCatalog252 extends AbstractUpgradeCatalog {\n   }\n \n   /**\n-   * Given an {@link AbstractKerberosDescriptorContainer}, attempts to remove the specified property\n-   * (<code>configType/propertyName</code> from it.\n+   * Given an {@link AbstractKerberosDescriptorContainer}, attempts to remove the specified\n+   * configurations (<code>configType/propertyName</code> from it.\n    *\n    * @param kerberosDescriptorContainer the container to update\n-   * @param configType                  the configuration type\n-   * @param propertyName                the property name\n+   * @param configurations              a map of configuration types to sets of property names.\n    * @return true if changes where made to the container; false otherwise\n    */\n-  private boolean removeConfigurationSpecification(AbstractKerberosDescriptorContainer kerberosDescriptorContainer, String configType, String propertyName) {\n+  private boolean removeConfigurationSpecifications(AbstractKerberosDescriptorContainer kerberosDescriptorContainer, Map<String, Collection<String>> configurations) {\n     boolean updated = false;\n     if (kerberosDescriptorContainer != null) {\n-      KerberosConfigurationDescriptor configurationDescriptor = kerberosDescriptorContainer.getConfiguration(configType);\n+      if (!MapUtils.isEmpty(configurations)) {\n+        for (Map.Entry<String, Collection<String>> entry : configurations.entrySet()) {\n+          String configType = entry.getKey();\n+\n+          for (String propertyName : entry.getValue()) {\n+            Map<String, KerberosConfigurationDescriptor> configurationDescriptors = kerberosDescriptorContainer.getConfigurations(false);\n+            KerberosConfigurationDescriptor configurationDescriptor = (configurationDescriptors == null)\n+                ? null\n+                : configurationDescriptors.get(configType);\n             if (configurationDescriptor != null) {\n               Map<String, String> properties = configurationDescriptor.getProperties();\n               if ((properties != null) && properties.containsKey(propertyName)) {\n                 properties.remove(propertyName);\n                 LOG.info(\"Removed {}/{} from the descriptor named {}\", configType, propertyName, kerberosDescriptorContainer.getName());\n                 updated = true;\n+\n+                // If there are no more properties in the configurationDescriptor, remove it from the container.\n+                if (properties.isEmpty()) {\n+                  configurationDescriptors.remove(configType);\n+                  kerberosDescriptorContainer.setConfigurations(configurationDescriptors);\n+                }\n+              }\n+            }\n+          }\n         }\n       }\n     }\n",
  "files": 1,
  "linesAdd": 66,
  "linesRem": 9,
  "failing_tests": [],
  "nb_test": 4862,
  "nb_failure": 1,
  "nb_error": 0,
  "nb_skipped": 37
}