{
  "project": "ambari",
  "jira_id": "22628",
  "commit": "8e23fa28",
  "classification": {
    "singleLine": false
  },
  "patch": "diff --git a/ambari-server/src/main/java/org/apache/ambari/server/agent/ExecutionCommand.java b/ambari-server/src/main/java/org/apache/ambari/server/agent/ExecutionCommand.java\nindex 5ee4bf6781..909398528f 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/agent/ExecutionCommand.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/agent/ExecutionCommand.java\n@@ -29,8 +29,6 @@ import org.apache.ambari.annotations.ExperimentalFeature;\n import org.apache.ambari.server.AmbariException;\n import org.apache.ambari.server.RoleCommand;\n import org.apache.ambari.server.state.Cluster;\n-import org.apache.ambari.server.state.Service;\n-import org.apache.ambari.server.state.ServiceComponent;\n import org.apache.ambari.server.state.UpgradeContext.UpgradeSummary;\n import org.apache.ambari.server.utils.StageUtils;\n import org.slf4j.Logger;\n@@ -553,30 +551,21 @@ public class ExecutionCommand extends AgentCommand {\n   }\n \n   /**\n-   * Used to set a map of {service -> { component -> version}}.  This is necessary when performing\n-   * an upgrade to correct build paths of required binaries.\n-   * @param cluster the cluster from which to build the map\n+   * Used to set a map of {service -> { component -> version}}. This is\n+   * necessary when performing an upgrade to correct build paths of required\n+   * binaries. This method will only set the version information for a component\n+   * if:\n+   * <ul>\n+   * <li>The component advertises a version</li>\n+   * <li>The repository for the component has been resolved and the version can\n+   * be trusted</li>\n+   * </ul>\n+   *\n+   * @param cluster\n+   *          the cluster from which to build the map\n    */\n   public void setComponentVersions(Cluster cluster) throws AmbariException {\n-    Map<String, Map<String, String>> componentVersionMap = new HashMap<>();\n-\n-    for (Service service : cluster.getServices().values()) {\n-      Map<String, String> componentMap = new HashMap<>();\n-\n-      boolean shouldSet = false;\n-      for (ServiceComponent component : service.getServiceComponents().values()) {\n-        if (component.isVersionAdvertised()) {\n-          shouldSet = true;\n-          componentMap.put(component.getName(), component.getDesiredVersion());\n-        }\n-      }\n-\n-      if (shouldSet) {\n-        componentVersionMap.put(service.getName(), componentMap);\n-      }\n-    }\n-\n-    this.componentVersionMap = componentVersionMap;\n+    componentVersionMap = cluster.getComponentVersionMap();\n   }\n \n   /**\ndiff --git a/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java b/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java\nindex 75f47caa58..dcafdeabed 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java\n@@ -458,6 +458,8 @@ public class ClientConfigResourceProvider extends AbstractControllerResourceProv\n         jsonContent.put(\"clusterName\", cluster.getClusterName());\n         jsonContent.put(\"serviceName\", serviceName);\n         jsonContent.put(\"role\", componentName);\n+        jsonContent.put(\"componentVersionMap\", cluster.getComponentVersionMap());\n+\n         jsonConfigurations = gson.toJson(jsonContent);\n \n         File tmpDirectory = new File(TMP_PATH);\ndiff --git a/ambari-server/src/main/java/org/apache/ambari/server/state/Cluster.java b/ambari-server/src/main/java/org/apache/ambari/server/state/Cluster.java\nindex 90dd611ecf..62226afbaf 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/state/Cluster.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/state/Cluster.java\n@@ -673,4 +673,13 @@ public interface Cluster {\n    */\n   void addSuspendedUpgradeParameters(Map<String, String> commandParams,\n       Map<String, String> roleParams);\n+\n+  /**\n+   * Gets a mapping of service to component/version for every installed\n+   * component in the cluster which advertises a version and for which the\n+   * repository has been resolved.\n+   *\n+   * @return a mapping of service to component version, or an empty map.\n+   */\n+  Map<String, Map<String, String>> getComponentVersionMap();\n }\ndiff --git a/ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java b/ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java\nindex 8f5e4f48a5..c23b971b85 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java\n@@ -2725,4 +2725,35 @@ public class ClusterImpl implements Cluster {\n     // suspended goes in role params\n     roleParams.put(KeyNames.UPGRADE_SUSPENDED, Boolean.TRUE.toString().toLowerCase());\n   }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public Map<String, Map<String, String>> getComponentVersionMap() {\n+    Map<String, Map<String, String>> componentVersionMap = new HashMap<>();\n+\n+    for (Service service : getServices().values()) {\n+      Map<String, String> componentMap = new HashMap<>();\n+      for (ServiceComponent component : service.getServiceComponents().values()) {\n+        // skip components which don't advertise a version\n+        if (!component.isVersionAdvertised()) {\n+          continue;\n+        }\n+\n+        // if the repo isn't resolved, then we can't trust the version\n+        if (!component.getDesiredRepositoryVersion().isResolved()) {\n+          continue;\n+        }\n+\n+        componentMap.put(component.getName(), component.getDesiredVersion());\n+      }\n+\n+      if (!componentMap.isEmpty()) {\n+        componentVersionMap.put(service.getName(), componentMap);\n+      }\n+    }\n+\n+    return componentVersionMap;\n+  }\n }\n",
  "files": 4,
  "linesAdd": 55,
  "linesRem": 24,
  "failing_tests": [],
  "nb_test": 4993,
  "nb_failure": 1,
  "nb_error": 1,
  "nb_skipped": 36
}