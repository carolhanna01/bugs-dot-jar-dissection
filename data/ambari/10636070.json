{
  "project": "ambari",
  "jira_id": "12613",
  "commit": "10636070",
  "classification": {
    "singleLine": false
  },
  "patch": "diff --git a/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java b/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java\nindex 1f4e7cd81b..b1149a4016 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java\n@@ -100,12 +100,16 @@ import org.apache.ambari.server.orm.dao.WidgetLayoutDAO;\n import org.apache.ambari.server.orm.entities.ClusterEntity;\n import org.apache.ambari.server.orm.entities.ClusterVersionEntity;\n import org.apache.ambari.server.orm.entities.OperatingSystemEntity;\n+import org.apache.ambari.server.orm.entities.PermissionEntity;\n+import org.apache.ambari.server.orm.entities.PrivilegeEntity;\n import org.apache.ambari.server.orm.entities.RepositoryEntity;\n import org.apache.ambari.server.orm.entities.RepositoryVersionEntity;\n import org.apache.ambari.server.orm.entities.WidgetEntity;\n import org.apache.ambari.server.orm.entities.WidgetLayoutEntity;\n import org.apache.ambari.server.orm.entities.WidgetLayoutUserWidgetEntity;\n import org.apache.ambari.server.scheduler.ExecutionScheduleManager;\n+import org.apache.ambari.server.security.SecurityHelper;\n+import org.apache.ambari.server.security.authorization.AmbariGrantedAuthority;\n import org.apache.ambari.server.security.authorization.AuthorizationHelper;\n import org.apache.ambari.server.security.authorization.Group;\n import org.apache.ambari.server.security.authorization.User;\n@@ -172,6 +176,7 @@ import com.google.inject.Inject;\n import com.google.inject.Injector;\n import com.google.inject.Singleton;\n import com.google.inject.persist.Transactional;\n+import org.springframework.security.core.GrantedAuthority;\n \n @Singleton\n public class AmbariManagementControllerImpl implements AmbariManagementController {\n@@ -250,6 +255,9 @@ public class AmbariManagementControllerImpl implements AmbariManagementControlle\n    */\n   private KerberosHelper kerberosHelper;\n \n+  @Inject\n+  private SecurityHelper securityHelper;\n+\n   final private String masterHostname;\n   final private Integer masterPort;\n   final private String masterProtocol;\n@@ -2647,6 +2655,15 @@ public class AmbariManagementControllerImpl implements AmbariManagementControlle\n     return serviceName;\n   }\n \n+  /**\n+   * Updates the users specified.\n+   *\n+   * @param requests the users to modify\n+   *\n+   * @throws AmbariException if the resources cannot be updated\n+   * @throws IllegalArgumentException if the authenticated user is not authorized to update all of\n+   * the requested properties\n+   */\n   @Override\n   public synchronized void updateUsers(Set<UserRequest> requests) throws AmbariException {\n     for (UserRequest request : requests) {\n@@ -2661,10 +2678,17 @@ public class AmbariManagementControllerImpl implements AmbariManagementControlle\n       }\n \n       if (null != request.isActive()) {\n+        // If this value is being set, make sure the authenticated user is an administrator before\n+        // allowing to change it. Only administrators should be able to change a user's active state\n+        verifyAuthorization();\n         users.setUserActive(u.getUserName(), request.isActive());\n       }\n \n       if (null != request.isAdmin()) {\n+        // If this value is being set, make sure the authenticated user is an administrator before\n+        // allowing to change it. Only administrators should be able to change a user's administrative\n+        // privileges\n+        verifyAuthorization();\n         if (request.isAdmin()) {\n           users.grantAdminPrivilege(u.getUserId());\n         } else {\n@@ -4259,4 +4283,31 @@ public class AmbariManagementControllerImpl implements AmbariManagementControlle\n       }\n     }\n   }\n+\n+  /**\n+   * Determine whether or not the authenticated user has administrator privileges\n+   *\n+   * @throws IllegalArgumentException if the authenticated user does not have administrator privileges.\n+   */\n+  protected void verifyAuthorization() throws AmbariException {\n+    boolean isAuthorized = false;\n+\n+    for (GrantedAuthority grantedAuthority : securityHelper.getCurrentAuthorities()) {\n+      if (grantedAuthority instanceof AmbariGrantedAuthority) {\n+        AmbariGrantedAuthority authority = (AmbariGrantedAuthority) grantedAuthority;\n+        PrivilegeEntity privilegeEntity = authority.getPrivilegeEntity();\n+        Integer permissionId = privilegeEntity.getPermission().getId();\n+\n+        if (permissionId.equals(PermissionEntity.AMBARI_ADMIN_PERMISSION)) {\n+          isAuthorized = true;\n+          break;\n+        }\n+      }\n+    }\n+\n+    if (!isAuthorized) {\n+      throw new IllegalArgumentException(\"You do not have authorization to update the requested resource property.\");\n+    }\n+  }\n+\n }\n",
  "files": 1,
  "linesAdd": 51,
  "linesRem": 0,
  "failing_tests": [
    "UserResourceProviderTest.testUpdateResources_SetAdmin_AsAdminUser",
    "UserResourceProviderTest.testUpdateResources_SetActive_AsAdminUser",
    "TestActionScheduler.testActionTimeout"
  ],
  "nb_test": 3118,
  "nb_failure": 3,
  "nb_error": 2,
  "nb_skipped": 24
}