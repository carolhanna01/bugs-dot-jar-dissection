{
  "project": "ambari",
  "jira_id": "16131",
  "commit": "4104f2f9",
  "classification": {
    "singleLine": false
  },
  "patch": "diff --git a/ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java b/ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java\nindex 5ff6a7427f..0afae97b45 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java\n@@ -17,11 +17,24 @@\n  */\n package org.apache.ambari.server.configuration;\n \n-import com.google.gson.JsonElement;\n-import com.google.gson.JsonObject;\n-import com.google.gson.JsonParser;\n-import com.google.inject.Inject;\n-import com.google.inject.Singleton;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.security.cert.CertificateException;\n+import java.security.interfaces.RSAPublicKey;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.EnumSet;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Properties;\n+import java.util.Set;\n+\n import org.apache.ambari.annotations.Experimental;\n import org.apache.ambari.annotations.ExperimentalFeature;\n import org.apache.ambari.server.AmbariException;\n@@ -39,7 +52,6 @@ import org.apache.ambari.server.state.stack.OsFamily;\n import org.apache.ambari.server.utils.AmbariPath;\n import org.apache.ambari.server.utils.Parallel;\n import org.apache.ambari.server.utils.ShellCommandUtil;\n-import org.apache.commons.collections.ListUtils;\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.lang.RandomStringUtils;\n import org.apache.commons.lang.StringUtils;\n@@ -47,23 +59,11 @@ import org.apache.commons.lang.math.NumberUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import java.io.File;\n-import java.io.FileNotFoundException;\n-import java.io.FileReader;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.security.cert.CertificateException;\n-import java.security.interfaces.RSAPublicKey;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.EnumSet;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Map.Entry;\n-import java.util.Properties;\n-import java.util.Set;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n \n \n /**\n@@ -537,6 +537,11 @@ public class Configuration {\n   private static final int VIEW_EXTRACTION_THREADPOOL_CORE_SIZE_DEFAULT = 10;\n   private static final String VIEW_EXTRACTION_THREADPOOL_TIMEOUT_KEY = \"view.extraction.threadpool.timeout\";\n   private static final long VIEW_EXTRACTION_THREADPOOL_TIMEOUT_DEFAULT = 100000L;\n+  private static final String VIEW_REQUEST_THREADPOOL_MAX_SIZE_KEY = \"view.request.threadpool.size.max\";\n+  private static final int VIEW_REQUEST_THREADPOOL_MAX_SIZE_DEFAULT = 0;\n+  private static final String VIEW_REQUEST_THREADPOOL_TIMEOUT_KEY = \"view.request.threadpool.timeout\";\n+  private static final int VIEW_REQUEST_THREADPOOL_TIMEOUT_DEFAULT = 2000;\n+\n \n   public static final String PROPERTY_PROVIDER_THREADPOOL_MAX_SIZE_KEY = \"server.property-provider.threadpool.size.max\";\n   public static final int PROPERTY_PROVIDER_THREADPOOL_MAX_SIZE_DEFAULT = 4 * Runtime.getRuntime().availableProcessors();\n@@ -1271,7 +1276,9 @@ public class Configuration {\n    * @param list\n    */\n   private void listToLowerCase(List<String> list) {\n-    if (list == null) return;\n+    if (list == null) {\n+      return;\n+    }\n     for (int i = 0; i < list.size(); i++) {\n       list.set(i, list.get(i).toLowerCase());\n     }\n@@ -2323,6 +2330,32 @@ public class Configuration {\n       VIEW_EXTRACTION_THREADPOOL_CORE_SIZE_KEY, String.valueOf(VIEW_EXTRACTION_THREADPOOL_CORE_SIZE_DEFAULT)));\n   }\n \n+  /**\n+   * Get the maximum number of threads that will be allocated to fulfilling view\n+   * requests.\n+   *\n+   * @return the maximum number of threads that will be allocated for requests\n+   *         to load views or {@value #VIEW_REQUEST_THREADPOOL_MAX_SIZE_DEFAULT}\n+   *         if not specified.\n+   */\n+  public int getViewRequestThreadPoolMaxSize() {\n+    return Integer.parseInt(properties.getProperty(VIEW_REQUEST_THREADPOOL_MAX_SIZE_KEY,\n+        String.valueOf(VIEW_REQUEST_THREADPOOL_MAX_SIZE_DEFAULT)));\n+  }\n+\n+  /**\n+   * Get the time, in ms, that a request to a view will wait for an available\n+   * thread to handle the request before returning an error.\n+   *\n+   * @return the time that requests for a view should wait for an available\n+   *         thread or {@value #VIEW_REQUEST_THREADPOOL_TIMEOUT_DEFAULT} if not\n+   *         specified.\n+   */\n+  public int getViewRequestThreadPoolTimeout() {\n+    return Integer.parseInt(properties.getProperty(VIEW_REQUEST_THREADPOOL_TIMEOUT_KEY,\n+        String.valueOf(VIEW_REQUEST_THREADPOOL_TIMEOUT_DEFAULT)));\n+  }\n+\n   /**\n    * Get property-providers' thread pool core size.\n    *\ndiff --git a/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java b/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java\nindex dc531723a8..0527cbc0a2 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java\n@@ -19,9 +19,6 @@\n package org.apache.ambari.server.controller;\n \n \n-import javax.crypto.BadPaddingException;\n-import javax.servlet.DispatcherType;\n-\n import java.io.File;\n import java.io.IOException;\n import java.net.Authenticator;\n@@ -33,6 +30,9 @@ import java.util.Enumeration;\n import java.util.HashMap;\n import java.util.Map;\n \n+import javax.crypto.BadPaddingException;\n+import javax.servlet.DispatcherType;\n+\n import org.apache.ambari.eventdb.webservice.WorkflowJsonService;\n import org.apache.ambari.server.AmbariException;\n import org.apache.ambari.server.StateRecoveryManager;\n@@ -120,6 +120,7 @@ import org.apache.ambari.server.utils.StageUtils;\n import org.apache.ambari.server.utils.VersionUtils;\n import org.apache.ambari.server.view.ViewDirectoryWatcher;\n import org.apache.ambari.server.view.ViewRegistry;\n+import org.apache.ambari.server.view.ViewThrottleFilter;\n import org.apache.velocity.app.Velocity;\n import org.eclipse.jetty.http.HttpVersion;\n import org.eclipse.jetty.server.HttpConfiguration;\n@@ -371,6 +372,12 @@ public class AmbariServer {\n       root.addFilter(new FilterHolder(injector.getInstance(AmbariViewsSecurityHeaderFilter.class)), \"/api/v1/views/*\",\n           DISPATCHER_TYPES);\n \n+      // since views share the REST API threadpool, a misbehaving view could\n+      // consume all of the available threads and effectively cause a loss of\n+      // service for Ambari\n+      root.addFilter(new FilterHolder(injector.getInstance(ViewThrottleFilter.class)),\n+          \"/api/v1/views/*\", DISPATCHER_TYPES);\n+\n       // session-per-request strategy for api\n       root.addFilter(new FilterHolder(injector.getInstance(AmbariPersistFilter.class)), \"/api/*\", DISPATCHER_TYPES);\n       root.addFilter(new FilterHolder(new MethodOverrideFilter()), \"/api/*\", DISPATCHER_TYPES);\ndiff --git a/ambari-server/src/main/java/org/apache/ambari/server/utils/VersionUtils.java b/ambari-server/src/main/java/org/apache/ambari/server/utils/VersionUtils.java\nindex b07f7da57c..d3d859258d 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/utils/VersionUtils.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/utils/VersionUtils.java\n@@ -17,12 +17,12 @@\n  */\n package org.apache.ambari.server.utils;\n \n-import org.apache.ambari.server.bootstrap.BootStrapImpl;\n-import org.apache.commons.lang.StringUtils;\n-\n import java.util.ArrayList;\n import java.util.List;\n \n+import org.apache.ambari.server.bootstrap.BootStrapImpl;\n+import org.apache.commons.lang.StringUtils;\n+\n /**\n  * Provides various utility functions to be used for version handling.\n  * The compatibility matrix between server, agent, store can also be maintained\n@@ -30,14 +30,21 @@ import java.util.List;\n  */\n public class VersionUtils {\n   /**\n-   * Compares two versions strings of the form N.N.N.N or even N.N.N.N-### (which should ignore everything after the dash).\n-   * If the user has a custom stack, e.g., 2.3.MYNAME or MYNAME.2.3, then any segment that contains letters should be ignored.\n+   * Compares two versions strings of the form N.N.N.N or even N.N.N.N-###\n+   * (which should ignore everything after the dash). If the user has a custom\n+   * stack, e.g., 2.3.MYNAME or MYNAME.2.3, then any segment that contains\n+   * letters should be ignored.\n    *\n    * @param version1\n+   *          the first operand. If set to {@value BootStrapImpl#DEV_VERSION}\n+   *          then this will always return {@code 0)}\n    * @param version2\n-   * @param maxLengthToCompare The maximum length to compare - 2 means only Major and Minor\n-   *                           0 to compare the whole version strings\n-   * @return 0 if both are equal up to the length compared, -1 if first one is lower, +1 otherwise\n+   *          the second operand.\n+   * @param maxLengthToCompare\n+   *          The maximum length to compare - 2 means only Major and Minor 0 to\n+   *          compare the whole version strings\n+   * @return 0 if both are equal up to the length compared, -1 if first one is\n+   *         lower, +1 otherwise\n    */\n   public static int compareVersions(String version1, String version2, int maxLengthToCompare)\n     throws IllegalArgumentException {\n@@ -69,7 +76,9 @@ public class VersionUtils {\n       throw new IllegalArgumentException(\"maxLengthToCompare cannot be less than 0\");\n     }\n \n-    if(BootStrapImpl.DEV_VERSION.equals(version1.trim())) return 0;\n+    if(BootStrapImpl.DEV_VERSION.equals(version1.trim())) {\n+      return 0;\n+    }\n \n     String[] version1Parts = version1.split(\"\\\\.\");\n     String[] version2Parts = version2.split(\"\\\\.\");\n@@ -118,13 +127,20 @@ public class VersionUtils {\n    * Compares two versions strings of the form N.N.N.N\n    *\n    * @param version1\n+   *          the first operand. If set to {@value BootStrapImpl#DEV_VERSION}\n+   *          then this will always return {@code 0)}\n    * @param version2\n-   * @param allowEmptyVersions Allow one or both version values to be null or empty string\n-   * @return 0 if both are equal up to the length compared, -1 if first one is lower, +1 otherwise\n+   *          the second operand.\n+   * @param allowEmptyVersions\n+   *          Allow one or both version values to be null or empty string\n+   * @return 0 if both are equal up to the length compared, -1 if first one is\n+   *         lower, +1 otherwise\n    */\n   public static int compareVersions(String version1, String version2, boolean allowEmptyVersions) {\n     if (allowEmptyVersions) {\n-      if (version1 != null && version1.equals(BootStrapImpl.DEV_VERSION)) return 0;\n+      if (version1 != null && version1.equals(BootStrapImpl.DEV_VERSION)) {\n+        return 0;\n+      }\n       if (version1 == null && version2 == null) {\n         return 0;\n       } else {\n@@ -155,7 +171,10 @@ public class VersionUtils {\n    * Compares two versions strings of the form N.N.N.N\n    *\n    * @param version1\n+   *          the first operand. If set to {@value BootStrapImpl#DEV_VERSION}\n+   *          then this will always return {@code 0)}\n    * @param version2\n+   *          the second operand.\n    * @return 0 if both are equal, -1 if first one is lower, +1 otherwise\n    */\n   public static int compareVersions(String version1, String version2) {\n@@ -166,8 +185,12 @@ public class VersionUtils {\n    * Compares two version for equality, allows empty versions\n    *\n    * @param version1\n+   *          the first operand. If set to {@value BootStrapImpl#DEV_VERSION}\n+   *          then this will always return {@code 0)}\n    * @param version2\n-   * @param allowEmptyVersions Allow one or both version values to be null or empty string\n+   *          the second operand.\n+   * @param allowEmptyVersions\n+   *          Allow one or both version values to be null or empty string\n    * @return true if versions are equal; false otherwise\n    */\n   public static boolean areVersionsEqual(String version1, String version2, boolean allowEmptyVersions) {\ndiff --git a/ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java b/ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java\nindex d23fcad0ff..a312e6a47a 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java\n@@ -1677,8 +1677,8 @@ public class ViewRegistry {\n   protected boolean checkViewVersions(ViewEntity view, String serverVersion) {\n     ViewConfig config = view.getConfiguration();\n \n-    return checkViewVersion(view, config.getMinAmbariVersion(), serverVersion, \"minimum\", 1, \"less than\") &&\n-           checkViewVersion(view, config.getMaxAmbariVersion(), serverVersion, \"maximum\", -1, \"greater than\");\n+    return checkViewVersion(view, config.getMinAmbariVersion(), serverVersion, \"minimum\", -1, \"less than\") &&\n+           checkViewVersion(view, config.getMaxAmbariVersion(), serverVersion, \"maximum\", 1, \"greater than\");\n \n   }\n \n@@ -1700,8 +1700,8 @@ public class ViewRegistry {\n \n       int index = version.indexOf('*');\n \n-      int compVal = index == -1 ? VersionUtils.compareVersions(version, serverVersion) :\n-                    index > 0 ? VersionUtils.compareVersions(version.substring(0, index), serverVersion, index) : 0;\n+      int compVal = index == -1 ? VersionUtils.compareVersions(serverVersion, version) :\n+                    index > 0 ? VersionUtils.compareVersions(serverVersion, version.substring(0, index), index) : 0;\n \n       if (compVal == errValue) {\n         String msg = \"The Ambari server version \" + serverVersion + \" is \" + errMsg + \" the configured \" + label +\n",
  "files": 4,
  "linesAdd": 107,
  "linesRem": 44,
  "failing_tests": [],
  "nb_test": 0,
  "nb_failure": 0,
  "nb_error": 0,
  "nb_skipped": 0
}