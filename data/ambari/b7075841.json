{
  "project": "ambari",
  "jira_id": "16084",
  "commit": "b7075841",
  "classification": {
    "singleLine": false
  },
  "patch": "diff --git a/ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java b/ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java\nindex ecd8e3d2e1..2e857edc07 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java\n@@ -90,11 +90,13 @@ public abstract class AbstractUpgradeCatalog implements UpgradeCatalog {\n \n   private static final String CONFIGURATION_TYPE_HIVE_SITE = \"hive-site\";\n   private static final String CONFIGURATION_TYPE_HDFS_SITE = \"hdfs-site\";\n-  private static final String CONFIGURATION_TYPE_RANGER_KNOX_PLUGIN_PROPERTIES = \"ranger-knox-plugin-properties\";\n+  public static final String CONFIGURATION_TYPE_RANGER_HBASE_PLUGIN_PROPERTIES = \"ranger-hbase-plugin-properties\";\n+  public static final String CONFIGURATION_TYPE_RANGER_KNOX_PLUGIN_PROPERTIES = \"ranger-knox-plugin-properties\";\n \n   private static final String PROPERTY_DFS_NAMESERVICES = \"dfs.nameservices\";\n   private static final String PROPERTY_HIVE_SERVER2_AUTHENTICATION = \"hive.server2.authentication\";\n-  private static final String PROPERTY_RANGER_KNOX_PLUGIN_ENABLED = \"ranger-knox-plugin-enabled\";\n+  public static final String PROPERTY_RANGER_HBASE_PLUGIN_ENABLED = \"ranger-hbase-plugin-enabled\";\n+  public static final String PROPERTY_RANGER_KNOX_PLUGIN_ENABLED = \"ranger-knox-plugin-enabled\";\n \n   private static final Logger LOG = LoggerFactory.getLogger\n     (AbstractUpgradeCatalog.class);\n@@ -191,18 +193,18 @@ public abstract class AbstractUpgradeCatalog implements UpgradeCatalog {\n     return doc;\n   }\n \n-  protected static boolean isRangerKnoxPluginEnabled(Cluster cluster) {\n-    boolean isRangerKnoxPluginEnabled = false;\n+  protected static boolean isConfigEnabled(Cluster cluster, String configType, String propertyName) {\n+    boolean isRangerPluginEnabled = false;\n     if (cluster != null) {\n-      Config rangerKnoxPluginProperties = cluster.getDesiredConfigByType(CONFIGURATION_TYPE_RANGER_KNOX_PLUGIN_PROPERTIES);\n-      if (rangerKnoxPluginProperties != null) {\n-        String rangerKnoxPluginEnabled = rangerKnoxPluginProperties.getProperties().get(PROPERTY_RANGER_KNOX_PLUGIN_ENABLED);\n-        if (StringUtils.isNotEmpty(rangerKnoxPluginEnabled)) {\n-          isRangerKnoxPluginEnabled =  \"yes\".equalsIgnoreCase(rangerKnoxPluginEnabled);\n+      Config rangerPluginProperties = cluster.getDesiredConfigByType(configType);\n+      if (rangerPluginProperties != null) {\n+        String rangerPluginEnabled = rangerPluginProperties.getProperties().get(propertyName);\n+        if (StringUtils.isNotEmpty(rangerPluginEnabled)) {\n+          isRangerPluginEnabled =  \"yes\".equalsIgnoreCase(rangerPluginEnabled);\n         }\n       }\n     }\n-    return isRangerKnoxPluginEnabled;\n+    return isRangerPluginEnabled;\n   }\n \n   protected static class VersionComparator implements Comparator<UpgradeCatalog> {\ndiff --git a/ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java b/ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java\nindex 0eef4f1022..2580b0ef10 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java\n@@ -383,7 +383,9 @@ public class UpgradeCatalog220 extends AbstractUpgradeCatalog {\n               if (!authorizationProviderExists) {\n                 NodeList nodeList = root.getElementsByTagName(\"gateway\");\n                 if (nodeList != null && nodeList.getLength() > 0) {\n-                  boolean rangerPluginEnabled = isRangerKnoxPluginEnabled(cluster);\n+                  boolean rangerPluginEnabled = isConfigEnabled(cluster,\n+                    AbstractUpgradeCatalog.CONFIGURATION_TYPE_RANGER_KNOX_PLUGIN_PROPERTIES,\n+                    AbstractUpgradeCatalog.PROPERTY_RANGER_KNOX_PLUGIN_ENABLED);\n \n                   Node gatewayNode = nodeList.item(0);\n                   Element newProvider = topologyXml.createElement(\"provider\");\ndiff --git a/ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog222.java b/ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog222.java\nindex 9657d677e9..1401688ebb 100644\n--- a/ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog222.java\n+++ b/ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog222.java\n@@ -125,6 +124,10 @@ public class UpgradeCatalog222 extends AbstractUpgradeCatalog {\n     \"\\\\u003dNameNode,name\\\\\" +\n     \"\\\\u003dFSNamesystem.CorruptBlocks}\";\n \n+  public final static String HBASE_SITE_HBASE_COPROCESSOR_MASTER_CLASSES = \"hbase.coprocessor.master.classes\";\n+  public final static String HBASE_SITE_HBASE_COPROCESSOR_REGION_CLASSES = \"hbase.coprocessor.region.classes\";\n+  public final static String HBASE_SITE_HBASE_COPROCESSOR_REGIONSERVER_CLASSES = \"hbase.coprocessor.regionserver.classes\";\n+\n \n   // ----- Constructors ------------------------------------------------------\n \n@@ -189,6 +192,7 @@ public class UpgradeCatalog222 extends AbstractUpgradeCatalog {\n     updateHbaseEnvConfig();\n     updateCorruptedReplicaWidget();\n     updateZookeeperConfigs();\n+    updateHBASEConfigs();\n     createNewSliderConfigVersion();\n     initializeStromAndKafkaWidgets();\n   }\n@@ -231,6 +235,54 @@ public class UpgradeCatalog222 extends AbstractUpgradeCatalog {\n     }\n   }\n \n+  protected void updateHBASEConfigs() throws  AmbariException {\n+    AmbariManagementController ambariManagementController = injector.getInstance(AmbariManagementController.class);\n+    Map<String, Cluster> clusterMap = getCheckedClusterMap(ambariManagementController.getClusters());\n+\n+    for (final Cluster cluster : clusterMap.values()) {\n+      Config hbaseSite = cluster.getDesiredConfigByType(\"hbase-site\");\n+      boolean rangerHbasePluginEnabled = isConfigEnabled(cluster,\n+        AbstractUpgradeCatalog.CONFIGURATION_TYPE_RANGER_HBASE_PLUGIN_PROPERTIES,\n+        AbstractUpgradeCatalog.PROPERTY_RANGER_HBASE_PLUGIN_ENABLED);\n+      if (hbaseSite != null && rangerHbasePluginEnabled) {\n+        Map<String, String> updates = new HashMap<>();\n+        String stackVersion = cluster.getCurrentStackVersion().getStackVersion();\n+        if (VersionUtils.compareVersions(stackVersion, \"2.2\") == 0) {\n+          if (hbaseSite.getProperties().containsKey(HBASE_SITE_HBASE_COPROCESSOR_MASTER_CLASSES)) {\n+            updates.put(HBASE_SITE_HBASE_COPROCESSOR_MASTER_CLASSES,\n+              \"com.xasecure.authorization.hbase.XaSecureAuthorizationCoprocessor\");\n+          }\n+          if (hbaseSite.getProperties().containsKey(HBASE_SITE_HBASE_COPROCESSOR_REGION_CLASSES)) {\n+            updates.put(HBASE_SITE_HBASE_COPROCESSOR_REGION_CLASSES,\n+              \"com.xasecure.authorization.hbase.XaSecureAuthorizationCoprocessor\");\n+          }\n+          if (hbaseSite.getProperties().containsKey(HBASE_SITE_HBASE_COPROCESSOR_REGIONSERVER_CLASSES)) {\n+            updates.put(HBASE_SITE_HBASE_COPROCESSOR_REGIONSERVER_CLASSES,\n+              \"org.apache.hadoop.hbase.security.token.TokenProvider,org.apache.hadoop.hbase.security.access.SecureBulkLoadEndpoint,\" +\n+                \"com.xasecure.authorization.hbase.XaSecureAuthorizationCoprocessor\");\n+          }\n+        } else if (VersionUtils.compareVersions(stackVersion, \"2.3\") == 0) {\n+          if (hbaseSite.getProperties().containsKey(HBASE_SITE_HBASE_COPROCESSOR_MASTER_CLASSES)) {\n+            updates.put(HBASE_SITE_HBASE_COPROCESSOR_MASTER_CLASSES,\n+              \"org.apache.ranger.authorization.hbase.RangerAuthorizationCoprocessor \");\n+          }\n+          if (hbaseSite.getProperties().containsKey(HBASE_SITE_HBASE_COPROCESSOR_REGION_CLASSES)) {\n+            updates.put(HBASE_SITE_HBASE_COPROCESSOR_REGION_CLASSES,\n+              \"org.apache.ranger.authorization.hbase.RangerAuthorizationCoprocessor\");\n+          }\n+          if (hbaseSite.getProperties().containsKey(HBASE_SITE_HBASE_COPROCESSOR_REGIONSERVER_CLASSES)) {\n+            updates.put(HBASE_SITE_HBASE_COPROCESSOR_REGIONSERVER_CLASSES,\n+              \"org.apache.hadoop.hbase.security.token.TokenProvider,org.apache.hadoop.hbase.security.access.SecureBulkLoadEndpoint,\" +\n+                \"org.apache.ranger.authorization.hbase.RangerAuthorizationCoprocessor\");\n+          }\n+        }\n+        if (! updates.isEmpty()) {\n+          updateConfigurationPropertiesForCluster(cluster, \"hbase-site\", updates, true, false);\n+        }\n+      }\n+    }\n+  }\n+\n   protected void updateStormConfigs() throws  AmbariException {\n     AmbariManagementController ambariManagementController = injector.getInstance(AmbariManagementController.class);\n     Map<String, Cluster> clusterMap = getCheckedClusterMap(ambariManagementController.getClusters());\n",
  "files": 3,
  "linesAdd": 68,
  "linesRem": 11,
  "failing_tests": [],
  "nb_test": 0,
  "nb_failure": 0,
  "nb_error": 0,
  "nb_skipped": 0
}