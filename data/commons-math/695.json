{
  "files": 1, 
  "singleLine": false, 
  "nb_error": 0, 
  "failing_tests": [
    "testIssue695(org.apache.commons.math.ode.events.EventStateTest): going backard in time! (7.796578226186635 < 10.99)"
  ], 
  "nb_test": 3070, 
  "patch": "diff --git a/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java b/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java\nindex 2d878b1..8f315e3 100644\n--- a/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java\n@@ -40,7 +40,6 @@ import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.util.FastMath;\n import org.apache.commons.math.util.Incrementor;\n-import org.apache.commons.math.util.MathUtils;\n import org.apache.commons.math.util.Precision;\n \n /**\n@@ -278,7 +277,6 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {\n \n             double previousT = interpolator.getGlobalPreviousTime();\n             final double currentT = interpolator.getGlobalCurrentTime();\n-            resetOccurred = false;\n \n             // initialize the events states if needed\n             if (! statesInitialized) {\n@@ -332,6 +330,9 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {\n                 if (isLastStep) {\n                     // the event asked to stop integration\n                     System.arraycopy(eventY, 0, y, 0, y.length);\n+                    for (final EventState remaining : occuringEvents) {\n+                        remaining.stepAccepted(eventT, eventY);\n+                    }\n                     return eventT;\n                 }\n \n@@ -341,6 +342,9 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {\n                     System.arraycopy(eventY, 0, y, 0, y.length);\n                     computeDerivatives(eventT, y, yDot);\n                     resetOccurred = true;\n+                    for (final EventState remaining : occuringEvents) {\n+                        remaining.stepAccepted(eventT, eventY);\n+                    }\n                     return eventT;\n                 }\n \n", 
  "project": "commons-math", 
  "linesAdd": 6, 
  "nb_skipped": 1, 
  "fix_commit": "7980a242", 
  "nb_failure": 1, 
  "id": "695", 
  "linesRem": 2
}