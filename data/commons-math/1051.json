{"nb_failure": 1, "nb_error": 0, "failing_tests": ["EigenDecompositionTest.testMath1051:457->checkUnsymmetricMatrix:520 Failed to create EigenDecomposition for matrix Array2DRowRealMatrix{{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,1.0},{0.0,0.0,0.0,1.0,0.0},{1.0,1.0,0.0,0.0,1.0},{1.0,0.0,1.0,0.0,1.0}}, ex=org.apache.commons.math3.exception.MaxCountExceededException: illegal state: convergence failed"], "patch": "diff --git a/src/main/java/org/apache/commons/math3/linear/SchurTransformer.java b/src/main/java/org/apache/commons/math3/linear/SchurTransformer.java\nindex a2ea88e..b566de7 100644\n--- a/src/main/java/org/apache/commons/math3/linear/SchurTransformer.java\n+++ b/src/main/java/org/apache/commons/math3/linear/SchurTransformer.java\n@@ -364,14 +364,12 @@ class SchurTransformer {\n                 q = matrixT[k + 1][k - 1];\n                 r = notlast ? matrixT[k + 2][k - 1] : 0.0;\n                 shift.x = FastMath.abs(p) + FastMath.abs(q) + FastMath.abs(r);\n-                if (!Precision.equals(shift.x, 0.0, epsilon)) {\n-                    p = p / shift.x;\n-                    q = q / shift.x;\n-                    r = r / shift.x;\n+                if (Precision.equals(shift.x, 0.0, epsilon)) {\n+                    continue;\n                 }\n-            }\n-            if (shift.x == 0.0) {\n-                break;\n+                p = p / shift.x;\n+                q = q / shift.x;\n+                r = r / shift.x;\n             }\n             double s = FastMath.sqrt(p * p + q * q + r * r);\n             if (p < 0.0) {\n", "nb_test": 5400, "nb_skipped": 4, "fix_commit": "bda25b40", "id": "1051"}