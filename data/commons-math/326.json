{"files": 3, "singleLine": false, "nb_error": 0, "failing_tests": ["testBasicFunctions(org.apache.commons.math.linear.ArrayRealVectorTest)", "testBasicFunctions(org.apache.commons.math.linear.SparseRealVectorTest)"], "nb_test": 2119, "patch": "diff --git a/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java b/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\nindex cf103c0..ace4b8d 100644\n--- a/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\n@@ -206,6 +206,40 @@ public abstract class AbstractRealVector implements RealVector {\n     }\n \n     /** {@inheritDoc} */\n+    public double getNorm() {\n+        double sum = 0;\n+        Iterator<Entry> it = sparseIterator();\n+        Entry e;\n+        while (it.hasNext() && (e = it.next()) != null) {\n+            final double value = e.getValue();\n+            sum += value * value;\n+        }\n+        return Math.sqrt(sum);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double getL1Norm() {\n+        double norm = 0;\n+        Iterator<Entry> it = sparseIterator();\n+        Entry e;\n+        while (it.hasNext() && (e = it.next()) != null) {\n+            norm += Math.abs(e.getValue());\n+        }\n+        return norm;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double getLInfNorm() {\n+        double norm = 0;\n+        Iterator<Entry> it = sparseIterator();\n+        Entry e;\n+        while (it.hasNext() && (e = it.next()) != null) {\n+            norm = Math.max(norm, Math.abs(e.getValue()));\n+        }\n+        return norm;\n+    }\n+\n+    /** {@inheritDoc} */\n     public double getDistance(double[] v) throws IllegalArgumentException {\n         return getDistance(new ArrayRealVector(v,false));\n     }\ndiff --git a/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java b/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java\nindex 45c0919..22d0a28 100644\n--- a/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java\n@@ -694,6 +694,7 @@ public class ArrayRealVector extends AbstractRealVector implements Serializable\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public double getNorm() {\n         double sum = 0;\n         for (double a : data) {\n@@ -703,6 +704,7 @@ public class ArrayRealVector extends AbstractRealVector implements Serializable\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public double getL1Norm() {\n         double sum = 0;\n         for (double a : data) {\n@@ -712,10 +714,11 @@ public class ArrayRealVector extends AbstractRealVector implements Serializable\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public double getLInfNorm() {\n         double max = 0;\n         for (double a : data) {\n-            max += Math.max(max, Math.abs(a));\n+            max = Math.max(max, Math.abs(a));\n         }\n         return max;\n     }\ndiff --git a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\nindex febea7a..eb5be1b 100644\n--- a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n@@ -495,17 +495,6 @@ public class OpenMapRealVector extends AbstractRealVector implements SparseRealV\n         return max;\n     }\n \n-    /** {@inheritDoc} */\n-    public double getL1Norm() {\n-        double res = 0;\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            res += Math.abs(iter.value());\n-        }\n-        return res;\n-    }\n-\n     /**\n      * Optimized method to compute LInfDistance.\n      * @param v The vector to compute from\n@@ -557,28 +546,6 @@ public class OpenMapRealVector extends AbstractRealVector implements SparseRealV\n     }\n \n     /** {@inheritDoc} */\n-    public double getLInfNorm() {\n-        double max = 0;\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            max += iter.value();\n-        }\n-        return max;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public double getNorm() {\n-        double res = 0;\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            res += iter.value() * iter.value();\n-        }\n-        return Math.sqrt(res);\n-    }\n-\n-    /** {@inheritDoc} */\n     public boolean isInfinite() {\n         boolean infiniteFound = false;\n         Iterator iter = entries.iterator();\n", "project": "commons-math", "linesAdd": 38, "nb_skipped": 0, "fix_commit": "ce185345", "nb_failure": 2, "id": "326", "linesRem": 34}