{
  "files": 1, 
  "singleLine": false, 
  "nb_error": 0, 
  "failing_tests": [
    "PrecisionTest.testRoundDouble:397 expected:<[-]0.0> but was:<[]0.0>"
  ], 
  "nb_test": 5603, 
  "patch": "diff --git a/src/main/java/org/apache/commons/math3/util/Precision.java b/src/main/java/org/apache/commons/math3/util/Precision.java\nindex f0b0c4f..441e015 100644\n--- a/src/main/java/org/apache/commons/math3/util/Precision.java\n+++ b/src/main/java/org/apache/commons/math3/util/Precision.java\n@@ -392,10 +392,11 @@ public class Precision {\n      */\n     public static double round(double x, int scale, int roundingMethod) {\n         try {\n-            return (new BigDecimal\n-                   (Double.toString(x))\n+            final double rounded = (new BigDecimal(Double.toString(x))\n                    .setScale(scale, roundingMethod))\n                    .doubleValue();\n+            // MATH-1089: negative values rounded to zero should result in negative zero\n+            return rounded == 0.0 ? rounded * FastMath.copySign(1d, x) : rounded;\n         } catch (NumberFormatException ex) {\n             if (Double.isInfinite(x)) {\n                 return x;\n", 
  "project": "commons-math", 
  "linesAdd": 3, 
  "nb_skipped": 5, 
  "fix_commit": "e91d0f05", 
  "nb_failure": 1, 
  "id": "1089", 
  "linesRem": 2
}