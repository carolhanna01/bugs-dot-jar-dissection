{"files": 1, "singleLine": false, "nb_error": 1, "failing_tests": ["FuzzyKMeansClustererTest.testSingleCluster:115 \u00bb ArrayIndexOutOfBounds -1"], "nb_test": 6167, "patch": "diff --git a/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java b/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\nindex ed22047..5f89934 100644\n--- a/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\n+++ b/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\n@@ -346,18 +346,32 @@ public class FuzzyKMeansClusterer<T extends Clusterable> extends Clusterer<T> {\n     private void updateMembershipMatrix() {\n         for (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n-            double maxMembership = 0.0;\n+            double maxMembership = Double.MIN_VALUE;\n             int newCluster = -1;\n             for (int j = 0; j < clusters.size(); j++) {\n                 double sum = 0.0;\n                 final double distA = FastMath.abs(distance(point, clusters.get(j).getCenter()));\n \n-                for (final CentroidCluster<T> c : clusters) {\n-                    final double distB = FastMath.abs(distance(point, c.getCenter()));\n-                    sum += FastMath.pow(distA / distB, 2.0 / (fuzziness - 1.0));\n+                if (distA != 0.0) {\n+                    for (final CentroidCluster<T> c : clusters) {\n+                        final double distB = FastMath.abs(distance(point, c.getCenter()));\n+                        if (distB == 0.0) {\n+                            sum = Double.POSITIVE_INFINITY;\n+                            break;\n+                        }\n+                        sum += FastMath.pow(distA / distB, 2.0 / (fuzziness - 1.0));\n+                    }\n                 }\n \n-                membershipMatrix[i][j] = 1.0 / sum;\n+                double membership;\n+                if (sum == 0.0) {\n+                    membership = 1.0;\n+                } else if (sum == Double.POSITIVE_INFINITY) {\n+                    membership = 0.0;\n+                } else {\n+                    membership = 1.0 / sum;\n+                }\n+                membershipMatrix[i][j] = membership;\n \n                 if (membershipMatrix[i][j] > maxMembership) {\n                     maxMembership = membershipMatrix[i][j];\n", "project": "commons-math", "linesAdd": 19, "nb_skipped": 3, "fix_commit": "596ccd59", "nb_failure": 0, "id": "1165", "linesRem": 5}