{"files": 1, "singleLine": false, "nb_error": 1, "failing_tests": ["testMath828Cycle(org.apache.commons.math3.optimization.linear.SimplexSolverTest): illegal state: maximal count (100) exceeded"], "nb_test": 3967, "patch": "diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\nindex c2fa14d..dec310b 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\n@@ -116,12 +116,14 @@ public class SimplexSolver extends AbstractLinearOptimizer {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n-            for (Integer row : minRatioPositions) {\n-                for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                    int column = i + tableau.getArtificialVariableOffset();\n-                    final double entry = tableau.getEntry(row, column);\n-                    if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                        return row;\n+            if (tableau.getNumArtificialVariables() > 0) {\n+                for (Integer row : minRatioPositions) {\n+                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n+                        int column = i + tableau.getArtificialVariableOffset();\n+                        final double entry = tableau.getEntry(row, column);\n+                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n+                            return row;\n+                        }\n                     }\n                 }\n             }\n@@ -131,20 +133,26 @@ public class SimplexSolver extends AbstractLinearOptimizer {\n             //\n             // see http://www.stanford.edu/class/msande310/blandrule.pdf\n             // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)\n-            Integer minRow = null;\n-            int minIndex = tableau.getWidth();\n-            for (Integer row : minRatioPositions) {\n-                for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                    if (row == tableau.getBasicRow(i)) {\n-                        if (i < minIndex) {\n-                            minIndex = i;\n-                            minRow = row;\n+            //\n+            // Additional heuristic: if we did not get a solution after half of maxIterations\n+            //                       revert to the simple case of just returning the top-most row\n+            // This heuristic is based on empirical data gathered while investigating MATH-828.\n+            if (getIterations() < getMaxIterations() / 2) {\n+                Integer minRow = null;\n+                int minIndex = tableau.getWidth();\n+                for (Integer row : minRatioPositions) {\n+                    int i = tableau.getNumObjectiveFunctions();\n+                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+                        if (row == tableau.getBasicRow(i)) {\n+                            if (i < minIndex) {\n+                                minIndex = i;\n+                                minRow = row;\n+                            }\n                         }\n                     }\n                 }\n+                return minRow;\n             }\n-\n-            return minRow;\n         }\n         return minRatioPositions.get(0);\n     }\n", "project": "commons-math", "linesAdd": 24, "nb_skipped": 4, "fix_commit": "a49e443c", "nb_failure": 0, "id": "828", "linesRem": 16}