{"files": 1, "singleLine": false, "nb_error": 1, "failing_tests": ["testMath293(org.apache.commons.math.optimization.linear.SimplexSolverTest)"], "nb_test": 2068, "patch": "diff --git a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 1cb45cc..23dc90c 100644\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -74,6 +74,9 @@ class SimplexTableau implements Serializable {\n     /** Whether to restrict the variables to non-negative values. */\n     private final boolean restrictToNonNegative;\n \n+    /** The variables each column represents */\n+    private final List<String> columnLabels = new ArrayList<String>();\n+\n     /** Simple tableau. */\n     private transient RealMatrix tableau;\n \n@@ -113,6 +116,27 @@ class SimplexTableau implements Serializable {\n         this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +\n                                       getConstraintTypeCounts(Relationship.GEQ);\n         this.tableau = createTableau(goalType == GoalType.MAXIMIZE);\n+        initializeColumnLabels();\n+    }\n+\n+    protected void initializeColumnLabels() {\n+      if (getNumObjectiveFunctions() == 2) {\n+        columnLabels.add(\"W\");\n+      }\n+      columnLabels.add(\"Z\");\n+      for (int i = 0; i < getOriginalNumDecisionVariables(); i++) {\n+        columnLabels.add(\"x\" + i);\n+      }\n+      if (!restrictToNonNegative) {\n+        columnLabels.add(\"x-\");\n+      }\n+      for (int i = 0; i < getNumSlackVariables(); i++) {\n+        columnLabels.add(\"s\" + i);\n+      }\n+      for (int i = 0; i < getNumArtificialVariables(); i++) {\n+        columnLabels.add(\"a\" + i);\n+      }\n+      columnLabels.add(\"RHS\");\n     }\n \n     /**\n@@ -301,6 +325,10 @@ class SimplexTableau implements Serializable {\n           }\n         }\n \n+        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {\n+          columnLabels.remove((int) columnsToDrop.get(i));\n+        }\n+\n         this.tableau = new Array2DRowRealMatrix(matrix);\n         this.numArtificialVariables = 0;\n     }\n@@ -332,12 +360,19 @@ class SimplexTableau implements Serializable {\n      * @return current solution\n      */\n     protected RealPointValuePair getSolution() {\n-      double[] coefficients = new double[getOriginalNumDecisionVariables()];\n-      Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());\n+      int negativeVarColumn = columnLabels.indexOf(\"x-\");\n+      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n       double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n+\n       Set<Integer> basicRows = new HashSet<Integer>();\n+      double[] coefficients = new double[getOriginalNumDecisionVariables()];\n       for (int i = 0; i < coefficients.length; i++) {\n-          Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n+          int colIndex = columnLabels.indexOf(\"x\" + i);\n+          if (colIndex < 0) {\n+            coefficients[i] = 0;\n+            continue;\n+          }\n+          Integer basicRow = getBasicRow(colIndex);\n           if (basicRows.contains(basicRow)) {\n               // if multiple variables can take a given value\n               // then we choose the first and set the rest equal to 0\n@@ -349,7 +384,7 @@ class SimplexTableau implements Serializable {\n                   (restrictToNonNegative ? 0 : mostNegative);\n           }\n       }\n-        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n+      return new RealPointValuePair(coefficients, f.getValue(coefficients));\n     }\n \n     /**\n@@ -443,15 +478,6 @@ class SimplexTableau implements Serializable {\n     }\n \n     /**\n-     * Returns the offset of the extra decision variable added when there is a\n-     * negative decision variable in the original problem.\n-     * @return the offset of x-\n-     */\n-    protected final int getNegativeDecisionVariableOffset() {\n-      return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();\n-    }\n-\n-    /**\n      * Get the number of decision variables.\n      * <p>\n      * If variables are not restricted to positive values, this will include 1\n@@ -471,7 +497,7 @@ class SimplexTableau implements Serializable {\n      * @see #getNumDecisionVariables()\n      */\n     protected final int getOriginalNumDecisionVariables() {\n-        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;\n+        return f.getCoefficients().getDimension();\n     }\n \n     /**\n@@ -562,4 +588,5 @@ class SimplexTableau implements Serializable {\n         ois.defaultReadObject();\n         MatrixUtils.deserializeRealMatrix(this, \"tableau\", ois);\n     }\n+\n }\n", "project": "commons-math", "linesAdd": 41, "nb_skipped": 0, "fix_commit": "59a0da9c", "nb_failure": 0, "id": "293", "linesRem": 14}