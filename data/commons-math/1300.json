{"files": 2, "singleLine": false, "nb_error": 0, "failing_tests": ["AbstractRandomGeneratorTest>RandomGeneratorAbstractTest.testNextBytesChunks:372->RandomGeneratorAbstractTest.checkNextBytesChunks:483 chunkSize=4 numChunks=2: arrays first differed at element [0]; expected:<-109> but was:<70>", "BitsStreamGeneratorTest>RandomGeneratorAbstractTest.testNextBytesChunks:372->RandomGeneratorAbstractTest.checkNextBytesChunks:483 chunkSize=4 numChunks=2: arrays first differed at element [0]; expected:<-98> but was:<25>", "ISAACTest>RandomGeneratorAbstractTest.testNextBytesChunks:372->RandomGeneratorAbstractTest.checkNextBytesChunks:483 chunkSize=4 numChunks=2: arrays first differed at element [0]; expected:<-80> but was:<32>", "MersenneTwisterTest>RandomGeneratorAbstractTest.testNextBytesChunks:372->RandomGeneratorAbstractTest.checkNextBytesChunks:483 chunkSize=4 numChunks=2: arrays first differed at element [0]; expected:<82> but was:<69>", "Well1024aTest>RandomGeneratorAbstractTest.testNextBytesChunks:372->RandomGeneratorAbstractTest.checkNextBytesChunks:483 chunkSize=4 numChunks=2: arrays first differed at element [0]; expected:<110> but was:<-24>", "Well19937aTest>RandomGeneratorAbstractTest.testNextBytesChunks:372->RandomGeneratorAbstractTest.checkNextBytesChunks:483 chunkSize=4 numChunks=2: arrays first differed at element [0]; expected:<21> but was:<94>", "Well19937cTest>RandomGeneratorAbstractTest.testNextBytesChunks:372->RandomGeneratorAbstractTest.checkNextBytesChunks:483 chunkSize=4 numChunks=2: arrays first differed at element [0]; expected:<21> but was:<94>", "Well44497aTest>RandomGeneratorAbstractTest.testNextBytesChunks:372->RandomGeneratorAbstractTest.checkNextBytesChunks:483 chunkSize=4 numChunks=2: arrays first differed at element [0]; expected:<-108> but was:<-95>", "Well44497bTest>RandomGeneratorAbstractTest.testNextBytesChunks:372->RandomGeneratorAbstractTest.checkNextBytesChunks:483 chunkSize=4 numChunks=2: arrays first differed at element [0]; expected:<-108> but was:<-95>", "Well512aTest>RandomGeneratorAbstractTest.testNextBytesChunks:372->RandomGeneratorAbstractTest.checkNextBytesChunks:483 chunkSize=4 numChunks=2: arrays first differed at element [0]; expected:<-14> but was:<37>"], "nb_test": 5907, "patch": "diff --git a/src/main/java/org/apache/commons/math4/random/AbstractRandomGenerator.java b/src/main/java/org/apache/commons/math4/random/AbstractRandomGenerator.java\nindex 1b9cead..173f4ee 100644\n--- a/src/main/java/org/apache/commons/math4/random/AbstractRandomGenerator.java\n+++ b/src/main/java/org/apache/commons/math4/random/AbstractRandomGenerator.java\n@@ -109,16 +109,18 @@ public abstract class AbstractRandomGenerator implements RandomGenerator {\n     public void nextBytes(byte[] bytes) {\n         int bytesOut = 0;\n         while (bytesOut < bytes.length) {\n-          int randInt = nextInt();\n-          for (int i = 0; i < 3; i++) {\n-              if ( i > 0) {\n-                  randInt >>= 8;\n-              }\n-              bytes[bytesOut++] = (byte) randInt;\n-              if (bytesOut == bytes.length) {\n-                  return;\n-              }\n-          }\n+            int randInt = nextInt();\n+            for (int i = 0; i < 3; i++) {\n+                if (i > 0) {\n+                    randInt >>= 8;\n+                }\n+            }\n+            if (bytesOut < bytes.length) {\n+                bytes[bytesOut++] = (byte) randInt;\n+                if (bytesOut == bytes.length) {\n+                    return;\n+                }\n+            }\n         }\n     }\n \ndiff --git a/src/main/java/org/apache/commons/math4/random/BitsStreamGenerator.java b/src/main/java/org/apache/commons/math4/random/BitsStreamGenerator.java\nindex 81968e2..7c89b60 100644\n--- a/src/main/java/org/apache/commons/math4/random/BitsStreamGenerator.java\n+++ b/src/main/java/org/apache/commons/math4/random/BitsStreamGenerator.java\n@@ -82,10 +82,12 @@ public abstract class BitsStreamGenerator\n             bytes[i + 3] = (byte) ((random >> 24) & 0xff);\n             i += 4;\n         }\n-        int random = next(32);\n-        while (i < bytes.length) {\n-            bytes[i++] = (byte) (random & 0xff);\n-            random >>= 8;\n+        if (i < bytes.length) {\n+            int random = next(32);\n+            while (i < bytes.length) {\n+                bytes[i++] = (byte) (random & 0xff);\n+                random >>= 8;\n+            }\n         }\n     }\n \n", "project": "commons-math", "linesAdd": 18, "nb_skipped": 4, "fix_commit": "1d635088", "nb_failure": 10, "id": "1300", "linesRem": 14}