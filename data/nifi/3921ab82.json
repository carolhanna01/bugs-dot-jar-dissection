{
  "project": "nifi",
  "jira_id": "1656",
  "commit": "3921ab82",
  "classification": {
    "singleLine": false
  },
  "patch": "diff --git a/nifi-nar-bundles/nifi-kite-bundle/nifi-kite-processors/src/main/java/org/apache/nifi/processors/kite/AvroRecordConverter.java b/nifi-nar-bundles/nifi-kite-bundle/nifi-kite-processors/src/main/java/org/apache/nifi/processors/kite/AvroRecordConverter.java\nindex 68e6c98342..f66e9ed583 100644\n--- a/nifi-nar-bundles/nifi-kite-bundle/nifi-kite-processors/src/main/java/org/apache/nifi/processors/kite/AvroRecordConverter.java\n+++ b/nifi-nar-bundles/nifi-kite-bundle/nifi-kite-processors/src/main/java/org/apache/nifi/processors/kite/AvroRecordConverter.java\n@@ -21,6 +21,7 @@ package org.apache.nifi.processors.kite;\n import java.io.IOException;\n import java.util.Collection;\n import java.util.List;\n+import java.util.Locale;\n import java.util.Map;\n import java.util.Scanner;\n \n@@ -43,6 +44,8 @@ public class AvroRecordConverter {\n     private final Schema outputSchema;\n     // Store this from output field to input field so we can look up by output.\n     private final Map<String, String> fieldMapping;\n+    private final Locale locale;\n+    private static final Locale DEFAULT_LOCALE = Locale.getDefault();\n \n     /**\n      * @param inputSchema\n@@ -55,6 +58,22 @@ public class AvroRecordConverter {\n      */\n     public AvroRecordConverter(Schema inputSchema, Schema outputSchema,\n             Map<String, String> fieldMapping) {\n+        this(inputSchema, outputSchema, fieldMapping, DEFAULT_LOCALE);\n+    }\n+\n+    /**\n+     * @param inputSchema\n+     *            Schema of input record objects\n+     * @param outputSchema\n+     *            Schema of output record objects\n+     * @param fieldMapping\n+     *            Map from field name in input record to field name in output\n+     *            record.\n+     * @param locale\n+     *            Locale to use\n+     */\n+    public AvroRecordConverter(Schema inputSchema, Schema outputSchema,\n+            Map<String, String> fieldMapping, Locale locale) {\n         this.inputSchema = inputSchema;\n         this.outputSchema = outputSchema;\n         // Need to reverse this map.\n@@ -63,6 +82,7 @@ public class AvroRecordConverter {\n         for (Map.Entry<String, String> entry : fieldMapping.entrySet()) {\n             this.fieldMapping.put(entry.getValue(), entry.getKey());\n         }\n+        this.locale = locale;\n     }\n \n     /**\n@@ -224,6 +244,7 @@ public class AvroRecordConverter {\n             // return questionable results when a String starts with a number\n             // but then contains other content\n             Scanner scanner = new Scanner(content.toString());\n+            scanner.useLocale(locale);\n             switch (nonNillOutput.getType()) {\n             case LONG:\n                 if (scanner.hasNextLong()) {\ndiff --git a/nifi-nar-bundles/nifi-kite-bundle/nifi-kite-processors/src/main/java/org/apache/nifi/processors/kite/ConvertAvroSchema.java b/nifi-nar-bundles/nifi-kite-bundle/nifi-kite-processors/src/main/java/org/apache/nifi/processors/kite/ConvertAvroSchema.java\nindex d64f5df507..b0d3518249 100644\n--- a/nifi-nar-bundles/nifi-kite-bundle/nifi-kite-processors/src/main/java/org/apache/nifi/processors/kite/ConvertAvroSchema.java\n+++ b/nifi-nar-bundles/nifi-kite-bundle/nifi-kite-processors/src/main/java/org/apache/nifi/processors/kite/ConvertAvroSchema.java\n@@ -24,6 +24,7 @@ import java.io.OutputStream;\n import java.util.Collection;\n import java.util.HashMap;\n import java.util.List;\n+import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n import java.util.regex.Pattern;\n@@ -34,6 +35,7 @@ import org.apache.avro.file.DataFileStream;\n import org.apache.avro.file.DataFileWriter;\n import org.apache.avro.generic.GenericData.Record;\n import org.apache.avro.generic.GenericDatumReader;\n+import org.apache.commons.lang.LocaleUtils;\n import org.apache.hadoop.conf.Configuration;\n import org.apache.nifi.annotation.behavior.DynamicProperty;\n import org.apache.nifi.annotation.behavior.InputRequirement;\n@@ -128,6 +130,27 @@ public class ConvertAvroSchema extends AbstractKiteProcessor {\n         }\n     };\n \n+    public static final String DEFAULT_LOCALE_VALUE = \"default\";\n+    public static final Validator LOCALE_VALIDATOR = new Validator() {\n+        @Override\n+        public ValidationResult validate(final String subject, final String value, final ValidationContext context) {\n+            String reason = null;\n+            if (value.equals(DEFAULT_LOCALE_VALUE) == false) {\n+                try {\n+                    final Locale locale = LocaleUtils.toLocale(value);\n+                    if (locale == null) {\n+                        reason = \"null locale returned\";\n+                    } else if (LocaleUtils.isAvailableLocale(locale) == false) {\n+                        reason = \"locale not available\";\n+                    }\n+                } catch (final IllegalArgumentException e) {\n+                    reason = \"invalid format for locale\";\n+                }\n+            }\n+            return new ValidationResult.Builder().subject(subject).input(value).explanation(reason).valid(reason == null).build();\n+        }\n+    };\n+\n     @VisibleForTesting\n     static final PropertyDescriptor INPUT_SCHEMA = new PropertyDescriptor.Builder()\n             .name(\"Input Schema\").description(\"Avro Schema of Input Flowfiles\")\n@@ -141,10 +164,19 @@ public class ConvertAvroSchema extends AbstractKiteProcessor {\n             .addValidator(MAPPED_SCHEMA_VALIDATOR).expressionLanguageSupported(true)\n             .required(true).build();\n \n+    @VisibleForTesting\n+    static final PropertyDescriptor LOCALE = new PropertyDescriptor.Builder()\n+            .name(\"Locale\")\n+            .description(\"Locale to use for scanning data (see https://docs.oracle.com/javase/7/docs/api/java/util/Locale.html)\" +\n+                    \"or \\\" \" + DEFAULT_LOCALE_VALUE + \"\\\" for JVM default\")\n+            .addValidator(LOCALE_VALIDATOR)\n+            .defaultValue(DEFAULT_LOCALE_VALUE).build();\n+\n     private static final List<PropertyDescriptor> PROPERTIES = ImmutableList\n             .<PropertyDescriptor> builder()\n             .add(INPUT_SCHEMA)\n-            .add(OUTPUT_SCHEMA).build();\n+            .add(OUTPUT_SCHEMA)\n+            .add(LOCALE).build();\n \n     private static final Set<Relationship> RELATIONSHIPS = ImmutableSet\n             .<Relationship> builder().add(SUCCESS).add(FAILURE).build();\n@@ -240,8 +272,11 @@ public class ConvertAvroSchema extends AbstractKiteProcessor {\n                 fieldMapping.put(entry.getKey().getName(), entry.getValue());\n             }\n         }\n+        // Set locale\n+        final String localeProperty = context.getProperty(LOCALE).getValue();\n+        final Locale locale = (localeProperty == DEFAULT_LOCALE_VALUE)?Locale.getDefault():LocaleUtils.toLocale(localeProperty);\n         final AvroRecordConverter converter = new AvroRecordConverter(\n-                inputSchema, outputSchema, fieldMapping);\n+                inputSchema, outputSchema, fieldMapping, locale);\n \n         final DataFileWriter<Record> writer = new DataFileWriter<>(\n                 AvroUtil.newDatumWriter(outputSchema, Record.class));\n",
  "files": 2,
  "linesAdd": 58,
  "linesRem": 2,
  "failing_tests": [],
  "nb_test": 0,
  "nb_failure": 0,
  "nb_error": 0,
  "nb_skipped": 0
}