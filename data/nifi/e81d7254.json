{
  "project": "nifi",
  "jira_id": "12392",
  "commit": "e81d7254",
  "classification": {
    "singleLine": false
  },
  "patch": "diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-nar-utils/src/main/java/org/apache/nifi/nar/NarUnpacker.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-nar-utils/src/main/java/org/apache/nifi/nar/NarUnpacker.java\nindex 7f2a49014c..558d9ed03c 100644\n--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-nar-utils/src/main/java/org/apache/nifi/nar/NarUnpacker.java\n+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-nar-utils/src/main/java/org/apache/nifi/nar/NarUnpacker.java\n@@ -61,6 +61,8 @@ public final class NarUnpacker {\n \n     private static final String BUNDLED_DEPENDENCIES_PREFIX = \"META-INF/bundled-dependencies\";\n \n+    private static final String JAR_DOCUMENTATION_ROOT_PATH = \"docs\";\n+\n     private static final Logger logger = LoggerFactory.getLogger(NarUnpacker.class);\n     private static final String HASH_FILENAME = \"nar-digest\";\n     private static final FileFilter NAR_FILTER = pathname -> {\n@@ -554,22 +556,23 @@ public final class NarUnpacker {\n         // look for all documentation related to each component\n         try (final JarFile jarFile = new JarFile(jar)) {\n             for (final String componentName : jarExtensionMapping.getAllExtensionNames().keySet()) {\n-                final String entryName = \"docs/\" + componentName;\n+                // Build documentation path based on component class using Paths.get() for platform compatibility\n+                final String componentDocumentationDirectory = Paths.get(JAR_DOCUMENTATION_ROOT_PATH, componentName).toString();\n \n                 // go through each entry in this jar\n                 for (final Enumeration<JarEntry> jarEnumeration = jarFile.entries(); jarEnumeration.hasMoreElements();) {\n                     final JarEntry jarEntry = jarEnumeration.nextElement();\n                     final File jarEntryFile = getJarEntryFile(docsDirectory, jarEntry.getName());\n-                    final String jarEntryName = jarEntryFile.getName();\n+                    final String jarEntryFileAbsolutePath = jarEntryFile.getAbsolutePath();\n \n                     // if this entry is documentation for this component\n-                    if (jarEntryName.startsWith(entryName)) {\n-                        final String name = StringUtils.substringAfter(jarEntryName, \"docs/\");\n-                        final String path = coordinate.getGroup() + \"/\" + coordinate.getId() + \"/\" + coordinate.getVersion() + \"/\" + name;\n+                    if (jarEntryFileAbsolutePath.contains(componentDocumentationDirectory)) {\n+                        final String relativePath = StringUtils.substringAfter(jarEntryFileAbsolutePath, componentDocumentationDirectory);\n+                        final String outputPath = Paths.get(coordinate.getGroup(), coordinate.getId(), coordinate.getVersion(), componentName, relativePath).toString();\n \n                         // if this is a directory create it\n                         if (jarEntry.isDirectory()) {\n-                            final File componentDocsDirectory = new File(docsDirectory, path);\n+                            final File componentDocsDirectory = new File(docsDirectory, outputPath);\n \n                             // ensure the documentation directory can be created\n                             if (!componentDocsDirectory.exists() && !componentDocsDirectory.mkdirs()) {\n@@ -578,7 +581,7 @@ public final class NarUnpacker {\n                             }\n                         } else {\n                             // if this is a file, write to it\n-                            final File componentDoc = new File(docsDirectory, path);\n+                            final File componentDoc = new File(docsDirectory, outputPath);\n                             makeFile(jarFile.getInputStream(jarEntry), componentDoc);\n                         }\n                     }\n",
  "files": 1,
  "linesAdd": 10,
  "linesRem": 7,
  "failing_tests": [
    "org.apache.nifi.nar.NarUnpackerTest.testMapExtensionAdditionalDetails"
  ],
  "nb_test": 10,
  "nb_failure": 1,
  "nb_error": 0,
  "nb_skipped": 0
}