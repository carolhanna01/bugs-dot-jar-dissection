{
  "project": "nifi",
  "jira_id": "3800",
  "commit": "970ddf8f",
  "classification": {
    "singleLine": false
  },
  "patch": "diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/replication/ThreadPoolRequestReplicator.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/replication/ThreadPoolRequestReplicator.java\nindex 5a19ca35cf..a8f9a7da09 100644\n--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/replication/ThreadPoolRequestReplicator.java\n+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/replication/ThreadPoolRequestReplicator.java\n@@ -23,34 +23,6 @@ import com.sun.jersey.api.client.WebResource;\n import com.sun.jersey.api.client.config.ClientConfig;\n import com.sun.jersey.api.client.filter.GZIPContentEncodingFilter;\n import com.sun.jersey.core.util.MultivaluedMapImpl;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.LongSummaryStatistics;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.Set;\n-import java.util.UUID;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.ConcurrentMap;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.ScheduledExecutorService;\n-import java.util.concurrent.ThreadFactory;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicInteger;\n-import java.util.concurrent.locks.Lock;\n-import java.util.concurrent.locks.ReadWriteLock;\n-import java.util.concurrent.locks.ReentrantReadWriteLock;\n-import java.util.function.Function;\n-import java.util.stream.Collectors;\n-import javax.ws.rs.HttpMethod;\n-import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.MultivaluedMap;\n-import javax.ws.rs.core.Response.Status;\n import org.apache.nifi.authorization.AccessDeniedException;\n import org.apache.nifi.authorization.user.NiFiUser;\n import org.apache.nifi.authorization.user.NiFiUserUtils;\n@@ -73,9 +45,39 @@ import org.apache.nifi.util.ComponentIdGenerator;\n import org.apache.nifi.util.FormatUtils;\n import org.apache.nifi.util.NiFiProperties;\n import org.apache.nifi.web.security.ProxiedEntitiesUtils;\n+import org.apache.nifi.web.security.jwt.JwtAuthenticationFilter;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import javax.ws.rs.HttpMethod;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.core.Response.Status;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.LongSummaryStatistics;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n public class ThreadPoolRequestReplicator implements RequestReplicator {\n \n     private static final Logger logger = LoggerFactory.getLogger(ThreadPoolRequestReplicator.class);\n@@ -219,7 +221,7 @@ public class ThreadPoolRequestReplicator implements RequestReplicator {\n         return replicate(nodeIdSet, method, uri, entity, headers, true, true);\n     }\n \n-    void addProxiedEntitiesHeader(final Map<String, String> headers) {\n+    void updateRequestHeaders(final Map<String, String> headers) {\n         final NiFiUser user = NiFiUserUtils.getNiFiUser();\n         if (user == null) {\n             throw new AccessDeniedException(\"Unknown user\");\n@@ -229,6 +231,13 @@ public class ThreadPoolRequestReplicator implements RequestReplicator {\n         // it knows that we are acting as a proxy on behalf of the current user.\n         final String proxiedEntitiesChain = ProxiedEntitiesUtils.buildProxiedEntitiesChainString(user);\n         headers.put(ProxiedEntitiesUtils.PROXY_ENTITIES_CHAIN, proxiedEntitiesChain);\n+\n+        // remove the access token if present, since the user is already authenticated... authorization\n+        // will happen when the request is replicated using the proxy chain above\n+        headers.remove(JwtAuthenticationFilter.AUTHORIZATION);\n+\n+        // remove the host header\n+        headers.remove(\"Host\");\n     }\n \n     @Override\n@@ -242,7 +251,7 @@ public class ThreadPoolRequestReplicator implements RequestReplicator {\n         }\n \n         // include the proxied entities header\n-        addProxiedEntitiesHeader(updatedHeaders);\n+        updateRequestHeaders(updatedHeaders);\n \n         if (indicateReplicated) {\n             // If we are replicating a request and indicating that it is replicated, then this means that we are\n@@ -283,7 +292,7 @@ public class ThreadPoolRequestReplicator implements RequestReplicator {\n         final Map<String, String> updatedHeaders = new HashMap<>(headers);\n \n         // include the proxied entities header\n-        addProxiedEntitiesHeader(updatedHeaders);\n+        updateRequestHeaders(updatedHeaders);\n \n         return replicate(Collections.singleton(coordinatorNodeId), method, uri, entity, updatedHeaders, false, null, false, false, null);\n     }\ndiff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ApplicationResource.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ApplicationResource.java\nindex 455380f2a7..a057da88ed 100644\n--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ApplicationResource.java\n+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ApplicationResource.java\n@@ -345,11 +345,19 @@ public abstract class ApplicationResource {\n             }\n         }\n \n-        // set the proxy scheme to request scheme if not already set client\n+        // set the proxy details to request details if not already set client\n         final String proxyScheme = httpServletRequest.getHeader(PROXY_SCHEME_HTTP_HEADER);\n         if (proxyScheme == null) {\n             result.put(PROXY_SCHEME_HTTP_HEADER, httpServletRequest.getScheme());\n         }\n+        final String proxyHost = httpServletRequest.getHeader(PROXY_HOST_HTTP_HEADER);\n+        if (proxyHost == null) {\n+            result.put(PROXY_HOST_HTTP_HEADER, httpServletRequest.getServerName());\n+        }\n+        final String proxyPort = httpServletRequest.getHeader(PROXY_PORT_HTTP_HEADER);\n+        if (proxyPort == null) {\n+            result.put(PROXY_PORT_HTTP_HEADER, String.valueOf(httpServletRequest.getServerPort()));\n+        }\n \n         return result;\n     }\n",
  "files": 2,
  "linesAdd": 49,
  "linesRem": 32,
  "failing_tests": [],
  "nb_test": 0,
  "nb_failure": 0,
  "nb_error": 0,
  "nb_skipped": 0
}