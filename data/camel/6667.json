{"files": 1, "singleLine": false, "nb_error": 0, "failing_tests": ["AsyncLoopCopyTest>TestSupport.runBare:58->testAsyncLoopCopy:42->ContextTestSupport.assertMockEndpointsSatisfied:343 mock://loopIterationStart Body of message: 1. Expected: <Hello Camel> but was: <Bye Camel>"], "nb_test": 4675, "patch": "diff --git a/camel-core/src/main/java/org/apache/camel/processor/LoopProcessor.java b/camel-core/src/main/java/org/apache/camel/processor/LoopProcessor.java\nindex df2baed..89649b1 100644\n--- a/camel-core/src/main/java/org/apache/camel/processor/LoopProcessor.java\n+++ b/camel-core/src/main/java/org/apache/camel/processor/LoopProcessor.java\n@@ -60,7 +60,11 @@ public class LoopProcessor extends DelegateAsyncProcessor implements Traceable {\n             callback.done(true);\n             return true;\n         }\n-\n+        \n+        // we hold on to the original Exchange in case it's needed for copies\n+        final Exchange original = exchange;\n+        \n+        // per-iteration exchange\n         Exchange target = exchange;\n \n         // set the size before we start\n@@ -70,8 +74,9 @@ public class LoopProcessor extends DelegateAsyncProcessor implements Traceable {\n         while (index.get() < count.get()) {\n \n             // and prepare for next iteration\n-            target = prepareExchange(exchange, index.get());\n-            boolean sync = process(target, callback, index, count);\n+            // if (!copy) target = exchange; else copy of original\n+            target = prepareExchange(exchange, index.get(), original);\n+            boolean sync = process(target, callback, index, count, original);\n \n             if (!sync) {\n                 LOG.trace(\"Processing exchangeId: {} is continued being processed asynchronously\", target.getExchangeId());\n@@ -94,12 +99,13 @@ public class LoopProcessor extends DelegateAsyncProcessor implements Traceable {\n     }\n \n     protected boolean process(final Exchange exchange, final AsyncCallback callback,\n-                              final AtomicInteger index, final AtomicInteger count) {\n+                              final AtomicInteger index, final AtomicInteger count,\n+                              final Exchange original) {\n \n         // set current index as property\n         LOG.debug(\"LoopProcessor: iteration #{}\", index.get());\n         exchange.setProperty(Exchange.LOOP_INDEX, index.get());\n-\n+        \n         boolean sync = processor.process(exchange, new AsyncCallback() {\n             public void done(boolean doneSync) {\n                 // we only have to handle async completion of the routing slip\n@@ -116,10 +122,10 @@ public class LoopProcessor extends DelegateAsyncProcessor implements Traceable {\n                 while (index.get() < count.get()) {\n \n                     // and prepare for next iteration\n-                    target = prepareExchange(exchange, index.get());\n+                    target = prepareExchange(exchange, index.get(), original);\n \n                     // process again\n-                    boolean sync = process(target, callback, index, count);\n+                    boolean sync = process(target, callback, index, count, original);\n                     if (!sync) {\n                         LOG.trace(\"Processing exchangeId: {} is continued being processed asynchronously\", target.getExchangeId());\n                         // the remainder of the routing slip will be completed async\n@@ -148,10 +154,11 @@ public class LoopProcessor extends DelegateAsyncProcessor implements Traceable {\n      * @param index the index of the next iteration\n      * @return the exchange to use\n      */\n-    protected Exchange prepareExchange(Exchange exchange, int index) {\n+    protected Exchange prepareExchange(Exchange exchange, int index, Exchange original) {\n         if (copy) {\n             // use a copy but let it reuse the same exchange id so it appear as one exchange\n-            return ExchangeHelper.createCopy(exchange, true);\n+            // use the original exchange rather than the looping exchange (esp. with the async routing engine)\n+            return ExchangeHelper.createCopy(original, true);\n         } else {\n             ExchangeHelper.prepareOutToIn(exchange);\n             return exchange;\n", "project": "camel", "linesAdd": 16, "nb_skipped": 1, "fix_commit": "1fc7bd7a", "nb_failure": 1, "id": "6667", "linesRem": 9}