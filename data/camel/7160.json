{
  "files": 1, 
  "singleLine": false, 
  "nb_error": 0, 
  "failing_tests": [
    "ManagedThrottlerTest>TestSupport.runBare:58->testThrottleVisableViaJmx:145 expected:<10> but was:<9>", 
    "ThrottlerTest>TestSupport.runBare:58->testConfigurationWithChangingHeaderExpression:168->sendMessagesWithHeaderExpression:199 Should take at most 1200ms, was: 4700"
  ], 
  "nb_test": 4788, 
  "patch": "diff --git a/camel-core/src/main/java/org/apache/camel/processor/Throttler.java b/camel-core/src/main/java/org/apache/camel/processor/Throttler.java\nindex ae6bc26..6b51a2c 100644\n--- a/camel-core/src/main/java/org/apache/camel/processor/Throttler.java\n+++ b/camel-core/src/main/java/org/apache/camel/processor/Throttler.java\n@@ -35,8 +35,8 @@ import org.apache.camel.util.ObjectHelper;\n  * as only allowing 100 requests per second; or if huge load can cause a\n  * particular system to malfunction or to reduce its throughput you might want\n  * to introduce some throttling.\n- * \n- * @version \n+ *\n+ * @version\n  */\n public class Throttler extends DelayProcessorSupport implements Traceable {\n     private volatile long maximumRequestsPerPeriod;\n@@ -80,7 +80,7 @@ public class Throttler extends DelayProcessorSupport implements Traceable {\n     public Expression getMaximumRequestsPerPeriodExpression() {\n         return maxRequestsPerPeriodExpression;\n     }\n-    \n+\n     public long getTimePeriodMillis() {\n         return timePeriodMillis.get();\n     }\n@@ -116,6 +116,9 @@ public class Throttler extends DelayProcessorSupport implements Traceable {\n             if (maximumRequestsPerPeriod > 0 && longValue.longValue() != maximumRequestsPerPeriod) {\n                 log.debug(\"Throttler changed maximum requests per period from {} to {}\", maximumRequestsPerPeriod, longValue);\n             }\n+            if (maximumRequestsPerPeriod > longValue) {\n+                slot.capacity = 0;\n+            }\n             maximumRequestsPerPeriod = longValue;\n         }\n \n@@ -131,7 +134,7 @@ public class Throttler extends DelayProcessorSupport implements Traceable {\n             return 0;\n         }\n     }\n-    \n+\n     /*\n      * Determine what the next available time slot is for handling an Exchange\n      */\n@@ -139,7 +142,7 @@ public class Throttler extends DelayProcessorSupport implements Traceable {\n         if (slot == null) {\n             slot = new TimeSlot();\n         }\n-        if (slot.isFull() || !slot.isActive()) {\n+        if (slot.isFull() || !slot.isPast()) {\n             slot = slot.next();\n         }\n         slot.assign();\n@@ -150,7 +153,7 @@ public class Throttler extends DelayProcessorSupport implements Traceable {\n     * A time slot is capable of handling a number of exchanges within a certain period of time.\n     */\n     protected class TimeSlot {\n-        \n+\n         private volatile long capacity = Throttler.this.maximumRequestsPerPeriod;\n         private final long duration = Throttler.this.timePeriodMillis.get();\n         private final long startTime;\n@@ -166,7 +169,7 @@ public class Throttler extends DelayProcessorSupport implements Traceable {\n         protected void assign() {\n             capacity--;\n         }\n-        \n+\n         /*\n          * Start the next time slot either now or in the future\n          * (no time slots are being created in the past)\n@@ -174,15 +177,20 @@ public class Throttler extends DelayProcessorSupport implements Traceable {\n         protected TimeSlot next() {\n             return new TimeSlot(Math.max(System.currentTimeMillis(), this.startTime + this.duration));\n         }\n-        \n+\n+        protected boolean isPast() {\n+            long current = System.currentTimeMillis();\n+            return current < (startTime + duration);\n+        }\n+\n         protected boolean isActive() {\n             long current = System.currentTimeMillis();\n             return startTime <= current && current < (startTime + duration);\n         }\n-        \n+\n         protected boolean isFull() {\n             return capacity <= 0;\n-        }        \n+        }\n     }\n \n     TimeSlot getSlot() {\n", 
  "project": "camel", 
  "linesAdd": 18, 
  "nb_skipped": 3, 
  "fix_commit": "095fa2b4", 
  "nb_failure": 2, 
  "id": "7160", 
  "linesRem": 10
}