{
  "files": 1, 
  "singleLine": false, 
  "nb_error": 1, 
  "failing_tests": [
    "testTimerSuspendResume(org.apache.camel.component.timer.TimerSuspendCamelContextTest): mock://result Received message count. Expected: <0> but was: <4>", 
    "testThreadNotUsedForEveryAggregatorWithCustomExecutorService(org.apache.camel.processor.aggregator.AggregateTimeoutWithExecutorServiceTest)"
  ], 
  "nb_test": 4147, 
  "patch": "diff --git a/camel-core/src/main/java/org/apache/camel/component/timer/TimerConsumer.java b/camel-core/src/main/java/org/apache/camel/component/timer/TimerConsumer.java\nindex a2cf79e..13be495 100644\n--- a/camel-core/src/main/java/org/apache/camel/component/timer/TimerConsumer.java\n+++ b/camel-core/src/main/java/org/apache/camel/component/timer/TimerConsumer.java\n@@ -50,6 +50,11 @@ public class TimerConsumer extends DefaultConsumer {\n \n             @Override\n             public void run() {\n+                if (!isTaskRunAllowed()) {\n+                    // do not run timer task as it was not allowed\n+                    return;\n+                }\n+\n                 try {\n                     long count = counter.incrementAndGet();\n \n@@ -80,6 +85,14 @@ public class TimerConsumer extends DefaultConsumer {\n         task = null;\n     }\n \n+    /**\n+     * Whether the timer task is allow to run or not\n+     */\n+    protected boolean isTaskRunAllowed() {\n+        // only allow running the timer task if we can run and are not suspended\n+        return isRunAllowed() && !isSuspended();\n+    }\n+\n     protected void configureTask(TimerTask task, Timer timer) {\n         if (endpoint.isFixedRate()) {\n             if (endpoint.getTime() != null) {\n", 
  "project": "camel", 
  "linesAdd": 13, 
  "nb_skipped": 0, 
  "fix_commit": "afa1d132", 
  "nb_failure": 1, 
  "id": "5137", 
  "linesRem": 0
}