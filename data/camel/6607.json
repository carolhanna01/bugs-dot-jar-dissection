{"nb_failure": 1, "nb_error": 0, "failing_tests": ["TokenizerTest>TestSupport.runBare:58->testTokenizeXMLPairWithSimilarChildNames:212 expected:<1> but was:<0>"], "patch": "diff --git a/camel-core/src/main/java/org/apache/camel/support/TokenXMLExpressionIterator.java b/camel-core/src/main/java/org/apache/camel/support/TokenXMLExpressionIterator.java\nindex b8d4374..938b1d6 100644\n--- a/camel-core/src/main/java/org/apache/camel/support/TokenXMLExpressionIterator.java\n+++ b/camel-core/src/main/java/org/apache/camel/support/TokenXMLExpressionIterator.java\n@@ -47,7 +47,7 @@ import org.apache.camel.util.ObjectHelper;\n public class TokenXMLExpressionIterator extends ExpressionAdapter {\n     private static final Pattern NAMESPACE_PATTERN = Pattern.compile(\"xmlns(:\\\\w+|)\\\\s*=\\\\s*('[^']+'|\\\"[^\\\"]+\\\")\");\n     private static final String SCAN_TOKEN_NS_PREFIX_REGEX = \"([^:<>]{1,15}?:|)\";\n-    private static final String SCAN_BLOCK_TOKEN_REGEX_TEMPLATE = \"<{0}(\\\\s+[^/]*)?/>|<{0}(\\\\s+[^>]*)?>(?:(?!</{0}).)*</{0}\\\\s*>\";\n+    private static final String SCAN_BLOCK_TOKEN_REGEX_TEMPLATE = \"<{0}(\\\\s+[^/]*)?/>|<{0}(\\\\s+[^>]*)?>(?:(?!(</{0}\\\\s*>)).)*</{0}\\\\s*>\";\n     private static final String SCAN_PARENT_TOKEN_REGEX_TEMPLATE = \"<{0}(\\\\s+[^>]*\\\\s*)?>\";\n     \n     protected final String tagToken;\n@@ -133,7 +133,7 @@ public class TokenXMLExpressionIterator extends ExpressionAdapter {\n             this.tagToken = tagToken;\n             this.in = in;\n             this.charset = charset;\n-\n+          \n             // remove any beginning < and ending > as we need to support ns prefixes and attributes, so we use a reg exp patterns\n             this.tagTokenPattern = \n                 Pattern.compile(MessageFormat.format(SCAN_BLOCK_TOKEN_REGEX_TEMPLATE, \n", "nb_test": 4629, "nb_skipped": 1, "fix_commit": "2d7051ed", "id": "6607"}