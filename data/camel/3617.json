{"files": 2, "singleLine": false, "nb_error": 1, "failing_tests": ["testMoveAbsolute(org.apache.camel.component.file.FileAbsolutePathIssueTest)"], "nb_test": 3122, "patch": "diff --git a/camel-core/src/main/java/org/apache/camel/builder/xml/DefaultTransformErrorHandler.java b/camel-core/src/main/java/org/apache/camel/builder/xml/DefaultTransformErrorHandler.java\nindex 214ea39..6e6b59d 100644\n--- a/camel-core/src/main/java/org/apache/camel/builder/xml/DefaultTransformErrorHandler.java\n+++ b/camel-core/src/main/java/org/apache/camel/builder/xml/DefaultTransformErrorHandler.java\n@@ -19,12 +19,13 @@ package org.apache.camel.builder.xml;\n import javax.xml.transform.ErrorListener;\n import javax.xml.transform.TransformerException;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.xml.sax.ErrorHandler;\n import org.xml.sax.SAXException;\n import org.xml.sax.SAXParseException;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n /**\n  * {@link ErrorHandler} and {@link ErrorListener} which will log warnings,\n  * and throws error and fatal as exception, which ensures those can be caught by Camel and dealt-with.\ndiff --git a/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java b/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java\nindex 8e8b320..6d2c809 100644\n--- a/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java\n+++ b/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java\n@@ -137,24 +137,21 @@ public class FileConsumer extends GenericFileConsumer<File> {\n         answer.setAbsolute(FileUtil.isAbsolute(file));\n         answer.setAbsoluteFilePath(file.getAbsolutePath());\n         answer.setLastModified(file.lastModified());\n-        if (answer.isAbsolute()) {\n-            // use absolute path as relative\n-            answer.setRelativeFilePath(file.getAbsolutePath());\n+\n+        // compute the file path as relative to the starting directory\n+        File path;\n+        String endpointNormalized = FileUtil.normalizePath(endpointPath);\n+        if (file.getPath().startsWith(endpointNormalized)) {\n+            // skip duplicate endpoint path\n+            path = new File(ObjectHelper.after(file.getPath(), endpointNormalized + File.separator));\n         } else {\n-            File path;\n-            String endpointNormalized = FileUtil.normalizePath(endpointPath);\n-            if (file.getPath().startsWith(endpointNormalized)) {\n-                // skip duplicate endpoint path\n-                path = new File(ObjectHelper.after(file.getPath(), endpointNormalized + File.separator));\n-            } else {\n-                path = new File(file.getPath());\n-            }\n+            path = new File(file.getPath());\n+        }\n \n-            if (path.getParent() != null) {\n-                answer.setRelativeFilePath(path.getParent() + File.separator + file.getName());\n-            } else {\n-                answer.setRelativeFilePath(path.getName());\n-            }\n+        if (path.getParent() != null) {\n+            answer.setRelativeFilePath(path.getParent() + File.separator + file.getName());\n+        } else {\n+            answer.setRelativeFilePath(path.getName());\n         }\n \n         // the file name should be the relative path\n", "project": "camel", "linesAdd": 16, "nb_skipped": 0, "fix_commit": "02626724", "nb_failure": 0, "id": "3617", "linesRem": 18}