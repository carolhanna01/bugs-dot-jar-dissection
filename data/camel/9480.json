{
  "files": 1, 
  "singleLine": false, 
  "nb_error": 1, 
  "failing_tests": [
    "IdempotentConsumerRepoExceptionTest>TestSupport.runBare:58->testRepoException:38 \u00bb CamelExecution"
  ], 
  "nb_test": 5492, 
  "patch": "diff --git a/camel-core/src/main/java/org/apache/camel/processor/idempotent/IdempotentConsumer.java b/camel-core/src/main/java/org/apache/camel/processor/idempotent/IdempotentConsumer.java\nindex e28a214..7b64546 100644\n--- a/camel-core/src/main/java/org/apache/camel/processor/idempotent/IdempotentConsumer.java\n+++ b/camel-core/src/main/java/org/apache/camel/processor/idempotent/IdempotentConsumer.java\n@@ -91,51 +91,65 @@ public class IdempotentConsumer extends ServiceSupport implements AsyncProcessor\n     }\n \n     public boolean process(final Exchange exchange, final AsyncCallback callback) {\n-        final String messageId = messageIdExpression.evaluate(exchange, String.class);\n-        if (messageId == null) {\n-            exchange.setException(new NoMessageIdException(exchange, messageIdExpression));\n+        final AsyncCallback target;\n+\n+        final String messageId;\n+        try {\n+            messageId = messageIdExpression.evaluate(exchange, String.class);\n+            if (messageId == null) {\n+                exchange.setException(new NoMessageIdException(exchange, messageIdExpression));\n+                callback.done(true);\n+                return true;\n+            }\n+        } catch (Exception e) {\n+            exchange.setException(e);\n             callback.done(true);\n             return true;\n         }\n \n-        boolean newKey;\n-        if (eager) {\n-            // add the key to the repository\n-            if (idempotentRepository instanceof ExchangeIdempotentRepository) {\n-                newKey = ((ExchangeIdempotentRepository<String>) idempotentRepository).add(exchange, messageId);\n-            } else {\n-                newKey = idempotentRepository.add(messageId);\n-            }\n-        } else {\n-            // check if we already have the key\n-            if (idempotentRepository instanceof ExchangeIdempotentRepository) {\n-                newKey = ((ExchangeIdempotentRepository<String>) idempotentRepository).contains(exchange, messageId);\n+        try {\n+            boolean newKey;\n+            if (eager) {\n+                // add the key to the repository\n+                if (idempotentRepository instanceof ExchangeIdempotentRepository) {\n+                    newKey = ((ExchangeIdempotentRepository<String>) idempotentRepository).add(exchange, messageId);\n+                } else {\n+                    newKey = idempotentRepository.add(messageId);\n+                }\n             } else {\n-                newKey = !idempotentRepository.contains(messageId);\n+                // check if we already have the key\n+                if (idempotentRepository instanceof ExchangeIdempotentRepository) {\n+                    newKey = ((ExchangeIdempotentRepository<String>) idempotentRepository).contains(exchange, messageId);\n+                } else {\n+                    newKey = !idempotentRepository.contains(messageId);\n+                }\n             }\n-        }\n \n+            if (!newKey) {\n+                // mark the exchange as duplicate\n+                exchange.setProperty(Exchange.DUPLICATE_MESSAGE, Boolean.TRUE);\n \n-        if (!newKey) {\n-            // mark the exchange as duplicate\n-            exchange.setProperty(Exchange.DUPLICATE_MESSAGE, Boolean.TRUE);\n+                // we already have this key so its a duplicate message\n+                onDuplicate(exchange, messageId);\n \n-            // we already have this key so its a duplicate message\n-            onDuplicate(exchange, messageId);\n-\n-            if (skipDuplicate) {\n-                // if we should skip duplicate then we are done\n-                LOG.debug(\"Ignoring duplicate message with id: {} for exchange: {}\", messageId, exchange);\n-                callback.done(true);\n-                return true;\n+                if (skipDuplicate) {\n+                    // if we should skip duplicate then we are done\n+                    LOG.debug(\"Ignoring duplicate message with id: {} for exchange: {}\", messageId, exchange);\n+                    callback.done(true);\n+                    return true;\n+                }\n             }\n-        }\n \n-        final Synchronization onCompletion = new IdempotentOnCompletion(idempotentRepository, messageId, eager, removeOnFailure);\n-        final AsyncCallback target = new IdempotentConsumerCallback(exchange, onCompletion, callback, completionEager);\n-        if (!completionEager) {\n-            // the scope is to do the idempotent completion work as an unit of work on the exchange when its done being routed\n-            exchange.addOnCompletion(onCompletion);\n+            final Synchronization onCompletion = new IdempotentOnCompletion(idempotentRepository, messageId, eager, removeOnFailure);\n+            target = new IdempotentConsumerCallback(exchange, onCompletion, callback, completionEager);\n+            if (!completionEager) {\n+                // the scope is to do the idempotent completion work as an unit of work on the exchange when its done being routed\n+                exchange.addOnCompletion(onCompletion);\n+            }\n+        } catch (Exception e) {\n+            exchange.setException(e);\n+            callback.done(true);\n+            return true;\n         }\n \n         // process the exchange\n", 
  "project": "camel", 
  "linesAdd": 48, 
  "nb_skipped": 4, 
  "fix_commit": "0ead2cac", 
  "nb_failure": 0, 
  "id": "9480", 
  "linesRem": 34
}