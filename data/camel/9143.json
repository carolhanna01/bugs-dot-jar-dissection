{"nb_failure": 1, "nb_error": 0, "failing_tests": ["ServicePoolAwareLeakyTest>TestSupport.runBare:58->testForMemoryLeak:232 Expected one transient producer as service expected:<1> but was:<1001>"], "patch": "diff --git a/camel-core/src/main/java/org/apache/camel/impl/ProducerCache.java b/camel-core/src/main/java/org/apache/camel/impl/ProducerCache.java\nindex 5b79954..586cc69 100644\n--- a/camel-core/src/main/java/org/apache/camel/impl/ProducerCache.java\n+++ b/camel-core/src/main/java/org/apache/camel/impl/ProducerCache.java\n@@ -60,23 +60,31 @@ public class ProducerCache extends ServiceSupport {\n     private boolean eventNotifierEnabled = true;\n     private boolean extendedStatistics;\n     private int maxCacheSize;\n+    private boolean stopServicePool;\n \n     public ProducerCache(Object source, CamelContext camelContext) {\n         this(source, camelContext, CamelContextHelper.getMaximumCachePoolSize(camelContext));\n     }\n \n     public ProducerCache(Object source, CamelContext camelContext, int cacheSize) {\n-        this(source, camelContext, camelContext.getProducerServicePool(), createLRUCache(cacheSize));\n+        this(source, camelContext, null, createLRUCache(cacheSize));\n     }\n \n     public ProducerCache(Object source, CamelContext camelContext, Map<String, Producer> cache) {\n-        this(source, camelContext, camelContext.getProducerServicePool(), cache);\n+        this(source, camelContext, null, cache);\n     }\n \n     public ProducerCache(Object source, CamelContext camelContext, ServicePool<Endpoint, Producer> producerServicePool, Map<String, Producer> cache) {\n         this.source = source;\n         this.camelContext = camelContext;\n-        this.pool = producerServicePool;\n+        if (producerServicePool == null) {\n+            // use shared producer pool which lifecycle is managed by CamelContext\n+            this.pool = camelContext.getProducerServicePool();\n+            this.stopServicePool = false;\n+        } else {\n+            this.pool = producerServicePool;\n+            this.stopServicePool = true;\n+        }\n         this.producers = cache;\n         if (producers instanceof LRUCache) {\n             maxCacheSize = ((LRUCache) producers).getMaxCacheSize();\n@@ -468,7 +476,10 @@ public class ProducerCache extends ServiceSupport {\n \n     protected void doStop() throws Exception {\n         // when stopping we intend to shutdown\n-        ServiceHelper.stopAndShutdownServices(statistics, pool);\n+        ServiceHelper.stopAndShutdownService(statistics);\n+        if (stopServicePool) {\n+            ServiceHelper.stopAndShutdownService(pool);\n+        }\n         try {\n             ServiceHelper.stopAndShutdownServices(producers.values());\n         } finally {\n", "nb_test": 5459, "nb_skipped": 4, "fix_commit": "08077733", "id": "9143"}