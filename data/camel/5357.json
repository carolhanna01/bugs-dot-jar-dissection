{
  "files": 1, 
  "singleLine": false, 
  "nb_error": 1, 
  "failing_tests": [
    "testPollFileAndShouldBeDeletedAtThirdPoll(org.apache.camel.component.file.FromFilePollThirdTimeOkTest): mock://result Body of message: 0. Expected: <Hello World this file will be deleted> but was: <null>", 
    "testPercentEncode(org.apache.camel.util.UnsafeCharactersEncoderTest): Get the wrong encoding result expected:<...re%20bar%20like%20'%[25]A'> but was:<...re%20bar%20like%20'%[]A'>", 
    "testThreadNotUsedForEveryAggregatorWithCustomExecutorService(org.apache.camel.processor.aggregator.AggregateTimeoutWithExecutorServiceTest)"
  ], 
  "nb_test": 4218, 
  "patch": "diff --git a/camel-core/src/main/java/org/apache/camel/util/UnsafeUriCharactersEncoder.java b/camel-core/src/main/java/org/apache/camel/util/UnsafeUriCharactersEncoder.java\nindex 39659e4..4bc707f 100644\n--- a/camel-core/src/main/java/org/apache/camel/util/UnsafeUriCharactersEncoder.java\n+++ b/camel-core/src/main/java/org/apache/camel/util/UnsafeUriCharactersEncoder.java\n@@ -20,6 +20,8 @@ import java.util.BitSet;\n \n /**\n  * Encoder for unsafe URI characters.\n+ * <p/>\n+ * A good source for details is <a href=\"http://en.wikipedia.org/wiki/Url_encode\">wikipedia url encode</a> article.\n  */\n public final class UnsafeUriCharactersEncoder {\n     private static BitSet unsafeCharacters;   \n@@ -33,7 +35,7 @@ public final class UnsafeUriCharactersEncoder {\n         unsafeCharacters.set('<');\n         unsafeCharacters.set('>');\n         unsafeCharacters.set('#');\n-        // unsafeCharacters.set('%');\n+        unsafeCharacters.set('%');\n         unsafeCharacters.set('{');\n         unsafeCharacters.set('}');\n         unsafeCharacters.set('|');\n@@ -70,16 +72,32 @@ public final class UnsafeUriCharactersEncoder {\n         }\n \n         // okay there are some unsafe characters so we do need to encode\n+        // see details at: http://en.wikipedia.org/wiki/Url_encode\n         StringBuilder sb = new StringBuilder();\n-        for (char ch : chars) {\n+        for (int i = 0; i < chars.length; i++) {\n+            char ch = chars[i];\n             if (ch > 0 && ch < 128 && unsafeCharacters.get(ch)) {\n-                appendEscape(sb, (byte)ch);\n+                // special for % sign as it may be a decimal encoded value\n+                if (ch == '%') {\n+                    char next = i + 1 < chars.length ? chars[i + 1] : ' ';\n+                    char next2 = i + 2 < chars.length ? chars[i + 2] : ' ';\n+\n+                    if (isHexDigit(next) && isHexDigit(next2)) {\n+                        // its already encoded (decimal encoded) so just append as is\n+                        sb.append(ch);\n+                    } else {\n+                        // must escape then, as its an unsafe character\n+                        appendEscape(sb, (byte)ch);\n+                    }\n+                } else {\n+                    // must escape then, as its an unsafe character\n+                    appendEscape(sb, (byte)ch);\n+                }\n             } else {\n                 sb.append(ch);\n             }\n         }\n         return sb.toString();\n-\n     }\n \n     private static void appendEscape(StringBuilder sb, byte b) {\n@@ -88,4 +106,13 @@ public final class UnsafeUriCharactersEncoder {\n         sb.append(HEX_DIGITS[(b >> 0) & 0x0f]);\n     }\n \n+    private static boolean isHexDigit(char ch) {\n+        for (char hex : HEX_DIGITS) {\n+            if (hex == ch) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n }\n", 
  "project": "camel", 
  "linesAdd": 31, 
  "nb_skipped": 1, 
  "fix_commit": "4cf7e80e", 
  "nb_failure": 2, 
  "id": "5357", 
  "linesRem": 4
}