{"files": 1, "singleLine": false, "nb_error": 0, "failing_tests": ["BeanOgnlBodyMethodReturnNullValueTest>TestSupport.runBare:58->testNullValue:42 expected:<foo: [null]; bar: test> but was:<foo: [org.apache.camel.component.bean.BeanOgnlBodyMethodReturnNullValueTest$ExamplePojo@fe96b09]; bar: test>", "AggregateTimeoutTest>TestSupport.runBare:58->testAggregateTimeout:51 expected:<1> but was:<0>"], "nb_test": 4686, "patch": "diff --git a/camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java b/camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java\nindex 7160d3d..cc58c50 100644\n--- a/camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java\n+++ b/camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java\n@@ -512,46 +512,47 @@ public class MethodInfo {\n                     try {\n                         expression = exchange.getContext().resolveLanguage(\"simple\").createExpression(exp);\n                         parameterValue = expression.evaluate(exchange, Object.class);\n+                        // use \"null\" to indicate the expression returned a null value which is a valid response we need to honor\n+                        if (parameterValue == null) {\n+                            parameterValue = \"null\";\n+                        }\n                     } catch (Exception e) {\n                         throw new ExpressionEvaluationException(expression, \"Cannot create/evaluate simple expression: \" + exp\n                                 + \" to be bound to parameter at index: \" + index + \" on method: \" + getMethod(), exchange, e);\n                     }\n \n-                    if (parameterValue != null) {\n+                    // special for explicit null parameter values (as end users can explicit indicate they want null as parameter)\n+                    // see method javadoc for details\n+                    if (\"null\".equals(parameterValue)) {\n+                        return Void.TYPE;\n+                    }\n \n-                        // special for explicit null parameter values (as end users can explicit indicate they want null as parameter)\n-                        // see method javadoc for details\n-                        if (\"null\".equals(parameterValue)) {\n-                            return Void.TYPE;\n-                        }\n+                    // the parameter value was not already valid, but since the simple language have evaluated the expression\n+                    // which may change the parameterValue, so we have to check it again to see if its now valid\n+                    exp = exchange.getContext().getTypeConverter().convertTo(String.class, parameterValue);\n+                    // String values from the simple language is always valid\n+                    if (!valid) {\n+                        // re validate if the parameter was not valid the first time (String values should be accepted)\n+                        valid = parameterValue instanceof String || BeanHelper.isValidParameterValue(exp);\n+                    }\n \n-                        // the parameter value was not already valid, but since the simple language have evaluated the expression\n-                        // which may change the parameterValue, so we have to check it again to see if its now valid\n-                        exp = exchange.getContext().getTypeConverter().convertTo(String.class, parameterValue);\n-                        // String values from the simple language is always valid\n-                        if (!valid) {\n-                            // re validate if the parameter was not valid the first time (String values should be accepted)\n-                            valid = parameterValue instanceof String || BeanHelper.isValidParameterValue(exp);\n+                    if (valid) {\n+                        // we need to unquote String parameters, as the enclosing quotes is there to denote a parameter value\n+                        if (parameterValue instanceof String) {\n+                            parameterValue = StringHelper.removeLeadingAndEndingQuotes((String) parameterValue);\n                         }\n-\n-                        if (valid) {\n-                            // we need to unquote String parameters, as the enclosing quotes is there to denote a parameter value\n-                            if (parameterValue instanceof String) {\n-                                parameterValue = StringHelper.removeLeadingAndEndingQuotes((String) parameterValue);\n-                            }\n-                            if (parameterValue != null) {\n-                                try {\n-                                    // its a valid parameter value, so convert it to the expected type of the parameter\n-                                    answer = exchange.getContext().getTypeConverter().mandatoryConvertTo(parameterType, exchange, parameterValue);\n-                                    if (LOG.isTraceEnabled()) {\n-                                        LOG.trace(\"Parameter #{} evaluated as: {} type: \", new Object[]{index, answer, ObjectHelper.type(answer)});\n-                                    }\n-                                } catch (Exception e) {\n-                                    if (LOG.isDebugEnabled()) {\n-                                        LOG.debug(\"Cannot convert from type: {} to type: {} for parameter #{}\", new Object[]{ObjectHelper.type(parameterValue), parameterType, index});\n-                                    }\n-                                    throw new ParameterBindingException(e, method, index, parameterType, parameterValue);\n+                        if (parameterValue != null) {\n+                            try {\n+                                // its a valid parameter value, so convert it to the expected type of the parameter\n+                                answer = exchange.getContext().getTypeConverter().mandatoryConvertTo(parameterType, exchange, parameterValue);\n+                                if (LOG.isTraceEnabled()) {\n+                                    LOG.trace(\"Parameter #{} evaluated as: {} type: \", new Object[]{index, answer, ObjectHelper.type(answer)});\n+                                }\n+                            } catch (Exception e) {\n+                                if (LOG.isDebugEnabled()) {\n+                                    LOG.debug(\"Cannot convert from type: {} to type: {} for parameter #{}\", new Object[]{ObjectHelper.type(parameterValue), parameterType, index});\n                                 }\n+                                throw new ParameterBindingException(e, method, index, parameterType, parameterValue);\n                             }\n                         }\n                     }\n", "project": "camel", "linesAdd": 32, "nb_skipped": 1, "fix_commit": "617eab1c", "nb_failure": 2, "id": "6687", "linesRem": 31}