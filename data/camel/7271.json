{"files": 1, "singleLine": false, "nb_error": 1, "failing_tests": ["MulticastGroupedExchangeExceptionTest>TestSupport.runBare:58->testAFail:75 \u00bb CamelExecution"], "nb_test": 4910, "patch": "diff --git a/camel-core/src/main/java/org/apache/camel/processor/aggregate/GroupedExchangeAggregationStrategy.java b/camel-core/src/main/java/org/apache/camel/processor/aggregate/GroupedExchangeAggregationStrategy.java\nindex 84b375d..2906270 100644\n--- a/camel-core/src/main/java/org/apache/camel/processor/aggregate/GroupedExchangeAggregationStrategy.java\n+++ b/camel-core/src/main/java/org/apache/camel/processor/aggregate/GroupedExchangeAggregationStrategy.java\n@@ -19,6 +19,7 @@ package org.apache.camel.processor.aggregate;\n import java.util.List;\n \n import org.apache.camel.Exchange;\n+import org.apache.camel.impl.DefaultExchange;\n \n /**\n  * Aggregate all exchanges into a single combined Exchange holding all the aggregated exchanges\n@@ -29,7 +30,6 @@ import org.apache.camel.Exchange;\n public class GroupedExchangeAggregationStrategy extends AbstractListAggregationStrategy<Exchange> {\n \n     @Override\n-   \n     public void onCompletion(Exchange exchange) {\n         if (isStoreAsBodyOnCompletion()) {\n             // lets be backwards compatible\n@@ -43,13 +43,12 @@ public class GroupedExchangeAggregationStrategy extends AbstractListAggregationS\n \n     @Override\n     public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {\n-        Exchange answer = super.aggregate(oldExchange, newExchange);\n         if (oldExchange == null) {\n-            // for the first time we must do a copy as the answer, so the outgoing\n-            // exchange is not one of the grouped exchanges, as that causes a endless circular reference\n-            answer = answer.copy();\n+            // for the first time we must create a new empty exchange as the holder, as the outgoing exchange\n+            // must not be one of the grouped exchanges, as that causes a endless circular reference\n+            oldExchange = new DefaultExchange(newExchange);\n         }\n-        return answer;\n+        return super.aggregate(oldExchange, newExchange);\n     }\n \n     @Override\n", "project": "camel", "linesAdd": 5, "nb_skipped": 3, "fix_commit": "a5a2f750", "nb_failure": 0, "id": "7271", "linesRem": 6}