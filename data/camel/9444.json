{"nb_failure": 4, "nb_error": 0, "failing_tests": ["RecipientListShareUnitOfWorkOnExceptionHandledFalseIssueTest>TestSupport.runBare:58->testRecipientList:34->TestSupport.assertIsInstanceOf:166 Expected an instance of type: java.lang.IllegalArgumentException but was null", "SplitSubUnitOfWorkTest>TestSupport.runBare:58->testError:57->ContextTestSupport.assertMockEndpointsSatisfied:343 mock://result Received message count. Expected: <0> but was: <1>", "SplitSubUnitOfWorkWithMDCLoggingTest>TestSupport.runBare:58->SplitSubUnitOfWorkTest.testError:57->ContextTestSupport.assertMockEndpointsSatisfied:343 mock://result Received message count. Expected: <0> but was: <1>", "SplitTwoSubUnitOfWorkTest>TestSupport.runBare:58->testError:61->ContextTestSupport.assertMockEndpointsSatisfied:343 mock://result Received message count. Expected: <0> but was: <1>"], "patch": "diff --git a/camel-core/src/main/java/org/apache/camel/model/MulticastDefinition.java b/camel-core/src/main/java/org/apache/camel/model/MulticastDefinition.java\nindex 55f6ad0..42b3e59 100644\n--- a/camel-core/src/main/java/org/apache/camel/model/MulticastDefinition.java\n+++ b/camel-core/src/main/java/org/apache/camel/model/MulticastDefinition.java\n@@ -31,6 +31,7 @@ import org.apache.camel.processor.CamelInternalProcessor;\n import org.apache.camel.processor.MulticastProcessor;\n import org.apache.camel.processor.aggregate.AggregationStrategy;\n import org.apache.camel.processor.aggregate.AggregationStrategyBeanAdapter;\n+import org.apache.camel.processor.aggregate.ShareUnitOfWorkAggregationStrategy;\n import org.apache.camel.processor.aggregate.UseLatestAggregationStrategy;\n import org.apache.camel.spi.Metadata;\n import org.apache.camel.spi.RouteContext;\n@@ -287,11 +288,7 @@ public class MulticastDefinition extends OutputDefinition<MulticastDefinition> i\n     }\n \n     protected Processor createCompositeProcessor(RouteContext routeContext, List<Processor> list) throws Exception {\n-        AggregationStrategy strategy = createAggregationStrategy(routeContext);\n-        if (strategy == null) {\n-            // default to use latest aggregation strategy\n-            strategy = new UseLatestAggregationStrategy();\n-        }\n+        final AggregationStrategy strategy = createAggregationStrategy(routeContext);\n \n         boolean isParallelProcessing = getParallelProcessing() != null && getParallelProcessing();\n         boolean isShareUnitOfWork = getShareUnitOfWork() != null && getShareUnitOfWork();\n@@ -333,14 +330,23 @@ public class MulticastDefinition extends OutputDefinition<MulticastDefinition> i\n             }\n         }\n \n-        if (strategy != null && strategy instanceof CamelContextAware) {\n+        if (strategy == null) {\n+            // default to use latest aggregation strategy\n+            strategy = new UseLatestAggregationStrategy();\n+        }\n+\n+        if (strategy instanceof CamelContextAware) {\n             ((CamelContextAware) strategy).setCamelContext(routeContext.getCamelContext());\n         }\n \n+        if (shareUnitOfWork != null && shareUnitOfWork) {\n+            // wrap strategy in share unit of work\n+            strategy = new ShareUnitOfWorkAggregationStrategy(strategy);\n+        }\n+\n         return strategy;\n     }\n \n-\n     public AggregationStrategy getAggregationStrategy() {\n         return aggregationStrategy;\n     }\ndiff --git a/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java b/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java\nindex 0705d69..eacb304 100644\n--- a/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java\n+++ b/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java\n@@ -54,7 +54,6 @@ import org.apache.camel.model.language.ExpressionDefinition;\n import org.apache.camel.model.language.LanguageExpression;\n import org.apache.camel.model.language.SimpleExpression;\n import org.apache.camel.model.rest.RestDefinition;\n-import org.apache.camel.processor.CamelInternalProcessor;\n import org.apache.camel.processor.InterceptEndpointProcessor;\n import org.apache.camel.processor.Pipeline;\n import org.apache.camel.processor.aggregate.AggregationStrategy;\n@@ -535,16 +534,10 @@ public abstract class ProcessorDefinition<Type extends ProcessorDefinition<Type>\n             processor = createProcessor(routeContext);\n         }\n \n-        // unwrap internal processor so we can set id on the actual processor\n-        Processor idProcessor = processor;\n-        if (processor instanceof CamelInternalProcessor) {\n-            idProcessor = ((CamelInternalProcessor) processor).getProcessor();\n-        }\n-\n         // inject id\n-        if (idProcessor instanceof IdAware) {\n+        if (processor instanceof IdAware) {\n             String id = this.idOrCreate(routeContext.getCamelContext().getNodeIdFactory());\n-            ((IdAware) idProcessor).setId(id);\n+            ((IdAware) processor).setId(id);\n         }\n \n         if (processor == null) {\ndiff --git a/camel-core/src/main/java/org/apache/camel/model/RecipientListDefinition.java b/camel-core/src/main/java/org/apache/camel/model/RecipientListDefinition.java\nindex 49d75f9..0d02a48 100644\n--- a/camel-core/src/main/java/org/apache/camel/model/RecipientListDefinition.java\n+++ b/camel-core/src/main/java/org/apache/camel/model/RecipientListDefinition.java\n@@ -34,6 +34,7 @@ import org.apache.camel.processor.Pipeline;\n import org.apache.camel.processor.RecipientList;\n import org.apache.camel.processor.aggregate.AggregationStrategy;\n import org.apache.camel.processor.aggregate.AggregationStrategyBeanAdapter;\n+import org.apache.camel.processor.aggregate.ShareUnitOfWorkAggregationStrategy;\n import org.apache.camel.processor.aggregate.UseLatestAggregationStrategy;\n import org.apache.camel.spi.Metadata;\n import org.apache.camel.spi.RouteContext;\n@@ -192,8 +193,9 @@ public class RecipientListDefinition<Type extends ProcessorDefinition<Type>> ext\n                 throw new IllegalArgumentException(\"Cannot find AggregationStrategy in Registry with name: \" + strategyRef);\n             }\n         }\n+\n         if (strategy == null) {\n-            // fallback to use latest\n+            // default to use latest aggregation strategy\n             strategy = new UseLatestAggregationStrategy();\n         }\n \n@@ -201,6 +203,11 @@ public class RecipientListDefinition<Type extends ProcessorDefinition<Type>> ext\n             ((CamelContextAware) strategy).setCamelContext(routeContext.getCamelContext());\n         }\n \n+        if (shareUnitOfWork != null && shareUnitOfWork) {\n+            // wrap strategy in share unit of work\n+            strategy = new ShareUnitOfWorkAggregationStrategy(strategy);\n+        }\n+\n         return strategy;\n     }\n \ndiff --git a/camel-core/src/main/java/org/apache/camel/model/SplitDefinition.java b/camel-core/src/main/java/org/apache/camel/model/SplitDefinition.java\nindex ccfd045..5e49de2 100644\n--- a/camel-core/src/main/java/org/apache/camel/model/SplitDefinition.java\n+++ b/camel-core/src/main/java/org/apache/camel/model/SplitDefinition.java\n@@ -31,6 +31,7 @@ import org.apache.camel.processor.CamelInternalProcessor;\n import org.apache.camel.processor.Splitter;\n import org.apache.camel.processor.aggregate.AggregationStrategy;\n import org.apache.camel.processor.aggregate.AggregationStrategyBeanAdapter;\n+import org.apache.camel.processor.aggregate.ShareUnitOfWorkAggregationStrategy;\n import org.apache.camel.spi.Metadata;\n import org.apache.camel.spi.RouteContext;\n import org.apache.camel.util.CamelContextHelper;\n@@ -119,6 +120,12 @@ public class SplitDefinition extends ExpressionNode implements ExecutorServiceAw\n         Splitter answer = new Splitter(routeContext.getCamelContext(), exp, childProcessor, aggregationStrategy,\n                             isParallelProcessing, threadPool, shutdownThreadPool, isStreaming, isStopOnException(),\n                             timeout, onPrepare, isShareUnitOfWork, isParallelAggregate);\n+//        if (isShareUnitOfWork) {\n+            // wrap answer in a sub unit of work, since we share the unit of work\n+//            CamelInternalProcessor internalProcessor = new CamelInternalProcessor(answer);\n+//            internalProcessor.addAdvice(new CamelInternalProcessor.SubUnitOfWorkProcessorAdvice());\n+//            return internalProcessor;\n+//        }\n         return answer;\n     }\n \n@@ -144,6 +151,11 @@ public class SplitDefinition extends ExpressionNode implements ExecutorServiceAw\n             ((CamelContextAware) strategy).setCamelContext(routeContext.getCamelContext());\n         }\n \n+        if (strategy != null && shareUnitOfWork != null && shareUnitOfWork) {\n+            // wrap strategy in share unit of work\n+            strategy = new ShareUnitOfWorkAggregationStrategy(strategy);\n+        }\n+\n         return strategy;\n     }\n \ndiff --git a/camel-core/src/main/java/org/apache/camel/processor/RecipientList.java b/camel-core/src/main/java/org/apache/camel/processor/RecipientList.java\nindex 98f8e45..ded8ca9 100644\n--- a/camel-core/src/main/java/org/apache/camel/processor/RecipientList.java\n+++ b/camel-core/src/main/java/org/apache/camel/processor/RecipientList.java\n@@ -166,16 +166,8 @@ public class RecipientList extends ServiceSupport implements AsyncProcessor, IdA\n             return true;\n         }\n \n-        AsyncProcessor target = rlp;\n-        if (isShareUnitOfWork()) {\n-            // wrap answer in a sub unit of work, since we share the unit of work\n-            CamelInternalProcessor internalProcessor = new CamelInternalProcessor(rlp);\n-            internalProcessor.addAdvice(new CamelInternalProcessor.SubUnitOfWorkProcessorAdvice());\n-            target = internalProcessor;\n-        }\n-\n         // now let the multicast process the exchange\n-        return target.process(exchange, callback);\n+        return rlp.process(exchange, callback);\n     }\n \n     protected Endpoint resolveEndpoint(Exchange exchange, Object recipient) {\ndiff --git a/camel-core/src/main/java/org/apache/camel/processor/Splitter.java b/camel-core/src/main/java/org/apache/camel/processor/Splitter.java\nindex 55a9bd9..40ca426 100644\n--- a/camel-core/src/main/java/org/apache/camel/processor/Splitter.java\n+++ b/camel-core/src/main/java/org/apache/camel/processor/Splitter.java\n@@ -36,6 +36,7 @@ import org.apache.camel.Processor;\n import org.apache.camel.RuntimeCamelException;\n import org.apache.camel.Traceable;\n import org.apache.camel.processor.aggregate.AggregationStrategy;\n+import org.apache.camel.processor.aggregate.ShareUnitOfWorkAggregationStrategy;\n import org.apache.camel.processor.aggregate.UseOriginalAggregationStrategy;\n import org.apache.camel.spi.RouteContext;\n import org.apache.camel.util.ExchangeHelper;\n@@ -97,7 +98,10 @@ public class Splitter extends MulticastProcessor implements AsyncProcessor, Trac\n         // and propagate exceptions which is done by a per exchange specific aggregation strategy\n         // to ensure it supports async routing\n         if (strategy == null) {\n-            UseOriginalAggregationStrategy original = new UseOriginalAggregationStrategy(exchange, true);\n+            AggregationStrategy original = new UseOriginalAggregationStrategy(exchange, true);\n+            if (isShareUnitOfWork()) {\n+                original = new ShareUnitOfWorkAggregationStrategy(original);\n+            }\n             setAggregationStrategyOnExchange(exchange, original);\n         }\n \ndiff --git a/camel-core/src/main/java/org/apache/camel/processor/aggregate/ShareUnitOfWorkAggregationStrategy.java b/camel-core/src/main/java/org/apache/camel/processor/aggregate/ShareUnitOfWorkAggregationStrategy.java\nnew file mode 100644\nindex 0000000..4a1187f\n--- /dev/null\n+++ b/camel-core/src/main/java/org/apache/camel/processor/aggregate/ShareUnitOfWorkAggregationStrategy.java\n@@ -0,0 +1,77 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.processor.aggregate;\n+\n+import org.apache.camel.Exchange;\n+\n+import static org.apache.camel.util.ExchangeHelper.hasExceptionBeenHandledByErrorHandler;\n+\n+/**\n+ * An {@link AggregationStrategy} which are used when the option <tt>shareUnitOfWork</tt> is enabled\n+ * on EIPs such as multicast, splitter or recipientList.\n+ * <p/>\n+ * This strategy wraps the actual in use strategy to provide the logic needed for making shareUnitOfWork work.\n+ * <p/>\n+ * This strategy is <b>not</b> intended for end users to use.\n+ */\n+public final class ShareUnitOfWorkAggregationStrategy implements AggregationStrategy {\n+\n+    private final AggregationStrategy strategy;\n+\n+    public ShareUnitOfWorkAggregationStrategy(AggregationStrategy strategy) {\n+        this.strategy = strategy;\n+    }\n+\n+    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {\n+        // aggreagate using the actual strategy first\n+        Exchange answer = strategy.aggregate(oldExchange, newExchange);\n+        // ensure any errors is propagated from the new exchange to the answer\n+        propagateFailure(answer, newExchange);\n+\n+        return answer;\n+    }\n+    \n+    protected void propagateFailure(Exchange answer, Exchange newExchange) {\n+        // if new exchange failed then propagate all the error related properties to the answer\n+        boolean exceptionHandled = hasExceptionBeenHandledByErrorHandler(newExchange);\n+        if (newExchange.isFailed() || newExchange.isRollbackOnly() || exceptionHandled) {\n+            if (newExchange.getException() != null) {\n+                answer.setException(newExchange.getException());\n+            }\n+            if (newExchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+                answer.setProperty(Exchange.EXCEPTION_CAUGHT, newExchange.getProperty(Exchange.EXCEPTION_CAUGHT));\n+            }\n+            if (newExchange.getProperty(Exchange.FAILURE_ENDPOINT) != null) {\n+                answer.setProperty(Exchange.FAILURE_ENDPOINT, newExchange.getProperty(Exchange.FAILURE_ENDPOINT));\n+            }\n+            if (newExchange.getProperty(Exchange.FAILURE_ROUTE_ID) != null) {\n+                answer.setProperty(Exchange.FAILURE_ROUTE_ID, newExchange.getProperty(Exchange.FAILURE_ROUTE_ID));\n+            }\n+            if (newExchange.getProperty(Exchange.ERRORHANDLER_HANDLED) != null) {\n+                answer.setProperty(Exchange.ERRORHANDLER_HANDLED, newExchange.getProperty(Exchange.ERRORHANDLER_HANDLED));\n+            }\n+            if (newExchange.getProperty(Exchange.FAILURE_HANDLED) != null) {\n+                answer.setProperty(Exchange.FAILURE_HANDLED, newExchange.getProperty(Exchange.FAILURE_HANDLED));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"ShareUnitOfWorkAggregationStrategy\";\n+    }\n+}\n", "nb_test": 5519, "nb_skipped": 4, "fix_commit": "baece126", "id": "9444"}