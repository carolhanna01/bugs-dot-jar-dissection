{
  "files": 1, 
  "singleLine": false, 
  "nb_error": 1, 
  "failing_tests": [
    "org.apache.camel.language.simple.SimpleTest.testSimpleFileDir(org.apache.camel.language.simple.SimpleTest)", 
    "Run 1: SimpleTest>TestSupport.runBare:58->testSimpleFileDir:110->LanguageTestSupport.assertExpression:69->LanguageTestSupport.assertExpression:62->ContextTestSupport.assertExpression:311 \u00bb SimpleParser", 
    "Run 2: SimpleTest>TestSupport.runBare:58->testSimpleFileDir:110->LanguageTestSupport.assertExpression:69->LanguageTestSupport.assertExpression:62->ContextTestSupport.assertExpression:311 \u00bb SimpleParser", 
    "Run 3: SimpleTest>TestSupport.runBare:58->testSimpleFileDir:110->LanguageTestSupport.assertExpression:69->LanguageTestSupport.assertExpression:62->ContextTestSupport.assertExpression:311 \u00bb SimpleParser", 
    "Flaked tests:", 
    "org.apache.camel.management.ManagedThrottlerTest.testThrottleAsyncVisableViaJmx(org.apache.camel.management.ManagedThrottlerTest)", 
    "Run 1: ManagedThrottlerTest>TestSupport.runBare:58->testThrottleAsyncVisableViaJmx:180 expected:<10> but was:<9>", 
    "Run 2: ManagedThrottlerTest>TestSupport.runBare:58->testThrottleAsyncVisableViaJmx:180 expected:<10> but was:<9>", 
    "Run 3: PASS"
  ], 
  "nb_test": 5540, 
  "patch": "diff --git a/camel-core/src/main/java/org/apache/camel/language/simple/ast/SimpleFunctionExpression.java b/camel-core/src/main/java/org/apache/camel/language/simple/ast/SimpleFunctionExpression.java\nindex be5e4ac..5110ae9 100644\n--- a/camel-core/src/main/java/org/apache/camel/language/simple/ast/SimpleFunctionExpression.java\n+++ b/camel-core/src/main/java/org/apache/camel/language/simple/ast/SimpleFunctionExpression.java\n@@ -141,8 +141,8 @@ public class SimpleFunctionExpression extends LiteralExpression {\n         // file: prefix\n         remainder = ifStartsWithReturnRemainder(\"file:\", function);\n         if (remainder != null) {\n-            Expression fileExpression = createSimpleFileExpression(remainder);\n-            if (function != null) {\n+            Expression fileExpression = createSimpleFileExpression(remainder, strict);\n+            if (fileExpression != null) {\n                 return fileExpression;\n             }\n         }\n@@ -388,7 +388,7 @@ public class SimpleFunctionExpression extends LiteralExpression {\n         return null;\n     }\n \n-    private Expression createSimpleFileExpression(String remainder) {\n+    private Expression createSimpleFileExpression(String remainder, boolean strict) {\n         if (ObjectHelper.equal(remainder, \"name\")) {\n             return ExpressionBuilder.fileNameExpression();\n         } else if (ObjectHelper.equal(remainder, \"name.noext\")) {\n@@ -418,7 +418,10 @@ public class SimpleFunctionExpression extends LiteralExpression {\n         } else if (ObjectHelper.equal(remainder, \"modified\")) {\n             return ExpressionBuilder.fileLastModifiedExpression();\n         }\n-        throw new SimpleParserException(\"Unknown file language syntax: \" + remainder, token.getIndex());\n+        if (strict) {\n+            throw new SimpleParserException(\"Unknown file language syntax: \" + remainder, token.getIndex());\n+        }\n+        return null;\n     }\n \n     private String ifStartsWithReturnRemainder(String prefix, String text) {\n", 
  "project": "camel", 
  "linesAdd": 7, 
  "nb_skipped": 4, 
  "fix_commit": "9a6e6d8a", 
  "nb_failure": 0, 
  "id": "9641", 
  "linesRem": 4
}